<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: state/history/history_types.proto

namespace Com\Hedera\Hapi\Node\State\History;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Summary of the status of constructing a metadata proof, necessary to
 * ensure deterministic construction ending in a roster with sufficient
 * weight to enact its own constructions.
 *
 * Generated from protobuf message <code>com.hedera.hapi.node.state.history.HistoryProofConstruction</code>
 */
class HistoryProofConstruction extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * The construction id.
     *
     * Generated from protobuf field <code>uint64 construction_id = 1;</code>
     */
    protected $construction_id = 0;
    /**
     **
     * The hash of the roster whose weights are used to determine when
     * certain thresholds are during construction.
     *
     * Generated from protobuf field <code>bytes source_roster_hash = 2;</code>
     */
    protected $source_roster_hash = '';
    /**
     **
     * If set, the proof that the address book of the source roster belongs
     * to the the ledger id's chain of trust; if not set, the source roster's
     * address book must *be* the ledger id.
     *
     * Generated from protobuf field <code>.com.hedera.hapi.node.state.history.HistoryProof source_proof = 3;</code>
     */
    protected $source_proof = null;
    /**
     **
     * The hash of the roster whose weights are used to assess progress
     * toward obtaining proof keys for parties that hold at least a
     * strong minority of the stake in that roster.
     *
     * Generated from protobuf field <code>bytes target_roster_hash = 4;</code>
     */
    protected $target_roster_hash = '';
    protected $proof_state;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $construction_id
     *          *
     *           The construction id.
     *     @type string $source_roster_hash
     *          *
     *           The hash of the roster whose weights are used to determine when
     *           certain thresholds are during construction.
     *     @type \Com\Hedera\Hapi\Node\State\History\HistoryProof $source_proof
     *          *
     *           If set, the proof that the address book of the source roster belongs
     *           to the the ledger id's chain of trust; if not set, the source roster's
     *           address book must *be* the ledger id.
     *     @type string $target_roster_hash
     *          *
     *           The hash of the roster whose weights are used to assess progress
     *           toward obtaining proof keys for parties that hold at least a
     *           strong minority of the stake in that roster.
     *     @type \Proto\Timestamp $grace_period_end_time
     *          *
     *           If the network is still gathering proof keys for this
     *           construction, the next time at which nodes should stop waiting
     *           for tardy proof keys and assembly the history to be proven as
     *           soon as it has the associated metadata and proof keys for nodes
     *           with >2/3 weight in the target roster.
     *     @type \Proto\Timestamp $assembly_start_time
     *          *
     *           If the network has gathered enough proof keys to assemble the
     *           history for this construction, the cutoff time at which those
     *           keys must have been adopted to be included in the final history.
     *     @type \Com\Hedera\Hapi\Node\State\History\HistoryProof $target_proof
     *          *
     *           When this construction is complete, the recursive proof that
     *           the target roster's address book and associated metadata belong
     *           to the ledger id's chain of trust.
     *     @type string $failure_reason
     *          *
     *           If set, the reason the construction failed.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\State\History\HistoryTypes::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * The construction id.
     *
     * Generated from protobuf field <code>uint64 construction_id = 1;</code>
     * @return int|string
     */
    public function getConstructionId()
    {
        return $this->construction_id;
    }

    /**
     **
     * The construction id.
     *
     * Generated from protobuf field <code>uint64 construction_id = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setConstructionId($var)
    {
        GPBUtil::checkUint64($var);
        $this->construction_id = $var;

        return $this;
    }

    /**
     **
     * The hash of the roster whose weights are used to determine when
     * certain thresholds are during construction.
     *
     * Generated from protobuf field <code>bytes source_roster_hash = 2;</code>
     * @return string
     */
    public function getSourceRosterHash()
    {
        return $this->source_roster_hash;
    }

    /**
     **
     * The hash of the roster whose weights are used to determine when
     * certain thresholds are during construction.
     *
     * Generated from protobuf field <code>bytes source_roster_hash = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setSourceRosterHash($var)
    {
        GPBUtil::checkString($var, False);
        $this->source_roster_hash = $var;

        return $this;
    }

    /**
     **
     * If set, the proof that the address book of the source roster belongs
     * to the the ledger id's chain of trust; if not set, the source roster's
     * address book must *be* the ledger id.
     *
     * Generated from protobuf field <code>.com.hedera.hapi.node.state.history.HistoryProof source_proof = 3;</code>
     * @return \Com\Hedera\Hapi\Node\State\History\HistoryProof|null
     */
    public function getSourceProof()
    {
        return $this->source_proof;
    }

    public function hasSourceProof()
    {
        return isset($this->source_proof);
    }

    public function clearSourceProof()
    {
        unset($this->source_proof);
    }

    /**
     **
     * If set, the proof that the address book of the source roster belongs
     * to the the ledger id's chain of trust; if not set, the source roster's
     * address book must *be* the ledger id.
     *
     * Generated from protobuf field <code>.com.hedera.hapi.node.state.history.HistoryProof source_proof = 3;</code>
     * @param \Com\Hedera\Hapi\Node\State\History\HistoryProof $var
     * @return $this
     */
    public function setSourceProof($var)
    {
        GPBUtil::checkMessage($var, \Com\Hedera\Hapi\Node\State\History\HistoryProof::class);
        $this->source_proof = $var;

        return $this;
    }

    /**
     **
     * The hash of the roster whose weights are used to assess progress
     * toward obtaining proof keys for parties that hold at least a
     * strong minority of the stake in that roster.
     *
     * Generated from protobuf field <code>bytes target_roster_hash = 4;</code>
     * @return string
     */
    public function getTargetRosterHash()
    {
        return $this->target_roster_hash;
    }

    /**
     **
     * The hash of the roster whose weights are used to assess progress
     * toward obtaining proof keys for parties that hold at least a
     * strong minority of the stake in that roster.
     *
     * Generated from protobuf field <code>bytes target_roster_hash = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setTargetRosterHash($var)
    {
        GPBUtil::checkString($var, False);
        $this->target_roster_hash = $var;

        return $this;
    }

    /**
     **
     * If the network is still gathering proof keys for this
     * construction, the next time at which nodes should stop waiting
     * for tardy proof keys and assembly the history to be proven as
     * soon as it has the associated metadata and proof keys for nodes
     * with >2/3 weight in the target roster.
     *
     * Generated from protobuf field <code>.proto.Timestamp grace_period_end_time = 5;</code>
     * @return \Proto\Timestamp|null
     */
    public function getGracePeriodEndTime()
    {
        return $this->readOneof(5);
    }

    public function hasGracePeriodEndTime()
    {
        return $this->hasOneof(5);
    }

    /**
     **
     * If the network is still gathering proof keys for this
     * construction, the next time at which nodes should stop waiting
     * for tardy proof keys and assembly the history to be proven as
     * soon as it has the associated metadata and proof keys for nodes
     * with >2/3 weight in the target roster.
     *
     * Generated from protobuf field <code>.proto.Timestamp grace_period_end_time = 5;</code>
     * @param \Proto\Timestamp $var
     * @return $this
     */
    public function setGracePeriodEndTime($var)
    {
        GPBUtil::checkMessage($var, \Proto\Timestamp::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     **
     * If the network has gathered enough proof keys to assemble the
     * history for this construction, the cutoff time at which those
     * keys must have been adopted to be included in the final history.
     *
     * Generated from protobuf field <code>.proto.Timestamp assembly_start_time = 6;</code>
     * @return \Proto\Timestamp|null
     */
    public function getAssemblyStartTime()
    {
        return $this->readOneof(6);
    }

    public function hasAssemblyStartTime()
    {
        return $this->hasOneof(6);
    }

    /**
     **
     * If the network has gathered enough proof keys to assemble the
     * history for this construction, the cutoff time at which those
     * keys must have been adopted to be included in the final history.
     *
     * Generated from protobuf field <code>.proto.Timestamp assembly_start_time = 6;</code>
     * @param \Proto\Timestamp $var
     * @return $this
     */
    public function setAssemblyStartTime($var)
    {
        GPBUtil::checkMessage($var, \Proto\Timestamp::class);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     **
     * When this construction is complete, the recursive proof that
     * the target roster's address book and associated metadata belong
     * to the ledger id's chain of trust.
     *
     * Generated from protobuf field <code>.com.hedera.hapi.node.state.history.HistoryProof target_proof = 7;</code>
     * @return \Com\Hedera\Hapi\Node\State\History\HistoryProof|null
     */
    public function getTargetProof()
    {
        return $this->readOneof(7);
    }

    public function hasTargetProof()
    {
        return $this->hasOneof(7);
    }

    /**
     **
     * When this construction is complete, the recursive proof that
     * the target roster's address book and associated metadata belong
     * to the ledger id's chain of trust.
     *
     * Generated from protobuf field <code>.com.hedera.hapi.node.state.history.HistoryProof target_proof = 7;</code>
     * @param \Com\Hedera\Hapi\Node\State\History\HistoryProof $var
     * @return $this
     */
    public function setTargetProof($var)
    {
        GPBUtil::checkMessage($var, \Com\Hedera\Hapi\Node\State\History\HistoryProof::class);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     **
     * If set, the reason the construction failed.
     *
     * Generated from protobuf field <code>string failure_reason = 8;</code>
     * @return string
     */
    public function getFailureReason()
    {
        return $this->readOneof(8);
    }

    public function hasFailureReason()
    {
        return $this->hasOneof(8);
    }

    /**
     **
     * If set, the reason the construction failed.
     *
     * Generated from protobuf field <code>string failure_reason = 8;</code>
     * @param string $var
     * @return $this
     */
    public function setFailureReason($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(8, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getProofState()
    {
        return $this->whichOneof("proof_state");
    }

}

