<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: consensus_service.proto

namespace Com\Hedera\Mirror\Api\Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 * Generated from protobuf message <code>com.hedera.mirror.api.proto.ConsensusTopicQuery</code>
 */
class ConsensusTopicQuery extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A required topic ID to retrieve messages for.
     *
     * Generated from protobuf field <code>.proto.TopicID topicID = 1;</code>
     */
    protected $topicID = null;
    /**
     **
     * Include messages which reached consensus on or after this time. Defaults to current time if
     * not set.
     *
     * Generated from protobuf field <code>.proto.Timestamp consensusStartTime = 2;</code>
     */
    protected $consensusStartTime = null;
    /**
     **
     * Include messages which reached consensus before this time. If not set it will receive
     * indefinitely.
     *
     * Generated from protobuf field <code>.proto.Timestamp consensusEndTime = 3;</code>
     */
    protected $consensusEndTime = null;
    /**
     **
     * The maximum number of messages to receive before stopping. If not set or set to zero it will
     * return messages indefinitely.
     *
     * Generated from protobuf field <code>uint64 limit = 4;</code>
     */
    protected $limit = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\TopicID $topicID
     *          *
     *           A required topic ID to retrieve messages for.
     *     @type \Proto\Timestamp $consensusStartTime
     *          *
     *           Include messages which reached consensus on or after this time. Defaults to current time if
     *           not set.
     *     @type \Proto\Timestamp $consensusEndTime
     *          *
     *           Include messages which reached consensus before this time. If not set it will receive
     *           indefinitely.
     *     @type int|string $limit
     *          *
     *           The maximum number of messages to receive before stopping. If not set or set to zero it will
     *           return messages indefinitely.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ConsensusService::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A required topic ID to retrieve messages for.
     *
     * Generated from protobuf field <code>.proto.TopicID topicID = 1;</code>
     * @return \Proto\TopicID|null
     */
    public function getTopicID()
    {
        return $this->topicID;
    }

    public function hasTopicID()
    {
        return isset($this->topicID);
    }

    public function clearTopicID()
    {
        unset($this->topicID);
    }

    /**
     **
     * A required topic ID to retrieve messages for.
     *
     * Generated from protobuf field <code>.proto.TopicID topicID = 1;</code>
     * @param \Proto\TopicID $var
     * @return $this
     */
    public function setTopicID($var)
    {
        GPBUtil::checkMessage($var, \Proto\TopicID::class);
        $this->topicID = $var;

        return $this;
    }

    /**
     **
     * Include messages which reached consensus on or after this time. Defaults to current time if
     * not set.
     *
     * Generated from protobuf field <code>.proto.Timestamp consensusStartTime = 2;</code>
     * @return \Proto\Timestamp|null
     */
    public function getConsensusStartTime()
    {
        return $this->consensusStartTime;
    }

    public function hasConsensusStartTime()
    {
        return isset($this->consensusStartTime);
    }

    public function clearConsensusStartTime()
    {
        unset($this->consensusStartTime);
    }

    /**
     **
     * Include messages which reached consensus on or after this time. Defaults to current time if
     * not set.
     *
     * Generated from protobuf field <code>.proto.Timestamp consensusStartTime = 2;</code>
     * @param \Proto\Timestamp $var
     * @return $this
     */
    public function setConsensusStartTime($var)
    {
        GPBUtil::checkMessage($var, \Proto\Timestamp::class);
        $this->consensusStartTime = $var;

        return $this;
    }

    /**
     **
     * Include messages which reached consensus before this time. If not set it will receive
     * indefinitely.
     *
     * Generated from protobuf field <code>.proto.Timestamp consensusEndTime = 3;</code>
     * @return \Proto\Timestamp|null
     */
    public function getConsensusEndTime()
    {
        return $this->consensusEndTime;
    }

    public function hasConsensusEndTime()
    {
        return isset($this->consensusEndTime);
    }

    public function clearConsensusEndTime()
    {
        unset($this->consensusEndTime);
    }

    /**
     **
     * Include messages which reached consensus before this time. If not set it will receive
     * indefinitely.
     *
     * Generated from protobuf field <code>.proto.Timestamp consensusEndTime = 3;</code>
     * @param \Proto\Timestamp $var
     * @return $this
     */
    public function setConsensusEndTime($var)
    {
        GPBUtil::checkMessage($var, \Proto\Timestamp::class);
        $this->consensusEndTime = $var;

        return $this;
    }

    /**
     **
     * The maximum number of messages to receive before stopping. If not set or set to zero it will
     * return messages indefinitely.
     *
     * Generated from protobuf field <code>uint64 limit = 4;</code>
     * @return int|string
     */
    public function getLimit()
    {
        return $this->limit;
    }

    /**
     **
     * The maximum number of messages to receive before stopping. If not set or set to zero it will
     * return messages indefinitely.
     *
     * Generated from protobuf field <code>uint64 limit = 4;</code>
     * @param int|string $var
     * @return $this
     */
    public function setLimit($var)
    {
        GPBUtil::checkUint64($var);
        $this->limit = $var;

        return $this;
    }

}

