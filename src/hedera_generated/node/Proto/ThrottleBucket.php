<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: throttle_definitions.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * A "bucket" of performance allocated across one or more throttle groups.<br/>
 * This entry combines one or more throttle groups into a single unit to
 * calculate limitations and congestion. Each "bucket" "fills" as operations
 * are completed, then "drains" over a period of time defined for each bucket.
 * This fill-and-drain characteristic enables the network to process sudden
 * bursts of heavy traffic while still observing throttle limits over longer
 * timeframes.
 * The value of `burstPeriodMs` is combined with the `milliOpsPerSec`
 * values for the individual throttle groups to determine the total
 * bucket "capacity". This combination MUST be less than the maximum
 * value of a signed long integer (`9223372036854775807`), when scaled to
 * a nanosecond measurement resolution.
 * > Note
 * >> There is some question regarding the mechanism of calculating the
 * >> combination of `burstPeriodMs` and `milliOpsPerSec`. The calculation
 * >> Is implemented in difficult-to-find code, and very likely does not
 * >> match the approach described here.
 *
 * Generated from protobuf message <code>proto.ThrottleBucket</code>
 */
class ThrottleBucket extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A name for this bucket.<br/>
     * This is used for log entries.
     * <p>
     * This value SHOULD NOT exceed 20 characters.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     */
    protected $name = '';
    /**
     **
     * A burst duration limit, in milliseconds.<br/>
     * This value determines the total "capacity" of the bucket. The rate
     * at which the bucket "drains" is set by the throttles, and this duration
     * sets how long that rate must be sustained to empty a "full" bucket.
     * That combination (calculated as the product of this value and the least
     * common multiple of the `milliOpsPerSec` values for all throttle groups)
     * determines the maximum amount of operations this bucket can "hold".
     * <p>
     * The calculated capacity of this bucket MUST NOT exceed `9,223,372,036,854`.
     *
     * Generated from protobuf field <code>uint64 burstPeriodMs = 2;</code>
     */
    protected $burstPeriodMs = 0;
    /**
     **
     * A list of throttle groups.<br/>
     * These throttle groups combined define the effective throttle
     * rate for the bucket.
     * <p>
     * This list MUST contain at least one entry.
     *
     * Generated from protobuf field <code>repeated .proto.ThrottleGroup throttleGroups = 3;</code>
     */
    private $throttleGroups;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *          *
     *           A name for this bucket.<br/>
     *           This is used for log entries.
     *           <p>
     *           This value SHOULD NOT exceed 20 characters.
     *     @type int|string $burstPeriodMs
     *          *
     *           A burst duration limit, in milliseconds.<br/>
     *           This value determines the total "capacity" of the bucket. The rate
     *           at which the bucket "drains" is set by the throttles, and this duration
     *           sets how long that rate must be sustained to empty a "full" bucket.
     *           That combination (calculated as the product of this value and the least
     *           common multiple of the `milliOpsPerSec` values for all throttle groups)
     *           determines the maximum amount of operations this bucket can "hold".
     *           <p>
     *           The calculated capacity of this bucket MUST NOT exceed `9,223,372,036,854`.
     *     @type \Proto\ThrottleGroup[] $throttleGroups
     *          *
     *           A list of throttle groups.<br/>
     *           These throttle groups combined define the effective throttle
     *           rate for the bucket.
     *           <p>
     *           This list MUST contain at least one entry.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ThrottleDefinitions::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A name for this bucket.<br/>
     * This is used for log entries.
     * <p>
     * This value SHOULD NOT exceed 20 characters.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     **
     * A name for this bucket.<br/>
     * This is used for log entries.
     * <p>
     * This value SHOULD NOT exceed 20 characters.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     **
     * A burst duration limit, in milliseconds.<br/>
     * This value determines the total "capacity" of the bucket. The rate
     * at which the bucket "drains" is set by the throttles, and this duration
     * sets how long that rate must be sustained to empty a "full" bucket.
     * That combination (calculated as the product of this value and the least
     * common multiple of the `milliOpsPerSec` values for all throttle groups)
     * determines the maximum amount of operations this bucket can "hold".
     * <p>
     * The calculated capacity of this bucket MUST NOT exceed `9,223,372,036,854`.
     *
     * Generated from protobuf field <code>uint64 burstPeriodMs = 2;</code>
     * @return int|string
     */
    public function getBurstPeriodMs()
    {
        return $this->burstPeriodMs;
    }

    /**
     **
     * A burst duration limit, in milliseconds.<br/>
     * This value determines the total "capacity" of the bucket. The rate
     * at which the bucket "drains" is set by the throttles, and this duration
     * sets how long that rate must be sustained to empty a "full" bucket.
     * That combination (calculated as the product of this value and the least
     * common multiple of the `milliOpsPerSec` values for all throttle groups)
     * determines the maximum amount of operations this bucket can "hold".
     * <p>
     * The calculated capacity of this bucket MUST NOT exceed `9,223,372,036,854`.
     *
     * Generated from protobuf field <code>uint64 burstPeriodMs = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setBurstPeriodMs($var)
    {
        GPBUtil::checkUint64($var);
        $this->burstPeriodMs = $var;

        return $this;
    }

    /**
     **
     * A list of throttle groups.<br/>
     * These throttle groups combined define the effective throttle
     * rate for the bucket.
     * <p>
     * This list MUST contain at least one entry.
     *
     * Generated from protobuf field <code>repeated .proto.ThrottleGroup throttleGroups = 3;</code>
     * @return RepeatedField<\Proto\ThrottleGroup>
     */
    public function getThrottleGroups()
    {
        return $this->throttleGroups;
    }

    /**
     **
     * A list of throttle groups.<br/>
     * These throttle groups combined define the effective throttle
     * rate for the bucket.
     * <p>
     * This list MUST contain at least one entry.
     *
     * Generated from protobuf field <code>repeated .proto.ThrottleGroup throttleGroups = 3;</code>
     * @param \Proto\ThrottleGroup[] $var
     * @return $this
     */
    public function setThrottleGroups($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Proto\ThrottleGroup::class);
        $this->throttleGroups = $arr;

        return $this;
    }

}

