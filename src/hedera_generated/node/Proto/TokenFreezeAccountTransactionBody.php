<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: token_freeze_account.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Block transfers of a token type for an account.<br/>
 * This, effectively, freezes assets of one account with respect to
 * one token type. While frozen, that account cannot send or receive tokens
 * of the identified type.
 * The token MUST have a `freeze_key` set and that key MUST NOT
 * be an empty `KeyList`.<br/>
 * The token `freeze_key` MUST sign this transaction.<br/>
 * The identified token MUST exist, MUST NOT be deleted, MUST NOT be paused,
 * and MUST NOT be expired.<br/>
 * The identified account MUST exist, MUST NOT be deleted, and
 * MUST NOT be expired.<br/>
 * If the identified account is already frozen with respect to the identified
 * token, the transaction SHALL succeed, but no change SHALL be made.<br/>
 * An association between the identified account and the identified
 * token MUST exist.
 * ### Block Stream Effects
 * None
 *
 * Generated from protobuf message <code>proto.TokenFreezeAccountTransactionBody</code>
 */
class TokenFreezeAccountTransactionBody extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A token identifier.
     * <p>
     * This SHALL identify the token type to "freeze".<br/>
     * The identified token MUST exist, MUST NOT be deleted, and MUST be
     * associated to the identified account.
     *
     * Generated from protobuf field <code>.proto.TokenID token = 1;</code>
     */
    protected $token = null;
    /**
     **
     * An account identifier.
     * <p>
     * This shall identify the account to "freeze".<br/>
     * The identified account MUST exist, MUST NOT be deleted, MUST NOT be
     * expired, and MUST be associated to the identified token.<br/>
     * The identified account SHOULD NOT be "frozen" with respect to the
     * identified token.
     *
     * Generated from protobuf field <code>.proto.AccountID account = 2;</code>
     */
    protected $account = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\TokenID $token
     *          *
     *           A token identifier.
     *           <p>
     *           This SHALL identify the token type to "freeze".<br/>
     *           The identified token MUST exist, MUST NOT be deleted, and MUST be
     *           associated to the identified account.
     *     @type \Proto\AccountID $account
     *          *
     *           An account identifier.
     *           <p>
     *           This shall identify the account to "freeze".<br/>
     *           The identified account MUST exist, MUST NOT be deleted, MUST NOT be
     *           expired, and MUST be associated to the identified token.<br/>
     *           The identified account SHOULD NOT be "frozen" with respect to the
     *           identified token.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\TokenFreezeAccount::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A token identifier.
     * <p>
     * This SHALL identify the token type to "freeze".<br/>
     * The identified token MUST exist, MUST NOT be deleted, and MUST be
     * associated to the identified account.
     *
     * Generated from protobuf field <code>.proto.TokenID token = 1;</code>
     * @return \Proto\TokenID|null
     */
    public function getToken()
    {
        return $this->token;
    }

    public function hasToken()
    {
        return isset($this->token);
    }

    public function clearToken()
    {
        unset($this->token);
    }

    /**
     **
     * A token identifier.
     * <p>
     * This SHALL identify the token type to "freeze".<br/>
     * The identified token MUST exist, MUST NOT be deleted, and MUST be
     * associated to the identified account.
     *
     * Generated from protobuf field <code>.proto.TokenID token = 1;</code>
     * @param \Proto\TokenID $var
     * @return $this
     */
    public function setToken($var)
    {
        GPBUtil::checkMessage($var, \Proto\TokenID::class);
        $this->token = $var;

        return $this;
    }

    /**
     **
     * An account identifier.
     * <p>
     * This shall identify the account to "freeze".<br/>
     * The identified account MUST exist, MUST NOT be deleted, MUST NOT be
     * expired, and MUST be associated to the identified token.<br/>
     * The identified account SHOULD NOT be "frozen" with respect to the
     * identified token.
     *
     * Generated from protobuf field <code>.proto.AccountID account = 2;</code>
     * @return \Proto\AccountID|null
     */
    public function getAccount()
    {
        return $this->account;
    }

    public function hasAccount()
    {
        return isset($this->account);
    }

    public function clearAccount()
    {
        unset($this->account);
    }

    /**
     **
     * An account identifier.
     * <p>
     * This shall identify the account to "freeze".<br/>
     * The identified account MUST exist, MUST NOT be deleted, MUST NOT be
     * expired, and MUST be associated to the identified token.<br/>
     * The identified account SHOULD NOT be "frozen" with respect to the
     * identified token.
     *
     * Generated from protobuf field <code>.proto.AccountID account = 2;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setAccount($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->account = $var;

        return $this;
    }

}

