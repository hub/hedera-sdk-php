<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: query_header.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * A standard query header.<br/>
 * Each query from the client to the node must contain a QueryHeader, which
 * specifies the desired response type, and includes a payment transaction
 * that will compensate the network for responding to the query.
 * The payment may be blank if the query is free.
 * The payment transaction MUST be a `cryptoTransfer` from the payer account
 * to the account of the node where the query is submitted.<br/>
 * If the payment is sufficient, the network SHALL respond with the response
 * type requested.<br/>
 * If the response type is `COST_ANSWER` the payment MUST be unset.
 * A state proof SHALL be available for some types of information.<br/>
 * A state proof SHALL be available for a Record, but not a receipt, and the
 * response entry for each supported "get info" query.
 *
 * Generated from protobuf message <code>proto.QueryHeader</code>
 */
class QueryHeader extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A signed `CryptoTransferTransaction` to pay query fees.
     * <p>
     * This MUST transfer HBAR from the "payer" to the responding node account
     * sufficient to pay the query fees.
     *
     * Generated from protobuf field <code>.proto.Transaction payment = 1;</code>
     */
    protected $payment = null;
    /**
     **
     * A type of query response requested.
     *
     * Generated from protobuf field <code>.proto.ResponseType responseType = 2;</code>
     */
    protected $responseType = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\Transaction $payment
     *          *
     *           A signed `CryptoTransferTransaction` to pay query fees.
     *           <p>
     *           This MUST transfer HBAR from the "payer" to the responding node account
     *           sufficient to pay the query fees.
     *     @type int $responseType
     *          *
     *           A type of query response requested.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\QueryHeader::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A signed `CryptoTransferTransaction` to pay query fees.
     * <p>
     * This MUST transfer HBAR from the "payer" to the responding node account
     * sufficient to pay the query fees.
     *
     * Generated from protobuf field <code>.proto.Transaction payment = 1;</code>
     * @return \Proto\Transaction|null
     */
    public function getPayment()
    {
        return $this->payment;
    }

    public function hasPayment()
    {
        return isset($this->payment);
    }

    public function clearPayment()
    {
        unset($this->payment);
    }

    /**
     **
     * A signed `CryptoTransferTransaction` to pay query fees.
     * <p>
     * This MUST transfer HBAR from the "payer" to the responding node account
     * sufficient to pay the query fees.
     *
     * Generated from protobuf field <code>.proto.Transaction payment = 1;</code>
     * @param \Proto\Transaction $var
     * @return $this
     */
    public function setPayment($var)
    {
        GPBUtil::checkMessage($var, \Proto\Transaction::class);
        $this->payment = $var;

        return $this;
    }

    /**
     **
     * A type of query response requested.
     *
     * Generated from protobuf field <code>.proto.ResponseType responseType = 2;</code>
     * @return int
     */
    public function getResponseType()
    {
        return $this->responseType;
    }

    /**
     **
     * A type of query response requested.
     *
     * Generated from protobuf field <code>.proto.ResponseType responseType = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setResponseType($var)
    {
        GPBUtil::checkEnum($var, \Proto\ResponseType::class);
        $this->responseType = $var;

        return $this;
    }

}

