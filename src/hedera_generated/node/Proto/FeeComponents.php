<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: basic_types.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * A set of values the nodes use in determining transaction and query fees, and
 * constants involved in fee calculations.
 * Nodes SHALL multiply the amount of "resources" allocated to a transaction or
 * query by the corresponding price to calculate the appropriate fee. Units are
 * one-thousandth of a `tinyCent`. The "resource" allocations SHALL be estimated
 * based on transaction characteristics and current network state, and MAY be
 * further adjusted based on network load and congestion.
 * This SHALL be used, in different contexts, for the cost _factors_ used to
 * calculate charged amounts, for the resource accumulation, and for actual
 * amounts to be charged.<br/>
 * Amounts recorded here MUST be converted to tinybar according to the
 * current active `ExchangeRate` for the network.
 *
 * Generated from protobuf message <code>proto.FeeComponents</code>
 */
class FeeComponents extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * Base: "minimum total fee".
     * <p>
     * The calculated fee MUST be greater than this value.
     *
     * Generated from protobuf field <code>int64 min = 1;</code>
     */
    protected $min = 0;
    /**
     **
     * Base: "maximum total fee".
     * <p>
     * The calculated fee MUST be less than this value.
     *
     * Generated from protobuf field <code>int64 max = 2;</code>
     */
    protected $max = 0;
    /**
     **
     * Base: "constant fee".<br/>
     * A baseline constant contribution to total fee.
     *
     * Generated from protobuf field <code>int64 constant = 3;</code>
     */
    protected $constant = 0;
    /**
     **
     * Bandwidth: "bytes per transaction".<br/>
     * The fee for bandwidth consumed by a transaction, measured in bytes
     *
     * Generated from protobuf field <code>int64 bpt = 4;</code>
     */
    protected $bpt = 0;
    /**
     **
     * Signatures: "validations per transaction".<br/>
     * The fee for signature verifications required by a transaction
     *
     * Generated from protobuf field <code>int64 vpt = 5;</code>
     */
    protected $vpt = 0;
    /**
     **
     * Memory: "RAM byte-hours".<br/>
     * The fee for RAM required to process a transaction,
     * measured in byte-hours
     *
     * Generated from protobuf field <code>int64 rbh = 6;</code>
     */
    protected $rbh = 0;
    /**
     **
     * Disk: "storage byte-hours".<br/>
     * The fee for storage required by a transaction, measured in byte-hours
     *
     * Generated from protobuf field <code>int64 sbh = 7;</code>
     */
    protected $sbh = 0;
    /**
     **
     * Compute: Ethereum term for a derivative EVM compute resource.<br/>
     * The fee of computation for a smart contract transaction. The value of
     * gas is set by a conversion rate, and is regularly updated to reflect
     * reasonable and customary costs.
     *
     * Generated from protobuf field <code>int64 gas = 8;</code>
     */
    protected $gas = 0;
    /**
     **
     * Ad valorem: "transferred value".<br/>
     * The fee for HBAR transferred by a transaction.
     *
     * Generated from protobuf field <code>int64 tv = 9;</code>
     */
    protected $tv = 0;
    /**
     **
     * Response memory: "bytes per response".<br/>
     * The fee for data retrieved from memory to deliver a response,
     * measured in bytes
     *
     * Generated from protobuf field <code>int64 bpr = 10;</code>
     */
    protected $bpr = 0;
    /**
     **
     * Response disk: "storage bytes per response".<br/>
     * The fee for data retrieved from disk to deliver a response,
     * measured in bytes
     *
     * Generated from protobuf field <code>int64 sbpr = 11;</code>
     */
    protected $sbpr = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $min
     *          *
     *           Base: "minimum total fee".
     *           <p>
     *           The calculated fee MUST be greater than this value.
     *     @type int|string $max
     *          *
     *           Base: "maximum total fee".
     *           <p>
     *           The calculated fee MUST be less than this value.
     *     @type int|string $constant
     *          *
     *           Base: "constant fee".<br/>
     *           A baseline constant contribution to total fee.
     *     @type int|string $bpt
     *          *
     *           Bandwidth: "bytes per transaction".<br/>
     *           The fee for bandwidth consumed by a transaction, measured in bytes
     *     @type int|string $vpt
     *          *
     *           Signatures: "validations per transaction".<br/>
     *           The fee for signature verifications required by a transaction
     *     @type int|string $rbh
     *          *
     *           Memory: "RAM byte-hours".<br/>
     *           The fee for RAM required to process a transaction,
     *           measured in byte-hours
     *     @type int|string $sbh
     *          *
     *           Disk: "storage byte-hours".<br/>
     *           The fee for storage required by a transaction, measured in byte-hours
     *     @type int|string $gas
     *          *
     *           Compute: Ethereum term for a derivative EVM compute resource.<br/>
     *           The fee of computation for a smart contract transaction. The value of
     *           gas is set by a conversion rate, and is regularly updated to reflect
     *           reasonable and customary costs.
     *     @type int|string $tv
     *          *
     *           Ad valorem: "transferred value".<br/>
     *           The fee for HBAR transferred by a transaction.
     *     @type int|string $bpr
     *          *
     *           Response memory: "bytes per response".<br/>
     *           The fee for data retrieved from memory to deliver a response,
     *           measured in bytes
     *     @type int|string $sbpr
     *          *
     *           Response disk: "storage bytes per response".<br/>
     *           The fee for data retrieved from disk to deliver a response,
     *           measured in bytes
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\BasicTypes::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * Base: "minimum total fee".
     * <p>
     * The calculated fee MUST be greater than this value.
     *
     * Generated from protobuf field <code>int64 min = 1;</code>
     * @return int|string
     */
    public function getMin()
    {
        return $this->min;
    }

    /**
     **
     * Base: "minimum total fee".
     * <p>
     * The calculated fee MUST be greater than this value.
     *
     * Generated from protobuf field <code>int64 min = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMin($var)
    {
        GPBUtil::checkInt64($var);
        $this->min = $var;

        return $this;
    }

    /**
     **
     * Base: "maximum total fee".
     * <p>
     * The calculated fee MUST be less than this value.
     *
     * Generated from protobuf field <code>int64 max = 2;</code>
     * @return int|string
     */
    public function getMax()
    {
        return $this->max;
    }

    /**
     **
     * Base: "maximum total fee".
     * <p>
     * The calculated fee MUST be less than this value.
     *
     * Generated from protobuf field <code>int64 max = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMax($var)
    {
        GPBUtil::checkInt64($var);
        $this->max = $var;

        return $this;
    }

    /**
     **
     * Base: "constant fee".<br/>
     * A baseline constant contribution to total fee.
     *
     * Generated from protobuf field <code>int64 constant = 3;</code>
     * @return int|string
     */
    public function getConstant()
    {
        return $this->constant;
    }

    /**
     **
     * Base: "constant fee".<br/>
     * A baseline constant contribution to total fee.
     *
     * Generated from protobuf field <code>int64 constant = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setConstant($var)
    {
        GPBUtil::checkInt64($var);
        $this->constant = $var;

        return $this;
    }

    /**
     **
     * Bandwidth: "bytes per transaction".<br/>
     * The fee for bandwidth consumed by a transaction, measured in bytes
     *
     * Generated from protobuf field <code>int64 bpt = 4;</code>
     * @return int|string
     */
    public function getBpt()
    {
        return $this->bpt;
    }

    /**
     **
     * Bandwidth: "bytes per transaction".<br/>
     * The fee for bandwidth consumed by a transaction, measured in bytes
     *
     * Generated from protobuf field <code>int64 bpt = 4;</code>
     * @param int|string $var
     * @return $this
     */
    public function setBpt($var)
    {
        GPBUtil::checkInt64($var);
        $this->bpt = $var;

        return $this;
    }

    /**
     **
     * Signatures: "validations per transaction".<br/>
     * The fee for signature verifications required by a transaction
     *
     * Generated from protobuf field <code>int64 vpt = 5;</code>
     * @return int|string
     */
    public function getVpt()
    {
        return $this->vpt;
    }

    /**
     **
     * Signatures: "validations per transaction".<br/>
     * The fee for signature verifications required by a transaction
     *
     * Generated from protobuf field <code>int64 vpt = 5;</code>
     * @param int|string $var
     * @return $this
     */
    public function setVpt($var)
    {
        GPBUtil::checkInt64($var);
        $this->vpt = $var;

        return $this;
    }

    /**
     **
     * Memory: "RAM byte-hours".<br/>
     * The fee for RAM required to process a transaction,
     * measured in byte-hours
     *
     * Generated from protobuf field <code>int64 rbh = 6;</code>
     * @return int|string
     */
    public function getRbh()
    {
        return $this->rbh;
    }

    /**
     **
     * Memory: "RAM byte-hours".<br/>
     * The fee for RAM required to process a transaction,
     * measured in byte-hours
     *
     * Generated from protobuf field <code>int64 rbh = 6;</code>
     * @param int|string $var
     * @return $this
     */
    public function setRbh($var)
    {
        GPBUtil::checkInt64($var);
        $this->rbh = $var;

        return $this;
    }

    /**
     **
     * Disk: "storage byte-hours".<br/>
     * The fee for storage required by a transaction, measured in byte-hours
     *
     * Generated from protobuf field <code>int64 sbh = 7;</code>
     * @return int|string
     */
    public function getSbh()
    {
        return $this->sbh;
    }

    /**
     **
     * Disk: "storage byte-hours".<br/>
     * The fee for storage required by a transaction, measured in byte-hours
     *
     * Generated from protobuf field <code>int64 sbh = 7;</code>
     * @param int|string $var
     * @return $this
     */
    public function setSbh($var)
    {
        GPBUtil::checkInt64($var);
        $this->sbh = $var;

        return $this;
    }

    /**
     **
     * Compute: Ethereum term for a derivative EVM compute resource.<br/>
     * The fee of computation for a smart contract transaction. The value of
     * gas is set by a conversion rate, and is regularly updated to reflect
     * reasonable and customary costs.
     *
     * Generated from protobuf field <code>int64 gas = 8;</code>
     * @return int|string
     */
    public function getGas()
    {
        return $this->gas;
    }

    /**
     **
     * Compute: Ethereum term for a derivative EVM compute resource.<br/>
     * The fee of computation for a smart contract transaction. The value of
     * gas is set by a conversion rate, and is regularly updated to reflect
     * reasonable and customary costs.
     *
     * Generated from protobuf field <code>int64 gas = 8;</code>
     * @param int|string $var
     * @return $this
     */
    public function setGas($var)
    {
        GPBUtil::checkInt64($var);
        $this->gas = $var;

        return $this;
    }

    /**
     **
     * Ad valorem: "transferred value".<br/>
     * The fee for HBAR transferred by a transaction.
     *
     * Generated from protobuf field <code>int64 tv = 9;</code>
     * @return int|string
     */
    public function getTv()
    {
        return $this->tv;
    }

    /**
     **
     * Ad valorem: "transferred value".<br/>
     * The fee for HBAR transferred by a transaction.
     *
     * Generated from protobuf field <code>int64 tv = 9;</code>
     * @param int|string $var
     * @return $this
     */
    public function setTv($var)
    {
        GPBUtil::checkInt64($var);
        $this->tv = $var;

        return $this;
    }

    /**
     **
     * Response memory: "bytes per response".<br/>
     * The fee for data retrieved from memory to deliver a response,
     * measured in bytes
     *
     * Generated from protobuf field <code>int64 bpr = 10;</code>
     * @return int|string
     */
    public function getBpr()
    {
        return $this->bpr;
    }

    /**
     **
     * Response memory: "bytes per response".<br/>
     * The fee for data retrieved from memory to deliver a response,
     * measured in bytes
     *
     * Generated from protobuf field <code>int64 bpr = 10;</code>
     * @param int|string $var
     * @return $this
     */
    public function setBpr($var)
    {
        GPBUtil::checkInt64($var);
        $this->bpr = $var;

        return $this;
    }

    /**
     **
     * Response disk: "storage bytes per response".<br/>
     * The fee for data retrieved from disk to deliver a response,
     * measured in bytes
     *
     * Generated from protobuf field <code>int64 sbpr = 11;</code>
     * @return int|string
     */
    public function getSbpr()
    {
        return $this->sbpr;
    }

    /**
     **
     * Response disk: "storage bytes per response".<br/>
     * The fee for data retrieved from disk to deliver a response,
     * measured in bytes
     *
     * Generated from protobuf field <code>int64 sbpr = 11;</code>
     * @param int|string $var
     * @return $this
     */
    public function setSbpr($var)
    {
        GPBUtil::checkInt64($var);
        $this->sbpr = $var;

        return $this;
    }

}

