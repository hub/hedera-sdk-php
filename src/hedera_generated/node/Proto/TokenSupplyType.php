<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: basic_types.proto

namespace Proto;

use UnexpectedValueException;

/**
 **
 * Possible Token Supply Types (IWA Compatibility).
 * This `enum` indicates the limit of tokens that can exist during the
 * lifetime of a token definition. The "infinite" supply is only theoretically
 * infinite, as it is still limited to the magnitude of a 64-bit signed
 * integer. A "finite" supply is further limited to a value specified when
 * the token is created (or updated, if not immutable).
 *
 * Protobuf type <code>proto.TokenSupplyType</code>
 */
class TokenSupplyType
{
    /**
     **
     * An unlimited supply.<br/>
     * This indicates that tokens of this type have an upper bound of
     * Long.MAX_VALUE.<br/>
     * The supply is accounted in the smallest units of the token
     * (i.e. 10<sup>-`decimals`</sup> whole tokens)
     *
     * Generated from protobuf enum <code>INFINITE = 0;</code>
     */
    const INFINITE = 0;
    /**
     **
     * A limited supply.<br/>
     * This indicates that tokens of this type have an upper bound of
     * `maxSupply`.<br/>
     * The maximum supply SHALL be provided on token creation, but MAY be
     * changed thereafter if the token has an `admin_key` set.
     *
     * Generated from protobuf enum <code>FINITE = 1;</code>
     */
    const FINITE = 1;

    private static $valueToName = [
        self::INFINITE => 'INFINITE',
        self::FINITE => 'FINITE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

