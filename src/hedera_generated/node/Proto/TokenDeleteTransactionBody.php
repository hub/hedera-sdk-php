<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: token_delete.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Mark a token as deleted.<br/>
 * A deleted token remains present in the network state, but is no longer
 * active, cannot be held in a balance, and all operations on that token
 * fail. A deleted token is removed from network state when it expires.
 * #### Operations on a deleted token
 * All operations on a deleted token SHALL fail with a
 * status code `TOKEN_WAS_DELETED`.<br/>
 * Any attempt to transfer a deleted token between accounts SHALL fail with
 * a status code `TOKEN_WAS_DELETED`.
 * > QUESTIONS
 * >> What happens to existing balances/NFTs?
 * >> Are these removed; are they stuck on the accounts?
 * >
 * >> If balances/NFTs remain, can a `tokenReject` remove them?
 * #### Requirements
 * The `admin_key` for the token MUST be set, and MUST
 * sign this transaction.<br/>
 * If the `admin_key` for the token is not set, this transaction SHALL
 * fail with a status code `TOKEN_IS_IMMUTABlE`.
 * ### Block Stream Effects
 * None
 *
 * Generated from protobuf message <code>proto.TokenDeleteTransactionBody</code>
 */
class TokenDeleteTransactionBody extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A token identifier.
     * <p>
     * This SHALL identify the token type to delete.<br/>
     * The identified token MUST exist, and MUST NOT be deleted.
     *
     * Generated from protobuf field <code>.proto.TokenID token = 1;</code>
     */
    protected $token = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\TokenID $token
     *          *
     *           A token identifier.
     *           <p>
     *           This SHALL identify the token type to delete.<br/>
     *           The identified token MUST exist, and MUST NOT be deleted.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\TokenDelete::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A token identifier.
     * <p>
     * This SHALL identify the token type to delete.<br/>
     * The identified token MUST exist, and MUST NOT be deleted.
     *
     * Generated from protobuf field <code>.proto.TokenID token = 1;</code>
     * @return \Proto\TokenID|null
     */
    public function getToken()
    {
        return $this->token;
    }

    public function hasToken()
    {
        return isset($this->token);
    }

    public function clearToken()
    {
        unset($this->token);
    }

    /**
     **
     * A token identifier.
     * <p>
     * This SHALL identify the token type to delete.<br/>
     * The identified token MUST exist, and MUST NOT be deleted.
     *
     * Generated from protobuf field <code>.proto.TokenID token = 1;</code>
     * @param \Proto\TokenID $var
     * @return $this
     */
    public function setToken($var)
    {
        GPBUtil::checkMessage($var, \Proto\TokenID::class);
        $this->token = $var;

        return $this;
    }

}

