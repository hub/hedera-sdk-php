<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: query_header.proto

namespace Proto;

use UnexpectedValueException;

/**
 **
 * The type of query response.<br/>
 * This SHALL be answer-only as a default.<br/>
 * This value SHALL support an "estimated cost" type.<br/>
 * This value SHOULD support a "state proof" type, when available.
 *
 * Protobuf type <code>proto.ResponseType</code>
 */
class ResponseType
{
    /**
     **
     * A response with the query answer.
     *
     * Generated from protobuf enum <code>ANSWER_ONLY = 0;</code>
     */
    const ANSWER_ONLY = 0;
    /**
     **
     * A response with both the query answer and a state proof.
     *
     * Generated from protobuf enum <code>ANSWER_STATE_PROOF = 1;</code>
     */
    const ANSWER_STATE_PROOF = 1;
    /**
     **
     * A response with the estimated cost to answer the query.
     *
     * Generated from protobuf enum <code>COST_ANSWER = 2;</code>
     */
    const COST_ANSWER = 2;
    /**
     **
     * A response with the estimated cost to answer and a state proof.
     *
     * Generated from protobuf enum <code>COST_ANSWER_STATE_PROOF = 3;</code>
     */
    const COST_ANSWER_STATE_PROOF = 3;

    private static $valueToName = [
        self::ANSWER_ONLY => 'ANSWER_ONLY',
        self::ANSWER_STATE_PROOF => 'ANSWER_STATE_PROOF',
        self::COST_ANSWER => 'COST_ANSWER',
        self::COST_ANSWER_STATE_PROOF => 'COST_ANSWER_STATE_PROOF',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

