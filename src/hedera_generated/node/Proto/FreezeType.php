<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: freeze_type.proto

namespace Proto;

use UnexpectedValueException;

/**
 **
 * An enumeration of possible network freeze types.
 * Each enumerated value SHALL be associated to a single network freeze
 * scenario. Each freeze scenario defines the specific parameters
 * REQUIRED for that freeze.
 *
 * Protobuf type <code>proto.FreezeType</code>
 */
class FreezeType
{
    /**
     **
     * An invalid freeze type.
     * <p>
     * The first value in a protobuf enum is a default value. This default
     * is RECOMMENDED to be an invalid value to aid in detecting unset fields.
     *
     * Generated from protobuf enum <code>UNKNOWN_FREEZE_TYPE = 0;</code>
     */
    const UNKNOWN_FREEZE_TYPE = 0;
    /**
     **
     * Freeze the network, and take no further action.
     * <p>
     * The `start_time` field is REQUIRED, MUST be strictly later than the
     * consensus time when this transaction is handled, and SHOULD be between
     * `300` and `3600` seconds after the transaction identifier
     * `transactionValidStart` field.<br/>
     * The fields `update_file` and `file_hash` SHALL be ignored.<br/>
     * A `FREEZE_ONLY` transaction SHALL NOT perform any network
     * changes or upgrades.<br/>
     * After this freeze is processed manual intervention is REQUIRED
     * to restart the network.
     *
     * Generated from protobuf enum <code>FREEZE_ONLY = 1;</code>
     */
    const FREEZE_ONLY = 1;
    /**
     **
     * This freeze type does not freeze the network, but begins
     * "preparation" to upgrade the network.
     * <p>
     * The fields `update_file` and `file_hash` are REQUIRED
     * and MUST be valid.<br/>
     * The `start_time` field SHALL be ignored.<br/>
     * A `PREPARE_UPGRADE` transaction SHALL NOT freeze the network or
     * interfere with general transaction processing.<br/>
     * If this freeze type is initiated after a `TELEMETRY_UPGRADE`, the
     * prepared telemetry upgrade SHALL be reset and all telemetry upgrade
     * artifacts in the filesystem SHALL be deleted.<br/>
     * At some point after this freeze type completes (dependent on the size
     * of the upgrade file), the network SHALL be prepared to complete
     * a software upgrade of all nodes.
     *
     * Generated from protobuf enum <code>PREPARE_UPGRADE = 2;</code>
     */
    const PREPARE_UPGRADE = 2;
    /**
     **
     * Freeze the network to perform a software upgrade.
     * <p>
     * The `start_time` field is REQUIRED, MUST be strictly later than the
     * consensus time when this transaction is handled, and SHOULD be between
     * `300` and `3600` seconds after the transaction identifier
     * `transactionValidStart` field.<br/>
     * A software upgrade file MUST be prepared prior to this transaction.<br/>
     * After this transaction completes, the network SHALL initiate an
     * upgrade and restart of all nodes at the start time specified.
     *
     * Generated from protobuf enum <code>FREEZE_UPGRADE = 3;</code>
     */
    const FREEZE_UPGRADE = 3;
    /**
     **
     * Abort a pending network freeze operation.
     * <p>
     * All fields SHALL be ignored for this freeze type.<br/>
     * This freeze type MAY be submitted after a `FREEZE_ONLY`,
     * `FREEZE_UPGRADE`, or `TELEMETRY_UPGRADE` is initiated.<br/>
     * This freeze type MUST be submitted and reach consensus
     * before the `start_time` designated for the current pending
     * freeze to be effective.<br/>
     * After this freeze type is processed, the upgrade file hash
     * and pending freeze start time stored in the network SHALL
     * be reset to default (empty) values.
     *
     * Generated from protobuf enum <code>FREEZE_ABORT = 4;</code>
     */
    const FREEZE_ABORT = 4;
    /**
     **
     * Prepare an upgrade of auxiliary services and containers
     * providing telemetry/metrics.
     * <p>
     * The `start_time` field is REQUIRED, MUST be strictly later than the
     * consensus time when this transaction is handled, and SHOULD be between
     * `300` and `3600` seconds after the transaction identifier
     * `transactionValidStart` field.<br/>
     * The `update_file` field is REQUIRED and MUST be valid.<br/>
     * A `TELEMETRY_UPGRADE` transaction SHALL NOT freeze the network or
     * interfere with general transaction processing.<br/>
     * This freeze type MUST NOT be initiated between a `PREPARE_UPGRADE`
     * and `FREEZE_UPGRADE`. If this freeze type is initiated after a
     * `PREPARE_UPGRADE`, the prepared upgrade SHALL be reset and all software
     * upgrade artifacts in the filesystem SHALL be deleted.<br/>
     * At some point after this freeze type completes (dependent on the
     * size of the upgrade file), the network SHALL automatically upgrade
     * the telemetry/metrics services and containers as directed in
     * the specified telemetry upgrade file.
     * <blockquote> The condition that `start_time` is REQUIRED is an
     * historical anomaly and SHOULD change in a future release.</blockquote>
     *
     * Generated from protobuf enum <code>TELEMETRY_UPGRADE = 5;</code>
     */
    const TELEMETRY_UPGRADE = 5;

    private static $valueToName = [
        self::UNKNOWN_FREEZE_TYPE => 'UNKNOWN_FREEZE_TYPE',
        self::FREEZE_ONLY => 'FREEZE_ONLY',
        self::PREPARE_UPGRADE => 'PREPARE_UPGRADE',
        self::FREEZE_UPGRADE => 'FREEZE_UPGRADE',
        self::FREEZE_ABORT => 'FREEZE_ABORT',
        self::TELEMETRY_UPGRADE => 'TELEMETRY_UPGRADE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

