<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: exchange_rate.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * A set of two exchange rates.<br/>
 * The exchange rate for the network is stored and reported as a set of
 * two rates; current and next. This structure supports the network cleanly
 * switching between exchange rates when necessary. This also provides clear
 * notice to clients when the exchange rate will change and the exchange
 * rate that will be applied for the next time period.
 * The difference in rate between `currentRate` and `nextRate` MUST NOT exceed
 * the configured maximum percentage change. This limit SHALL be a
 * network configuration value.
 *
 * Generated from protobuf message <code>proto.ExchangeRateSet</code>
 */
class ExchangeRateSet extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A current exchange rate.
     * <p>
     * When present in a receipt, this SHALL be the exchange rate used to
     * compute the fees for that transaction.
     *
     * Generated from protobuf field <code>.proto.ExchangeRate currentRate = 1;</code>
     */
    protected $currentRate = null;
    /**
     **
     * A future exchange rate.
     * <p>
     * This exchange rate SHALL be applied after the current exchange
     * rate expires.
     *
     * Generated from protobuf field <code>.proto.ExchangeRate nextRate = 2;</code>
     */
    protected $nextRate = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\ExchangeRate $currentRate
     *          *
     *           A current exchange rate.
     *           <p>
     *           When present in a receipt, this SHALL be the exchange rate used to
     *           compute the fees for that transaction.
     *     @type \Proto\ExchangeRate $nextRate
     *          *
     *           A future exchange rate.
     *           <p>
     *           This exchange rate SHALL be applied after the current exchange
     *           rate expires.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ExchangeRate::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A current exchange rate.
     * <p>
     * When present in a receipt, this SHALL be the exchange rate used to
     * compute the fees for that transaction.
     *
     * Generated from protobuf field <code>.proto.ExchangeRate currentRate = 1;</code>
     * @return \Proto\ExchangeRate|null
     */
    public function getCurrentRate()
    {
        return $this->currentRate;
    }

    public function hasCurrentRate()
    {
        return isset($this->currentRate);
    }

    public function clearCurrentRate()
    {
        unset($this->currentRate);
    }

    /**
     **
     * A current exchange rate.
     * <p>
     * When present in a receipt, this SHALL be the exchange rate used to
     * compute the fees for that transaction.
     *
     * Generated from protobuf field <code>.proto.ExchangeRate currentRate = 1;</code>
     * @param \Proto\ExchangeRate $var
     * @return $this
     */
    public function setCurrentRate($var)
    {
        GPBUtil::checkMessage($var, \Proto\ExchangeRate::class);
        $this->currentRate = $var;

        return $this;
    }

    /**
     **
     * A future exchange rate.
     * <p>
     * This exchange rate SHALL be applied after the current exchange
     * rate expires.
     *
     * Generated from protobuf field <code>.proto.ExchangeRate nextRate = 2;</code>
     * @return \Proto\ExchangeRate|null
     */
    public function getNextRate()
    {
        return $this->nextRate;
    }

    public function hasNextRate()
    {
        return isset($this->nextRate);
    }

    public function clearNextRate()
    {
        unset($this->nextRate);
    }

    /**
     **
     * A future exchange rate.
     * <p>
     * This exchange rate SHALL be applied after the current exchange
     * rate expires.
     *
     * Generated from protobuf field <code>.proto.ExchangeRate nextRate = 2;</code>
     * @param \Proto\ExchangeRate $var
     * @return $this
     */
    public function setNextRate($var)
    {
        GPBUtil::checkMessage($var, \Proto\ExchangeRate::class);
        $this->nextRate = $var;

        return $this;
    }

}

