<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: basic_types.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * A rational number.<br/>
 * A common use is to set the amount of a value transfer to collect as a
 * custom fee.
 * It is RECOMMENDED that both numerator and denominator be no larger than
 * necessary to express the required fraction. A very large numerator, in
 * particular, may not be reliable.
 * Both fields are REQUIRED and SHOULD be positive integers.
 *
 * Generated from protobuf message <code>proto.Fraction</code>
 */
class Fraction extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A fractional number's numerator.
     *
     * Generated from protobuf field <code>int64 numerator = 1;</code>
     */
    protected $numerator = 0;
    /**
     **
     * A fractional number's denominator.
     * <p>
     * A zero value SHALL fail with response code `FRACTION_DIVIDES_BY_ZERO`.
     *
     * Generated from protobuf field <code>int64 denominator = 2;</code>
     */
    protected $denominator = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $numerator
     *          *
     *           A fractional number's numerator.
     *     @type int|string $denominator
     *          *
     *           A fractional number's denominator.
     *           <p>
     *           A zero value SHALL fail with response code `FRACTION_DIVIDES_BY_ZERO`.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\BasicTypes::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A fractional number's numerator.
     *
     * Generated from protobuf field <code>int64 numerator = 1;</code>
     * @return int|string
     */
    public function getNumerator()
    {
        return $this->numerator;
    }

    /**
     **
     * A fractional number's numerator.
     *
     * Generated from protobuf field <code>int64 numerator = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setNumerator($var)
    {
        GPBUtil::checkInt64($var);
        $this->numerator = $var;

        return $this;
    }

    /**
     **
     * A fractional number's denominator.
     * <p>
     * A zero value SHALL fail with response code `FRACTION_DIVIDES_BY_ZERO`.
     *
     * Generated from protobuf field <code>int64 denominator = 2;</code>
     * @return int|string
     */
    public function getDenominator()
    {
        return $this->denominator;
    }

    /**
     **
     * A fractional number's denominator.
     * <p>
     * A zero value SHALL fail with response code `FRACTION_DIVIDES_BY_ZERO`.
     *
     * Generated from protobuf field <code>int64 denominator = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setDenominator($var)
    {
        GPBUtil::checkInt64($var);
        $this->denominator = $var;

        return $this;
    }

}

