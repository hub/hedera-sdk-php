<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: response_code.proto

namespace Proto;

use UnexpectedValueException;

/**
 **
 * An enumeration of possible response codes.
 *
 * Protobuf type <code>proto.ResponseCodeEnum</code>
 */
class ResponseCodeEnum
{
    /**
     **
     * The transaction passed the precheck validations.
     *
     * Generated from protobuf enum <code>OK = 0;</code>
     */
    const OK = 0;
    /**
     **
     * For any error not handled by specific error codes listed below.
     *
     * Generated from protobuf enum <code>INVALID_TRANSACTION = 1;</code>
     */
    const INVALID_TRANSACTION = 1;
    /**
     **
     * Payer account does not exist.
     *
     * Generated from protobuf enum <code>PAYER_ACCOUNT_NOT_FOUND = 2;</code>
     */
    const PAYER_ACCOUNT_NOT_FOUND = 2;
    /**
     **
     * Node Account provided does not match the node account of the node the transaction was submitted
     * to.
     *
     * Generated from protobuf enum <code>INVALID_NODE_ACCOUNT = 3;</code>
     */
    const INVALID_NODE_ACCOUNT = 3;
    /**
     **
     * Pre-Check error when TransactionValidStart + transactionValidDuration is less than current
     * consensus time.
     *
     * Generated from protobuf enum <code>TRANSACTION_EXPIRED = 4;</code>
     */
    const TRANSACTION_EXPIRED = 4;
    /**
     **
     * Transaction start time is greater than current consensus time
     *
     * Generated from protobuf enum <code>INVALID_TRANSACTION_START = 5;</code>
     */
    const INVALID_TRANSACTION_START = 5;
    /**
     **
     * The given transactionValidDuration was either non-positive, or greater than the maximum
     * valid duration of 180 secs.
     *
     * Generated from protobuf enum <code>INVALID_TRANSACTION_DURATION = 6;</code>
     */
    const INVALID_TRANSACTION_DURATION = 6;
    /**
     **
     * The transaction signature is not valid
     *
     * Generated from protobuf enum <code>INVALID_SIGNATURE = 7;</code>
     */
    const INVALID_SIGNATURE = 7;
    /**
     **
     * Transaction memo size exceeded 100 bytes
     *
     * Generated from protobuf enum <code>MEMO_TOO_LONG = 8;</code>
     */
    const MEMO_TOO_LONG = 8;
    /**
     **
     * The fee provided in the transaction is insufficient for this type of transaction
     *
     * Generated from protobuf enum <code>INSUFFICIENT_TX_FEE = 9;</code>
     */
    const INSUFFICIENT_TX_FEE = 9;
    /**
     **
     * The payer account has insufficient cryptocurrency to pay the transaction fee
     *
     * Generated from protobuf enum <code>INSUFFICIENT_PAYER_BALANCE = 10;</code>
     */
    const INSUFFICIENT_PAYER_BALANCE = 10;
    /**
     **
     * This transaction ID is a duplicate of one that was submitted to this node or reached consensus
     * in the last 180 seconds (receipt period)
     *
     * Generated from protobuf enum <code>DUPLICATE_TRANSACTION = 11;</code>
     */
    const DUPLICATE_TRANSACTION = 11;
    /**
     **
     * If API is throttled out
     *
     * Generated from protobuf enum <code>BUSY = 12;</code>
     */
    const BUSY = 12;
    /**
     **
     * The API is not currently supported
     *
     * Generated from protobuf enum <code>NOT_SUPPORTED = 13;</code>
     */
    const NOT_SUPPORTED = 13;
    /**
     **
     * The file id is invalid or does not exist
     *
     * Generated from protobuf enum <code>INVALID_FILE_ID = 14;</code>
     */
    const INVALID_FILE_ID = 14;
    /**
     **
     * The account id is invalid or does not exist
     *
     * Generated from protobuf enum <code>INVALID_ACCOUNT_ID = 15;</code>
     */
    const INVALID_ACCOUNT_ID = 15;
    /**
     **
     * The contract id is invalid or does not exist
     *
     * Generated from protobuf enum <code>INVALID_CONTRACT_ID = 16;</code>
     */
    const INVALID_CONTRACT_ID = 16;
    /**
     **
     * Transaction id is not valid
     *
     * Generated from protobuf enum <code>INVALID_TRANSACTION_ID = 17;</code>
     */
    const INVALID_TRANSACTION_ID = 17;
    /**
     **
     * Receipt for given transaction id does not exist
     *
     * Generated from protobuf enum <code>RECEIPT_NOT_FOUND = 18;</code>
     */
    const RECEIPT_NOT_FOUND = 18;
    /**
     **
     * Record for given transaction id does not exist
     *
     * Generated from protobuf enum <code>RECORD_NOT_FOUND = 19;</code>
     */
    const RECORD_NOT_FOUND = 19;
    /**
     **
     * The solidity id is invalid or entity with this solidity id does not exist
     *
     * Generated from protobuf enum <code>INVALID_SOLIDITY_ID = 20;</code>
     */
    const INVALID_SOLIDITY_ID = 20;
    /**
     **
     * The responding node has submitted the transaction to the network. Its final status is still
     * unknown.
     *
     * Generated from protobuf enum <code>UNKNOWN = 21;</code>
     */
    const UNKNOWN = 21;
    /**
     **
     * The transaction succeeded
     *
     * Generated from protobuf enum <code>SUCCESS = 22;</code>
     */
    const SUCCESS = 22;
    /**
     **
     * There was a system error and the transaction failed because of invalid request parameters.
     *
     * Generated from protobuf enum <code>FAIL_INVALID = 23;</code>
     */
    const FAIL_INVALID = 23;
    /**
     **
     * There was a system error while performing fee calculation, reserved for future.
     *
     * Generated from protobuf enum <code>FAIL_FEE = 24;</code>
     */
    const FAIL_FEE = 24;
    /**
     **
     * There was a system error while performing balance checks, reserved for future.
     *
     * Generated from protobuf enum <code>FAIL_BALANCE = 25;</code>
     */
    const FAIL_BALANCE = 25;
    /**
     **
     * Key not provided in the transaction body
     *
     * Generated from protobuf enum <code>KEY_REQUIRED = 26;</code>
     */
    const KEY_REQUIRED = 26;
    /**
     **
     * Unsupported algorithm/encoding used for keys in the transaction
     *
     * Generated from protobuf enum <code>BAD_ENCODING = 27;</code>
     */
    const BAD_ENCODING = 27;
    /**
     **
     * When the account balance is not sufficient for the transfer
     *
     * Generated from protobuf enum <code>INSUFFICIENT_ACCOUNT_BALANCE = 28;</code>
     */
    const INSUFFICIENT_ACCOUNT_BALANCE = 28;
    /**
     **
     * During an update transaction when the system is not able to find the Users Solidity address
     *
     * Generated from protobuf enum <code>INVALID_SOLIDITY_ADDRESS = 29;</code>
     */
    const INVALID_SOLIDITY_ADDRESS = 29;
    /**
     **
     * Not enough gas was supplied to execute transaction
     *
     * Generated from protobuf enum <code>INSUFFICIENT_GAS = 30;</code>
     */
    const INSUFFICIENT_GAS = 30;
    /**
     **
     * contract byte code size is over the limit
     *
     * Generated from protobuf enum <code>CONTRACT_SIZE_LIMIT_EXCEEDED = 31;</code>
     */
    const CONTRACT_SIZE_LIMIT_EXCEEDED = 31;
    /**
     **
     * local execution (query) is requested for a function which changes state
     *
     * Generated from protobuf enum <code>LOCAL_CALL_MODIFICATION_EXCEPTION = 32;</code>
     */
    const LOCAL_CALL_MODIFICATION_EXCEPTION = 32;
    /**
     **
     * Contract REVERT OPCODE executed
     *
     * Generated from protobuf enum <code>CONTRACT_REVERT_EXECUTED = 33;</code>
     */
    const CONTRACT_REVERT_EXECUTED = 33;
    /**
     **
     * For any contract execution related error not handled by specific error codes listed above.
     *
     * Generated from protobuf enum <code>CONTRACT_EXECUTION_EXCEPTION = 34;</code>
     */
    const CONTRACT_EXECUTION_EXCEPTION = 34;
    /**
     **
     * In Query validation, account with +ve(amount) value should be Receiving node account, the
     * receiver account should be only one account in the list
     *
     * Generated from protobuf enum <code>INVALID_RECEIVING_NODE_ACCOUNT = 35;</code>
     */
    const INVALID_RECEIVING_NODE_ACCOUNT = 35;
    /**
     **
     * Header is missing in Query request
     *
     * Generated from protobuf enum <code>MISSING_QUERY_HEADER = 36;</code>
     */
    const MISSING_QUERY_HEADER = 36;
    /**
     **
     * The update of the account failed
     *
     * Generated from protobuf enum <code>ACCOUNT_UPDATE_FAILED = 37;</code>
     */
    const ACCOUNT_UPDATE_FAILED = 37;
    /**
     **
     * Provided key encoding was not supported by the system
     *
     * Generated from protobuf enum <code>INVALID_KEY_ENCODING = 38;</code>
     */
    const INVALID_KEY_ENCODING = 38;
    /**
     **
     * null solidity address
     *
     * Generated from protobuf enum <code>NULL_SOLIDITY_ADDRESS = 39;</code>
     */
    const NULL_SOLIDITY_ADDRESS = 39;
    /**
     **
     * update of the contract failed
     *
     * Generated from protobuf enum <code>CONTRACT_UPDATE_FAILED = 40;</code>
     */
    const CONTRACT_UPDATE_FAILED = 40;
    /**
     **
     * the query header is invalid
     *
     * Generated from protobuf enum <code>INVALID_QUERY_HEADER = 41;</code>
     */
    const INVALID_QUERY_HEADER = 41;
    /**
     **
     * Invalid fee submitted
     *
     * Generated from protobuf enum <code>INVALID_FEE_SUBMITTED = 42;</code>
     */
    const INVALID_FEE_SUBMITTED = 42;
    /**
     **
     * Payer signature is invalid
     *
     * Generated from protobuf enum <code>INVALID_PAYER_SIGNATURE = 43;</code>
     */
    const INVALID_PAYER_SIGNATURE = 43;
    /**
     **
     * The keys were not provided in the request.
     *
     * Generated from protobuf enum <code>KEY_NOT_PROVIDED = 44;</code>
     */
    const KEY_NOT_PROVIDED = 44;
    /**
     **
     * Expiration time provided in the transaction was invalid.
     *
     * Generated from protobuf enum <code>INVALID_EXPIRATION_TIME = 45;</code>
     */
    const INVALID_EXPIRATION_TIME = 45;
    /**
     **
     * WriteAccess Control Keys are not provided for the file
     *
     * Generated from protobuf enum <code>NO_WACL_KEY = 46;</code>
     */
    const NO_WACL_KEY = 46;
    /**
     **
     * The contents of file are provided as empty.
     *
     * Generated from protobuf enum <code>FILE_CONTENT_EMPTY = 47;</code>
     */
    const FILE_CONTENT_EMPTY = 47;
    /**
     **
     * The crypto transfer credit and debit do not sum equal to 0
     *
     * Generated from protobuf enum <code>INVALID_ACCOUNT_AMOUNTS = 48;</code>
     */
    const INVALID_ACCOUNT_AMOUNTS = 48;
    /**
     **
     * Transaction body provided is empty
     *
     * Generated from protobuf enum <code>EMPTY_TRANSACTION_BODY = 49;</code>
     */
    const EMPTY_TRANSACTION_BODY = 49;
    /**
     **
     * Invalid transaction body provided
     *
     * Generated from protobuf enum <code>INVALID_TRANSACTION_BODY = 50;</code>
     */
    const INVALID_TRANSACTION_BODY = 50;
    /**
     **
     * the type of key (base ed25519 key, KeyList, or ThresholdKey) does not match the type of
     * signature (base ed25519 signature, SignatureList, or ThresholdKeySignature)
     *
     * Generated from protobuf enum <code>INVALID_SIGNATURE_TYPE_MISMATCHING_KEY = 51;</code>
     */
    const INVALID_SIGNATURE_TYPE_MISMATCHING_KEY = 51;
    /**
     **
     * the number of key (KeyList, or ThresholdKey) does not match that of signature (SignatureList,
     * or ThresholdKeySignature). e.g. if a keyList has 3 base keys, then the corresponding
     * signatureList should also have 3 base signatures.
     *
     * Generated from protobuf enum <code>INVALID_SIGNATURE_COUNT_MISMATCHING_KEY = 52;</code>
     */
    const INVALID_SIGNATURE_COUNT_MISMATCHING_KEY = 52;
    /**
     **
     * the livehash body is empty
     *
     * Generated from protobuf enum <code>EMPTY_LIVE_HASH_BODY = 53;</code>
     */
    const EMPTY_LIVE_HASH_BODY = 53;
    /**
     **
     * the livehash data is missing
     *
     * Generated from protobuf enum <code>EMPTY_LIVE_HASH = 54;</code>
     */
    const EMPTY_LIVE_HASH = 54;
    /**
     **
     * the keys for a livehash are missing
     *
     * Generated from protobuf enum <code>EMPTY_LIVE_HASH_KEYS = 55;</code>
     */
    const EMPTY_LIVE_HASH_KEYS = 55;
    /**
     **
     * the livehash data is not the output of a SHA-384 digest
     *
     * Generated from protobuf enum <code>INVALID_LIVE_HASH_SIZE = 56;</code>
     */
    const INVALID_LIVE_HASH_SIZE = 56;
    /**
     **
     * the query body is empty
     *
     * Generated from protobuf enum <code>EMPTY_QUERY_BODY = 57;</code>
     */
    const EMPTY_QUERY_BODY = 57;
    /**
     **
     * the crypto livehash query is empty
     *
     * Generated from protobuf enum <code>EMPTY_LIVE_HASH_QUERY = 58;</code>
     */
    const EMPTY_LIVE_HASH_QUERY = 58;
    /**
     **
     * the livehash is not present
     *
     * Generated from protobuf enum <code>LIVE_HASH_NOT_FOUND = 59;</code>
     */
    const LIVE_HASH_NOT_FOUND = 59;
    /**
     **
     * the account id passed has not yet been created.
     *
     * Generated from protobuf enum <code>ACCOUNT_ID_DOES_NOT_EXIST = 60;</code>
     */
    const ACCOUNT_ID_DOES_NOT_EXIST = 60;
    /**
     **
     * the livehash already exists for a given account
     *
     * Generated from protobuf enum <code>LIVE_HASH_ALREADY_EXISTS = 61;</code>
     */
    const LIVE_HASH_ALREADY_EXISTS = 61;
    /**
     **
     * File WACL keys are invalid
     *
     * Generated from protobuf enum <code>INVALID_FILE_WACL = 62;</code>
     */
    const INVALID_FILE_WACL = 62;
    /**
     **
     * Serialization failure
     *
     * Generated from protobuf enum <code>SERIALIZATION_FAILED = 63;</code>
     */
    const SERIALIZATION_FAILED = 63;
    /**
     **
     * The size of the Transaction is greater than transactionMaxBytes
     *
     * Generated from protobuf enum <code>TRANSACTION_OVERSIZE = 64;</code>
     */
    const TRANSACTION_OVERSIZE = 64;
    /**
     **
     * The Transaction has more than 50 levels
     *
     * Generated from protobuf enum <code>TRANSACTION_TOO_MANY_LAYERS = 65;</code>
     */
    const TRANSACTION_TOO_MANY_LAYERS = 65;
    /**
     **
     * Contract is marked as deleted
     *
     * Generated from protobuf enum <code>CONTRACT_DELETED = 66;</code>
     */
    const CONTRACT_DELETED = 66;
    /**
     **
     * the platform node is either disconnected or lagging behind.
     *
     * Generated from protobuf enum <code>PLATFORM_NOT_ACTIVE = 67;</code>
     */
    const PLATFORM_NOT_ACTIVE = 67;
    /**
     **
     * one public key matches more than one prefixes on the signature map
     *
     * Generated from protobuf enum <code>KEY_PREFIX_MISMATCH = 68;</code>
     */
    const KEY_PREFIX_MISMATCH = 68;
    /**
     **
     * transaction not created by platform due to large backlog
     *
     * Generated from protobuf enum <code>PLATFORM_TRANSACTION_NOT_CREATED = 69;</code>
     */
    const PLATFORM_TRANSACTION_NOT_CREATED = 69;
    /**
     **
     * auto renewal period is not a positive number of seconds
     *
     * Generated from protobuf enum <code>INVALID_RENEWAL_PERIOD = 70;</code>
     */
    const INVALID_RENEWAL_PERIOD = 70;
    /**
     **
     * the response code when a smart contract id is passed for a crypto API request
     *
     * Generated from protobuf enum <code>INVALID_PAYER_ACCOUNT_ID = 71;</code>
     */
    const INVALID_PAYER_ACCOUNT_ID = 71;
    /**
     **
     * the account has been marked as deleted
     *
     * Generated from protobuf enum <code>ACCOUNT_DELETED = 72;</code>
     */
    const ACCOUNT_DELETED = 72;
    /**
     **
     * the file has been marked as deleted
     *
     * Generated from protobuf enum <code>FILE_DELETED = 73;</code>
     */
    const FILE_DELETED = 73;
    /**
     **
     * same accounts repeated in the transfer account list
     *
     * Generated from protobuf enum <code>ACCOUNT_REPEATED_IN_ACCOUNT_AMOUNTS = 74;</code>
     */
    const ACCOUNT_REPEATED_IN_ACCOUNT_AMOUNTS = 74;
    /**
     **
     * attempting to set negative balance value for crypto account
     *
     * Generated from protobuf enum <code>SETTING_NEGATIVE_ACCOUNT_BALANCE = 75;</code>
     */
    const SETTING_NEGATIVE_ACCOUNT_BALANCE = 75;
    /**
     **
     * when deleting smart contract that has crypto balance either transfer account or transfer smart
     * contract is required
     *
     * Generated from protobuf enum <code>OBTAINER_REQUIRED = 76;</code>
     */
    const OBTAINER_REQUIRED = 76;
    /**
     **
     * when deleting smart contract that has crypto balance you can not use the same contract id as
     * transferContractId as the one being deleted
     *
     * Generated from protobuf enum <code>OBTAINER_SAME_CONTRACT_ID = 77;</code>
     */
    const OBTAINER_SAME_CONTRACT_ID = 77;
    /**
     **
     * transferAccountId or transferContractId specified for contract delete does not exist
     *
     * Generated from protobuf enum <code>OBTAINER_DOES_NOT_EXIST = 78;</code>
     */
    const OBTAINER_DOES_NOT_EXIST = 78;
    /**
     **
     * attempting to modify (update or delete a immutable smart contract, i.e. one created without a
     * admin key)
     *
     * Generated from protobuf enum <code>MODIFYING_IMMUTABLE_CONTRACT = 79;</code>
     */
    const MODIFYING_IMMUTABLE_CONTRACT = 79;
    /**
     **
     * Unexpected exception thrown by file system functions
     *
     * Generated from protobuf enum <code>FILE_SYSTEM_EXCEPTION = 80;</code>
     */
    const FILE_SYSTEM_EXCEPTION = 80;
    /**
     **
     * the duration is not a subset of [MINIMUM_AUTORENEW_DURATION,MAXIMUM_AUTORENEW_DURATION]
     *
     * Generated from protobuf enum <code>AUTORENEW_DURATION_NOT_IN_RANGE = 81;</code>
     */
    const AUTORENEW_DURATION_NOT_IN_RANGE = 81;
    /**
     **
     * Decoding the smart contract binary to a byte array failed. Check that the input is a valid hex
     * string.
     *
     * Generated from protobuf enum <code>ERROR_DECODING_BYTESTRING = 82;</code>
     */
    const ERROR_DECODING_BYTESTRING = 82;
    /**
     **
     * File to create a smart contract was of length zero
     *
     * Generated from protobuf enum <code>CONTRACT_FILE_EMPTY = 83;</code>
     */
    const CONTRACT_FILE_EMPTY = 83;
    /**
     **
     * Bytecode for smart contract is of length zero
     *
     * Generated from protobuf enum <code>CONTRACT_BYTECODE_EMPTY = 84;</code>
     */
    const CONTRACT_BYTECODE_EMPTY = 84;
    /**
     **
     * Attempt to set negative initial balance
     *
     * Generated from protobuf enum <code>INVALID_INITIAL_BALANCE = 85;</code>
     */
    const INVALID_INITIAL_BALANCE = 85;
    /**
     **
     * Attempt to set negative receive record threshold
     *
     * Generated from protobuf enum <code>INVALID_RECEIVE_RECORD_THRESHOLD = 86 [deprecated = true];</code>
     */
    const INVALID_RECEIVE_RECORD_THRESHOLD = 86;
    /**
     **
     * Attempt to set negative send record threshold
     *
     * Generated from protobuf enum <code>INVALID_SEND_RECORD_THRESHOLD = 87 [deprecated = true];</code>
     */
    const INVALID_SEND_RECORD_THRESHOLD = 87;
    /**
     **
     * Special Account Operations should be performed by only Genesis account, return this code if it
     * is not Genesis Account
     *
     * Generated from protobuf enum <code>ACCOUNT_IS_NOT_GENESIS_ACCOUNT = 88;</code>
     */
    const ACCOUNT_IS_NOT_GENESIS_ACCOUNT = 88;
    /**
     **
     * The fee payer account doesn't have permission to submit such Transaction
     *
     * Generated from protobuf enum <code>PAYER_ACCOUNT_UNAUTHORIZED = 89;</code>
     */
    const PAYER_ACCOUNT_UNAUTHORIZED = 89;
    /**
     **
     * FreezeTransactionBody is invalid
     *
     * Generated from protobuf enum <code>INVALID_FREEZE_TRANSACTION_BODY = 90;</code>
     */
    const INVALID_FREEZE_TRANSACTION_BODY = 90;
    /**
     **
     * FreezeTransactionBody does not exist
     *
     * Generated from protobuf enum <code>FREEZE_TRANSACTION_BODY_NOT_FOUND = 91;</code>
     */
    const FREEZE_TRANSACTION_BODY_NOT_FOUND = 91;
    /**
     **
     * Exceeded the number of accounts (both from and to) allowed for crypto transfer list
     *
     * Generated from protobuf enum <code>TRANSFER_LIST_SIZE_LIMIT_EXCEEDED = 92;</code>
     */
    const TRANSFER_LIST_SIZE_LIMIT_EXCEEDED = 92;
    /**
     **
     * Smart contract result size greater than specified maxResultSize
     *
     * Generated from protobuf enum <code>RESULT_SIZE_LIMIT_EXCEEDED = 93;</code>
     */
    const RESULT_SIZE_LIMIT_EXCEEDED = 93;
    /**
     **
     * The payer account is not a special account(account 0.0.55)
     *
     * Generated from protobuf enum <code>NOT_SPECIAL_ACCOUNT = 94;</code>
     */
    const NOT_SPECIAL_ACCOUNT = 94;
    /**
     **
     * Negative gas was offered in smart contract call
     *
     * Generated from protobuf enum <code>CONTRACT_NEGATIVE_GAS = 95;</code>
     */
    const CONTRACT_NEGATIVE_GAS = 95;
    /**
     **
     * Negative value / initial balance was specified in a smart contract call / create
     *
     * Generated from protobuf enum <code>CONTRACT_NEGATIVE_VALUE = 96;</code>
     */
    const CONTRACT_NEGATIVE_VALUE = 96;
    /**
     **
     * Failed to update fee file
     *
     * Generated from protobuf enum <code>INVALID_FEE_FILE = 97;</code>
     */
    const INVALID_FEE_FILE = 97;
    /**
     **
     * Failed to update exchange rate file
     *
     * Generated from protobuf enum <code>INVALID_EXCHANGE_RATE_FILE = 98;</code>
     */
    const INVALID_EXCHANGE_RATE_FILE = 98;
    /**
     **
     * Payment tendered for contract local call cannot cover both the fee and the gas
     *
     * Generated from protobuf enum <code>INSUFFICIENT_LOCAL_CALL_GAS = 99;</code>
     */
    const INSUFFICIENT_LOCAL_CALL_GAS = 99;
    /**
     **
     * Entities with Entity ID below 1000 are not allowed to be deleted
     *
     * Generated from protobuf enum <code>ENTITY_NOT_ALLOWED_TO_DELETE = 100;</code>
     */
    const ENTITY_NOT_ALLOWED_TO_DELETE = 100;
    /**
     **
     * Violating one of these rules: 1) treasury account can update all entities below 0.0.1000, 2)
     * account 0.0.50 can update all entities from 0.0.51 - 0.0.80, 3) Network Function Master Account
     * A/c 0.0.50 - Update all Network Function accounts & perform all the Network Functions listed
     * below, 4) Network Function Accounts: i) A/c 0.0.55 - Update Address Book files (0.0.101/102),
     * ii) A/c 0.0.56 - Update Fee schedule (0.0.111), iii) A/c 0.0.57 - Update Exchange Rate
     * (0.0.112).
     *
     * Generated from protobuf enum <code>AUTHORIZATION_FAILED = 101;</code>
     */
    const AUTHORIZATION_FAILED = 101;
    /**
     **
     * Fee Schedule Proto uploaded but not valid (append or update is required)
     *
     * Generated from protobuf enum <code>FILE_UPLOADED_PROTO_INVALID = 102;</code>
     */
    const FILE_UPLOADED_PROTO_INVALID = 102;
    /**
     **
     * Fee Schedule Proto uploaded but not valid (append or update is required)
     *
     * Generated from protobuf enum <code>FILE_UPLOADED_PROTO_NOT_SAVED_TO_DISK = 103;</code>
     */
    const FILE_UPLOADED_PROTO_NOT_SAVED_TO_DISK = 103;
    /**
     **
     * Fee Schedule Proto File Part uploaded
     *
     * Generated from protobuf enum <code>FEE_SCHEDULE_FILE_PART_UPLOADED = 104;</code>
     */
    const FEE_SCHEDULE_FILE_PART_UPLOADED = 104;
    /**
     **
     * The change on Exchange Rate exceeds Exchange_Rate_Allowed_Percentage
     *
     * Generated from protobuf enum <code>EXCHANGE_RATE_CHANGE_LIMIT_EXCEEDED = 105;</code>
     */
    const EXCHANGE_RATE_CHANGE_LIMIT_EXCEEDED = 105;
    /**
     **
     * Contract permanent storage exceeded the currently allowable limit
     *
     * Generated from protobuf enum <code>MAX_CONTRACT_STORAGE_EXCEEDED = 106;</code>
     */
    const MAX_CONTRACT_STORAGE_EXCEEDED = 106;
    /**
     **
     * Transfer Account should not be same as Account to be deleted
     *
     * Generated from protobuf enum <code>TRANSFER_ACCOUNT_SAME_AS_DELETE_ACCOUNT = 107;</code>
     */
    const TRANSFER_ACCOUNT_SAME_AS_DELETE_ACCOUNT = 107;
    /**
     * Generated from protobuf enum <code>TOTAL_LEDGER_BALANCE_INVALID = 108;</code>
     */
    const TOTAL_LEDGER_BALANCE_INVALID = 108;
    /**
     **
     * The expiration date/time on a smart contract may not be reduced
     *
     * Generated from protobuf enum <code>EXPIRATION_REDUCTION_NOT_ALLOWED = 110;</code>
     */
    const EXPIRATION_REDUCTION_NOT_ALLOWED = 110;
    /**
     **
     * Gas exceeded currently allowable gas limit per transaction
     *
     * Generated from protobuf enum <code>MAX_GAS_LIMIT_EXCEEDED = 111;</code>
     */
    const MAX_GAS_LIMIT_EXCEEDED = 111;
    /**
     **
     * File size exceeded the currently allowable limit
     *
     * Generated from protobuf enum <code>MAX_FILE_SIZE_EXCEEDED = 112;</code>
     */
    const MAX_FILE_SIZE_EXCEEDED = 112;
    /**
     **
     * When a valid signature is not provided for operations on account with receiverSigRequired=true
     *
     * Generated from protobuf enum <code>RECEIVER_SIG_REQUIRED = 113;</code>
     */
    const RECEIVER_SIG_REQUIRED = 113;
    /**
     **
     * The Topic ID specified is not in the system.
     *
     * Generated from protobuf enum <code>INVALID_TOPIC_ID = 150;</code>
     */
    const INVALID_TOPIC_ID = 150;
    /**
     **
     * A provided admin key was invalid. Verify the bytes for an Ed25519 public key are exactly 32 bytes; and the bytes for a compressed ECDSA(secp256k1) key are exactly 33 bytes, with the first byte either 0x02 or 0x03..
     *
     * Generated from protobuf enum <code>INVALID_ADMIN_KEY = 155;</code>
     */
    const INVALID_ADMIN_KEY = 155;
    /**
     **
     * A provided submit key was invalid.
     *
     * Generated from protobuf enum <code>INVALID_SUBMIT_KEY = 156;</code>
     */
    const INVALID_SUBMIT_KEY = 156;
    /**
     **
     * An attempted operation was not authorized (ie - a deleteTopic for a topic with no adminKey).
     *
     * Generated from protobuf enum <code>UNAUTHORIZED = 157;</code>
     */
    const UNAUTHORIZED = 157;
    /**
     **
     * A ConsensusService message is empty.
     *
     * Generated from protobuf enum <code>INVALID_TOPIC_MESSAGE = 158;</code>
     */
    const INVALID_TOPIC_MESSAGE = 158;
    /**
     **
     * The autoRenewAccount specified is not a valid, active account.
     *
     * Generated from protobuf enum <code>INVALID_AUTORENEW_ACCOUNT = 159;</code>
     */
    const INVALID_AUTORENEW_ACCOUNT = 159;
    /**
     **
     * An adminKey was not specified on the topic, so there must not be an autoRenewAccount.
     *
     * Generated from protobuf enum <code>AUTORENEW_ACCOUNT_NOT_ALLOWED = 160;</code>
     */
    const AUTORENEW_ACCOUNT_NOT_ALLOWED = 160;
    /**
     **
     * The topic has expired, was not automatically renewed, and is in a 7 day grace period before the
     * topic will be deleted unrecoverably. This error response code will not be returned until
     * autoRenew functionality is supported by HAPI.
     *
     * Generated from protobuf enum <code>TOPIC_EXPIRED = 162;</code>
     */
    const TOPIC_EXPIRED = 162;
    /**
     * chunk number must be from 1 to total (chunks) inclusive.
     *
     * Generated from protobuf enum <code>INVALID_CHUNK_NUMBER = 163;</code>
     */
    const INVALID_CHUNK_NUMBER = 163;
    /**
     * For every chunk, the payer account that is part of initialTransactionID must match the Payer Account of this transaction. The entire initialTransactionID should match the transactionID of the first chunk, but this is not checked or enforced by Hedera except when the chunk number is 1.
     *
     * Generated from protobuf enum <code>INVALID_CHUNK_TRANSACTION_ID = 164;</code>
     */
    const INVALID_CHUNK_TRANSACTION_ID = 164;
    /**
     * Account is frozen and cannot transact with the token
     *
     * Generated from protobuf enum <code>ACCOUNT_FROZEN_FOR_TOKEN = 165;</code>
     */
    const ACCOUNT_FROZEN_FOR_TOKEN = 165;
    /**
     * An involved account already has more than <tt>tokens.maxPerAccount</tt> associations with non-deleted tokens.
     *
     * Generated from protobuf enum <code>TOKENS_PER_ACCOUNT_LIMIT_EXCEEDED = 166;</code>
     */
    const TOKENS_PER_ACCOUNT_LIMIT_EXCEEDED = 166;
    /**
     * The token is invalid or does not exist
     *
     * Generated from protobuf enum <code>INVALID_TOKEN_ID = 167;</code>
     */
    const INVALID_TOKEN_ID = 167;
    /**
     * Invalid token decimals
     *
     * Generated from protobuf enum <code>INVALID_TOKEN_DECIMALS = 168;</code>
     */
    const INVALID_TOKEN_DECIMALS = 168;
    /**
     * Invalid token initial supply
     *
     * Generated from protobuf enum <code>INVALID_TOKEN_INITIAL_SUPPLY = 169;</code>
     */
    const INVALID_TOKEN_INITIAL_SUPPLY = 169;
    /**
     * Treasury Account does not exist or is deleted
     *
     * Generated from protobuf enum <code>INVALID_TREASURY_ACCOUNT_FOR_TOKEN = 170;</code>
     */
    const INVALID_TREASURY_ACCOUNT_FOR_TOKEN = 170;
    /**
     * Token Symbol is not UTF-8 capitalized alphabetical string
     *
     * Generated from protobuf enum <code>INVALID_TOKEN_SYMBOL = 171;</code>
     */
    const INVALID_TOKEN_SYMBOL = 171;
    /**
     * Freeze key is not set on token
     *
     * Generated from protobuf enum <code>TOKEN_HAS_NO_FREEZE_KEY = 172;</code>
     */
    const TOKEN_HAS_NO_FREEZE_KEY = 172;
    /**
     * Amounts in transfer list are not net zero
     *
     * Generated from protobuf enum <code>TRANSFERS_NOT_ZERO_SUM_FOR_TOKEN = 173;</code>
     */
    const TRANSFERS_NOT_ZERO_SUM_FOR_TOKEN = 173;
    /**
     * A token symbol was not provided
     *
     * Generated from protobuf enum <code>MISSING_TOKEN_SYMBOL = 174;</code>
     */
    const MISSING_TOKEN_SYMBOL = 174;
    /**
     * The provided token symbol was too long
     *
     * Generated from protobuf enum <code>TOKEN_SYMBOL_TOO_LONG = 175;</code>
     */
    const TOKEN_SYMBOL_TOO_LONG = 175;
    /**
     * KYC must be granted and account does not have KYC granted
     *
     * Generated from protobuf enum <code>ACCOUNT_KYC_NOT_GRANTED_FOR_TOKEN = 176;</code>
     */
    const ACCOUNT_KYC_NOT_GRANTED_FOR_TOKEN = 176;
    /**
     * KYC key is not set on token
     *
     * Generated from protobuf enum <code>TOKEN_HAS_NO_KYC_KEY = 177;</code>
     */
    const TOKEN_HAS_NO_KYC_KEY = 177;
    /**
     * Token balance is not sufficient for the transaction
     *
     * Generated from protobuf enum <code>INSUFFICIENT_TOKEN_BALANCE = 178;</code>
     */
    const INSUFFICIENT_TOKEN_BALANCE = 178;
    /**
     * Token transactions cannot be executed on deleted token
     *
     * Generated from protobuf enum <code>TOKEN_WAS_DELETED = 179;</code>
     */
    const TOKEN_WAS_DELETED = 179;
    /**
     * Supply key is not set on token
     *
     * Generated from protobuf enum <code>TOKEN_HAS_NO_SUPPLY_KEY = 180;</code>
     */
    const TOKEN_HAS_NO_SUPPLY_KEY = 180;
    /**
     * Wipe key is not set on token
     *
     * Generated from protobuf enum <code>TOKEN_HAS_NO_WIPE_KEY = 181;</code>
     */
    const TOKEN_HAS_NO_WIPE_KEY = 181;
    /**
     * The requested token mint amount would cause an invalid total supply
     *
     * Generated from protobuf enum <code>INVALID_TOKEN_MINT_AMOUNT = 182;</code>
     */
    const INVALID_TOKEN_MINT_AMOUNT = 182;
    /**
     * The requested token burn amount would cause an invalid total supply
     *
     * Generated from protobuf enum <code>INVALID_TOKEN_BURN_AMOUNT = 183;</code>
     */
    const INVALID_TOKEN_BURN_AMOUNT = 183;
    /**
     * A required token-account relationship is missing
     *
     * Generated from protobuf enum <code>TOKEN_NOT_ASSOCIATED_TO_ACCOUNT = 184;</code>
     */
    const TOKEN_NOT_ASSOCIATED_TO_ACCOUNT = 184;
    /**
     * The target of a wipe operation was the token treasury account
     *
     * Generated from protobuf enum <code>CANNOT_WIPE_TOKEN_TREASURY_ACCOUNT = 185;</code>
     */
    const CANNOT_WIPE_TOKEN_TREASURY_ACCOUNT = 185;
    /**
     * The provided KYC key was invalid.
     *
     * Generated from protobuf enum <code>INVALID_KYC_KEY = 186;</code>
     */
    const INVALID_KYC_KEY = 186;
    /**
     * The provided wipe key was invalid.
     *
     * Generated from protobuf enum <code>INVALID_WIPE_KEY = 187;</code>
     */
    const INVALID_WIPE_KEY = 187;
    /**
     * The provided freeze key was invalid.
     *
     * Generated from protobuf enum <code>INVALID_FREEZE_KEY = 188;</code>
     */
    const INVALID_FREEZE_KEY = 188;
    /**
     * The provided supply key was invalid.
     *
     * Generated from protobuf enum <code>INVALID_SUPPLY_KEY = 189;</code>
     */
    const INVALID_SUPPLY_KEY = 189;
    /**
     * Token Name is not provided
     *
     * Generated from protobuf enum <code>MISSING_TOKEN_NAME = 190;</code>
     */
    const MISSING_TOKEN_NAME = 190;
    /**
     * Token Name is too long
     *
     * Generated from protobuf enum <code>TOKEN_NAME_TOO_LONG = 191;</code>
     */
    const TOKEN_NAME_TOO_LONG = 191;
    /**
     * The provided wipe amount must not be negative, zero or bigger than the token holder balance
     *
     * Generated from protobuf enum <code>INVALID_WIPING_AMOUNT = 192;</code>
     */
    const INVALID_WIPING_AMOUNT = 192;
    /**
     * Token does not have Admin key set, thus update/delete transactions cannot be performed
     *
     * Generated from protobuf enum <code>TOKEN_IS_IMMUTABLE = 193;</code>
     */
    const TOKEN_IS_IMMUTABLE = 193;
    /**
     * An <tt>associateToken</tt> operation specified a token already associated to the account
     *
     * Generated from protobuf enum <code>TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT = 194;</code>
     */
    const TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT = 194;
    /**
     * An attempted operation is invalid until all token balances for the target account are zero
     *
     * Generated from protobuf enum <code>TRANSACTION_REQUIRES_ZERO_TOKEN_BALANCES = 195;</code>
     */
    const TRANSACTION_REQUIRES_ZERO_TOKEN_BALANCES = 195;
    /**
     * An attempted operation is invalid because the account is a treasury
     *
     * Generated from protobuf enum <code>ACCOUNT_IS_TREASURY = 196;</code>
     */
    const ACCOUNT_IS_TREASURY = 196;
    /**
     * Same TokenIDs present in the token list
     *
     * Generated from protobuf enum <code>TOKEN_ID_REPEATED_IN_TOKEN_LIST = 197;</code>
     */
    const TOKEN_ID_REPEATED_IN_TOKEN_LIST = 197;
    /**
     * Exceeded the number of token transfers (both from and to) allowed for token transfer list
     *
     * Generated from protobuf enum <code>TOKEN_TRANSFER_LIST_SIZE_LIMIT_EXCEEDED = 198;</code>
     */
    const TOKEN_TRANSFER_LIST_SIZE_LIMIT_EXCEEDED = 198;
    /**
     * TokenTransfersTransactionBody has no TokenTransferList
     *
     * Generated from protobuf enum <code>EMPTY_TOKEN_TRANSFER_BODY = 199;</code>
     */
    const EMPTY_TOKEN_TRANSFER_BODY = 199;
    /**
     * TokenTransfersTransactionBody has a TokenTransferList with no AccountAmounts
     *
     * Generated from protobuf enum <code>EMPTY_TOKEN_TRANSFER_ACCOUNT_AMOUNTS = 200;</code>
     */
    const EMPTY_TOKEN_TRANSFER_ACCOUNT_AMOUNTS = 200;
    /**
     **
     * The Scheduled entity does not exist; or has now expired, been deleted, or been executed
     *
     * Generated from protobuf enum <code>INVALID_SCHEDULE_ID = 201;</code>
     */
    const INVALID_SCHEDULE_ID = 201;
    /**
     **
     * The Scheduled entity cannot be modified. Admin key not set
     *
     * Generated from protobuf enum <code>SCHEDULE_IS_IMMUTABLE = 202;</code>
     */
    const SCHEDULE_IS_IMMUTABLE = 202;
    /**
     **
     * The provided Scheduled Payer does not exist
     *
     * Generated from protobuf enum <code>INVALID_SCHEDULE_PAYER_ID = 203;</code>
     */
    const INVALID_SCHEDULE_PAYER_ID = 203;
    /**
     **
     * The Schedule Create Transaction TransactionID account does not exist
     *
     * Generated from protobuf enum <code>INVALID_SCHEDULE_ACCOUNT_ID = 204;</code>
     */
    const INVALID_SCHEDULE_ACCOUNT_ID = 204;
    /**
     **
     * The provided sig map did not contain any new valid signatures from required signers of the scheduled transaction
     *
     * Generated from protobuf enum <code>NO_NEW_VALID_SIGNATURES = 205;</code>
     */
    const NO_NEW_VALID_SIGNATURES = 205;
    /**
     **
     * The required signers for a scheduled transaction cannot be resolved, for example because they do not exist or have been deleted
     *
     * Generated from protobuf enum <code>UNRESOLVABLE_REQUIRED_SIGNERS = 206;</code>
     */
    const UNRESOLVABLE_REQUIRED_SIGNERS = 206;
    /**
     **
     * Only whitelisted transaction types may be scheduled
     *
     * Generated from protobuf enum <code>SCHEDULED_TRANSACTION_NOT_IN_WHITELIST = 207;</code>
     */
    const SCHEDULED_TRANSACTION_NOT_IN_WHITELIST = 207;
    /**
     **
     * At least one of the signatures in the provided sig map did not represent a valid signature for any required signer
     *
     * Generated from protobuf enum <code>SOME_SIGNATURES_WERE_INVALID = 208;</code>
     */
    const SOME_SIGNATURES_WERE_INVALID = 208;
    /**
     **
     * The scheduled field in the TransactionID may not be set to true
     *
     * Generated from protobuf enum <code>TRANSACTION_ID_FIELD_NOT_ALLOWED = 209;</code>
     */
    const TRANSACTION_ID_FIELD_NOT_ALLOWED = 209;
    /**
     **
     * A schedule already exists with the same identifying fields of an attempted ScheduleCreate (that is, all fields other than scheduledPayerAccountID)
     *
     * Generated from protobuf enum <code>IDENTICAL_SCHEDULE_ALREADY_CREATED = 210;</code>
     */
    const IDENTICAL_SCHEDULE_ALREADY_CREATED = 210;
    /**
     **
     * A string field in the transaction has a UTF-8 encoding with the prohibited zero byte
     *
     * Generated from protobuf enum <code>INVALID_ZERO_BYTE_IN_STRING = 211;</code>
     */
    const INVALID_ZERO_BYTE_IN_STRING = 211;
    /**
     **
     * A schedule being signed or deleted has already been deleted
     *
     * Generated from protobuf enum <code>SCHEDULE_ALREADY_DELETED = 212;</code>
     */
    const SCHEDULE_ALREADY_DELETED = 212;
    /**
     **
     * A schedule being signed or deleted has already been executed
     *
     * Generated from protobuf enum <code>SCHEDULE_ALREADY_EXECUTED = 213;</code>
     */
    const SCHEDULE_ALREADY_EXECUTED = 213;
    /**
     **
     * ConsensusSubmitMessage request's message size is larger than allowed.
     *
     * Generated from protobuf enum <code>MESSAGE_SIZE_TOO_LARGE = 214;</code>
     */
    const MESSAGE_SIZE_TOO_LARGE = 214;
    /**
     **
     * An operation was assigned to more than one throttle group in a given bucket
     *
     * Generated from protobuf enum <code>OPERATION_REPEATED_IN_BUCKET_GROUPS = 215;</code>
     */
    const OPERATION_REPEATED_IN_BUCKET_GROUPS = 215;
    /**
     **
     * The capacity needed to satisfy all opsPerSec groups in a bucket overflowed a signed 8-byte integral type
     *
     * Generated from protobuf enum <code>BUCKET_CAPACITY_OVERFLOW = 216;</code>
     */
    const BUCKET_CAPACITY_OVERFLOW = 216;
    /**
     **
     * Given the network size in the address book, the node-level capacity for an operation would never be enough to accept a single request; usually means a bucket burstPeriod should be increased
     *
     * Generated from protobuf enum <code>NODE_CAPACITY_NOT_SUFFICIENT_FOR_OPERATION = 217;</code>
     */
    const NODE_CAPACITY_NOT_SUFFICIENT_FOR_OPERATION = 217;
    /**
     **
     * A bucket was defined without any throttle groups
     *
     * Generated from protobuf enum <code>BUCKET_HAS_NO_THROTTLE_GROUPS = 218;</code>
     */
    const BUCKET_HAS_NO_THROTTLE_GROUPS = 218;
    /**
     **
     * A throttle group was granted zero opsPerSec
     *
     * Generated from protobuf enum <code>THROTTLE_GROUP_HAS_ZERO_OPS_PER_SEC = 219;</code>
     */
    const THROTTLE_GROUP_HAS_ZERO_OPS_PER_SEC = 219;
    /**
     **
     * The throttle definitions file was updated, but some supported operations were not assigned a bucket
     *
     * Generated from protobuf enum <code>SUCCESS_BUT_MISSING_EXPECTED_OPERATION = 220;</code>
     */
    const SUCCESS_BUT_MISSING_EXPECTED_OPERATION = 220;
    /**
     **
     * The new contents for the throttle definitions system file were not valid protobuf
     *
     * Generated from protobuf enum <code>UNPARSEABLE_THROTTLE_DEFINITIONS = 221;</code>
     */
    const UNPARSEABLE_THROTTLE_DEFINITIONS = 221;
    /**
     **
     * The new throttle definitions system file were invalid, and no more specific error could be divined
     *
     * Generated from protobuf enum <code>INVALID_THROTTLE_DEFINITIONS = 222;</code>
     */
    const INVALID_THROTTLE_DEFINITIONS = 222;
    /**
     **
     * The transaction references an account which has passed its expiration without renewal funds available, and currently remains in the ledger only because of the grace period given to expired entities
     *
     * Generated from protobuf enum <code>ACCOUNT_EXPIRED_AND_PENDING_REMOVAL = 223;</code>
     */
    const ACCOUNT_EXPIRED_AND_PENDING_REMOVAL = 223;
    /**
     **
     * Invalid token max supply
     *
     * Generated from protobuf enum <code>INVALID_TOKEN_MAX_SUPPLY = 224;</code>
     */
    const INVALID_TOKEN_MAX_SUPPLY = 224;
    /**
     **
     * Invalid token nft serial number
     *
     * Generated from protobuf enum <code>INVALID_TOKEN_NFT_SERIAL_NUMBER = 225;</code>
     */
    const INVALID_TOKEN_NFT_SERIAL_NUMBER = 225;
    /**
     **
     * Invalid nft id
     *
     * Generated from protobuf enum <code>INVALID_NFT_ID = 226;</code>
     */
    const INVALID_NFT_ID = 226;
    /**
     **
     * Nft metadata is too long
     *
     * Generated from protobuf enum <code>METADATA_TOO_LONG = 227;</code>
     */
    const METADATA_TOO_LONG = 227;
    /**
     **
     * Repeated operations count exceeds the limit
     *
     * Generated from protobuf enum <code>BATCH_SIZE_LIMIT_EXCEEDED = 228;</code>
     */
    const BATCH_SIZE_LIMIT_EXCEEDED = 228;
    /**
     **
     * The range of data to be gathered is out of the set boundaries
     *
     * Generated from protobuf enum <code>INVALID_QUERY_RANGE = 229;</code>
     */
    const INVALID_QUERY_RANGE = 229;
    /**
     **
     * A custom fractional fee set a denominator of zero
     *
     * Generated from protobuf enum <code>FRACTION_DIVIDES_BY_ZERO = 230;</code>
     */
    const FRACTION_DIVIDES_BY_ZERO = 230;
    /**
     **
     * The transaction payer could not afford a custom fee
     *
     * Generated from protobuf enum <code>INSUFFICIENT_PAYER_BALANCE_FOR_CUSTOM_FEE = 231 [deprecated = true];</code>
     */
    const INSUFFICIENT_PAYER_BALANCE_FOR_CUSTOM_FEE = 231;
    /**
     **
     * More than 10 custom fees were specified
     *
     * Generated from protobuf enum <code>CUSTOM_FEES_LIST_TOO_LONG = 232;</code>
     */
    const CUSTOM_FEES_LIST_TOO_LONG = 232;
    /**
     **
     * Any of the feeCollector accounts for customFees is invalid
     *
     * Generated from protobuf enum <code>INVALID_CUSTOM_FEE_COLLECTOR = 233;</code>
     */
    const INVALID_CUSTOM_FEE_COLLECTOR = 233;
    /**
     **
     * Any of the token Ids in customFees is invalid
     *
     * Generated from protobuf enum <code>INVALID_TOKEN_ID_IN_CUSTOM_FEES = 234;</code>
     */
    const INVALID_TOKEN_ID_IN_CUSTOM_FEES = 234;
    /**
     **
     * Any of the token Ids in customFees are not associated to feeCollector
     *
     * Generated from protobuf enum <code>TOKEN_NOT_ASSOCIATED_TO_FEE_COLLECTOR = 235;</code>
     */
    const TOKEN_NOT_ASSOCIATED_TO_FEE_COLLECTOR = 235;
    /**
     **
     * A token cannot have more units minted due to its configured supply ceiling
     *
     * Generated from protobuf enum <code>TOKEN_MAX_SUPPLY_REACHED = 236;</code>
     */
    const TOKEN_MAX_SUPPLY_REACHED = 236;
    /**
     **
     * The transaction attempted to move an NFT serial number from an account other than its owner
     *
     * Generated from protobuf enum <code>SENDER_DOES_NOT_OWN_NFT_SERIAL_NO = 237;</code>
     */
    const SENDER_DOES_NOT_OWN_NFT_SERIAL_NO = 237;
    /**
     **
     * A custom fee schedule entry did not specify either a fixed or fractional fee
     *
     * Generated from protobuf enum <code>CUSTOM_FEE_NOT_FULLY_SPECIFIED = 238;</code>
     */
    const CUSTOM_FEE_NOT_FULLY_SPECIFIED = 238;
    /**
     **
     * Only positive fees may be assessed at this time
     *
     * Generated from protobuf enum <code>CUSTOM_FEE_MUST_BE_POSITIVE = 239;</code>
     */
    const CUSTOM_FEE_MUST_BE_POSITIVE = 239;
    /**
     **
     * Fee schedule key is not set on token
     *
     * Generated from protobuf enum <code>TOKEN_HAS_NO_FEE_SCHEDULE_KEY = 240;</code>
     */
    const TOKEN_HAS_NO_FEE_SCHEDULE_KEY = 240;
    /**
     **
     * A fractional custom fee exceeded the range of a 64-bit signed integer
     *
     * Generated from protobuf enum <code>CUSTOM_FEE_OUTSIDE_NUMERIC_RANGE = 241;</code>
     */
    const CUSTOM_FEE_OUTSIDE_NUMERIC_RANGE = 241;
    /**
     **
     * A royalty cannot exceed the total fungible value exchanged for an NFT
     *
     * Generated from protobuf enum <code>ROYALTY_FRACTION_CANNOT_EXCEED_ONE = 242;</code>
     */
    const ROYALTY_FRACTION_CANNOT_EXCEED_ONE = 242;
    /**
     **
     * Each fractional custom fee must have its maximum_amount, if specified, at least its minimum_amount
     *
     * Generated from protobuf enum <code>FRACTIONAL_FEE_MAX_AMOUNT_LESS_THAN_MIN_AMOUNT = 243;</code>
     */
    const FRACTIONAL_FEE_MAX_AMOUNT_LESS_THAN_MIN_AMOUNT = 243;
    /**
     **
     * A fee schedule update tried to clear the custom fees from a token whose fee schedule was already empty
     *
     * Generated from protobuf enum <code>CUSTOM_SCHEDULE_ALREADY_HAS_NO_FEES = 244;</code>
     */
    const CUSTOM_SCHEDULE_ALREADY_HAS_NO_FEES = 244;
    /**
     **
     * Only tokens of type FUNGIBLE_COMMON can be used to as fee schedule denominations
     *
     * Generated from protobuf enum <code>CUSTOM_FEE_DENOMINATION_MUST_BE_FUNGIBLE_COMMON = 245;</code>
     */
    const CUSTOM_FEE_DENOMINATION_MUST_BE_FUNGIBLE_COMMON = 245;
    /**
     **
     * Only tokens of type FUNGIBLE_COMMON can have fractional fees
     *
     * Generated from protobuf enum <code>CUSTOM_FRACTIONAL_FEE_ONLY_ALLOWED_FOR_FUNGIBLE_COMMON = 246;</code>
     */
    const CUSTOM_FRACTIONAL_FEE_ONLY_ALLOWED_FOR_FUNGIBLE_COMMON = 246;
    /**
     **
     * The provided custom fee schedule key was invalid
     *
     * Generated from protobuf enum <code>INVALID_CUSTOM_FEE_SCHEDULE_KEY = 247;</code>
     */
    const INVALID_CUSTOM_FEE_SCHEDULE_KEY = 247;
    /**
     **
     * The requested token mint metadata was invalid
     *
     * Generated from protobuf enum <code>INVALID_TOKEN_MINT_METADATA = 248;</code>
     */
    const INVALID_TOKEN_MINT_METADATA = 248;
    /**
     **
     * The requested token burn metadata was invalid
     *
     * Generated from protobuf enum <code>INVALID_TOKEN_BURN_METADATA = 249;</code>
     */
    const INVALID_TOKEN_BURN_METADATA = 249;
    /**
     **
     * The treasury for a unique token cannot be changed until it owns no NFTs
     *
     * Generated from protobuf enum <code>CURRENT_TREASURY_STILL_OWNS_NFTS = 250;</code>
     */
    const CURRENT_TREASURY_STILL_OWNS_NFTS = 250;
    /**
     **
     * An account cannot be dissociated from a unique token if it owns NFTs for the token
     *
     * Generated from protobuf enum <code>ACCOUNT_STILL_OWNS_NFTS = 251;</code>
     */
    const ACCOUNT_STILL_OWNS_NFTS = 251;
    /**
     **
     * A NFT can only be burned when owned by the unique token's treasury
     *
     * Generated from protobuf enum <code>TREASURY_MUST_OWN_BURNED_NFT = 252;</code>
     */
    const TREASURY_MUST_OWN_BURNED_NFT = 252;
    /**
     **
     * An account did not own the NFT to be wiped
     *
     * Generated from protobuf enum <code>ACCOUNT_DOES_NOT_OWN_WIPED_NFT = 253;</code>
     */
    const ACCOUNT_DOES_NOT_OWN_WIPED_NFT = 253;
    /**
     **
     * An AccountAmount token transfers list referenced a token type other than FUNGIBLE_COMMON
     *
     * Generated from protobuf enum <code>ACCOUNT_AMOUNT_TRANSFERS_ONLY_ALLOWED_FOR_FUNGIBLE_COMMON = 254;</code>
     */
    const ACCOUNT_AMOUNT_TRANSFERS_ONLY_ALLOWED_FOR_FUNGIBLE_COMMON = 254;
    /**
     **
     * All the NFTs allowed in the current price regime have already been minted
     *
     * Generated from protobuf enum <code>MAX_NFTS_IN_PRICE_REGIME_HAVE_BEEN_MINTED = 255;</code>
     */
    const MAX_NFTS_IN_PRICE_REGIME_HAVE_BEEN_MINTED = 255;
    /**
     **
     * The payer account has been marked as deleted
     *
     * Generated from protobuf enum <code>PAYER_ACCOUNT_DELETED = 256;</code>
     */
    const PAYER_ACCOUNT_DELETED = 256;
    /**
     **
     * The reference chain of custom fees for a transferred token exceeded the maximum length of 2
     *
     * Generated from protobuf enum <code>CUSTOM_FEE_CHARGING_EXCEEDED_MAX_RECURSION_DEPTH = 257;</code>
     */
    const CUSTOM_FEE_CHARGING_EXCEEDED_MAX_RECURSION_DEPTH = 257;
    /**
     **
     * More than 20 balance adjustments were to satisfy a CryptoTransfer and its implied custom fee payments
     *
     * Generated from protobuf enum <code>CUSTOM_FEE_CHARGING_EXCEEDED_MAX_ACCOUNT_AMOUNTS = 258;</code>
     */
    const CUSTOM_FEE_CHARGING_EXCEEDED_MAX_ACCOUNT_AMOUNTS = 258;
    /**
     **
     * The sender account in the token transfer transaction could not afford a custom fee
     *
     * Generated from protobuf enum <code>INSUFFICIENT_SENDER_ACCOUNT_BALANCE_FOR_CUSTOM_FEE = 259;</code>
     */
    const INSUFFICIENT_SENDER_ACCOUNT_BALANCE_FOR_CUSTOM_FEE = 259;
    /**
     **
     * Currently no more than 4,294,967,295 NFTs may be minted for a given unique token type
     *
     * Generated from protobuf enum <code>SERIAL_NUMBER_LIMIT_REACHED = 260;</code>
     */
    const SERIAL_NUMBER_LIMIT_REACHED = 260;
    /**
     **
     * Only tokens of type NON_FUNGIBLE_UNIQUE can have royalty fees
     *
     * Generated from protobuf enum <code>CUSTOM_ROYALTY_FEE_ONLY_ALLOWED_FOR_NON_FUNGIBLE_UNIQUE = 261;</code>
     */
    const CUSTOM_ROYALTY_FEE_ONLY_ALLOWED_FOR_NON_FUNGIBLE_UNIQUE = 261;
    /**
     **
     * The account has reached the limit on the automatic associations count.
     *
     * Generated from protobuf enum <code>NO_REMAINING_AUTOMATIC_ASSOCIATIONS = 262;</code>
     */
    const NO_REMAINING_AUTOMATIC_ASSOCIATIONS = 262;
    /**
     **
     * Already existing automatic associations are more than the new maximum automatic associations.
     *
     * Generated from protobuf enum <code>EXISTING_AUTOMATIC_ASSOCIATIONS_EXCEED_GIVEN_LIMIT = 263;</code>
     */
    const EXISTING_AUTOMATIC_ASSOCIATIONS_EXCEED_GIVEN_LIMIT = 263;
    /**
     **
     * Cannot set the number of automatic associations for an account more than the maximum allowed
     * token associations <tt>tokens.maxPerAccount</tt>.
     *
     * Generated from protobuf enum <code>REQUESTED_NUM_AUTOMATIC_ASSOCIATIONS_EXCEEDS_ASSOCIATION_LIMIT = 264;</code>
     */
    const REQUESTED_NUM_AUTOMATIC_ASSOCIATIONS_EXCEEDS_ASSOCIATION_LIMIT = 264;
    /**
     **
     * Token is paused. This Token cannot be a part of any kind of Transaction until unpaused.
     *
     * Generated from protobuf enum <code>TOKEN_IS_PAUSED = 265;</code>
     */
    const TOKEN_IS_PAUSED = 265;
    /**
     **
     * Pause key is not set on token
     *
     * Generated from protobuf enum <code>TOKEN_HAS_NO_PAUSE_KEY = 266;</code>
     */
    const TOKEN_HAS_NO_PAUSE_KEY = 266;
    /**
     **
     * The provided pause key was invalid
     *
     * Generated from protobuf enum <code>INVALID_PAUSE_KEY = 267;</code>
     */
    const INVALID_PAUSE_KEY = 267;
    /**
     **
     * The update file in a freeze transaction body must exist.
     *
     * Generated from protobuf enum <code>FREEZE_UPDATE_FILE_DOES_NOT_EXIST = 268;</code>
     */
    const FREEZE_UPDATE_FILE_DOES_NOT_EXIST = 268;
    /**
     **
     * The hash of the update file in a freeze transaction body must match the in-memory hash.
     *
     * Generated from protobuf enum <code>FREEZE_UPDATE_FILE_HASH_DOES_NOT_MATCH = 269;</code>
     */
    const FREEZE_UPDATE_FILE_HASH_DOES_NOT_MATCH = 269;
    /**
     **
     * A FREEZE_UPGRADE transaction was handled with no previous update prepared.
     *
     * Generated from protobuf enum <code>NO_UPGRADE_HAS_BEEN_PREPARED = 270;</code>
     */
    const NO_UPGRADE_HAS_BEEN_PREPARED = 270;
    /**
     **
     * A FREEZE_ABORT transaction was handled with no scheduled freeze.
     *
     * Generated from protobuf enum <code>NO_FREEZE_IS_SCHEDULED = 271;</code>
     */
    const NO_FREEZE_IS_SCHEDULED = 271;
    /**
     **
     * The update file hash when handling a FREEZE_UPGRADE transaction differs from the file
     * hash at the time of handling the PREPARE_UPGRADE transaction.
     *
     * Generated from protobuf enum <code>UPDATE_FILE_HASH_CHANGED_SINCE_PREPARE_UPGRADE = 272;</code>
     */
    const UPDATE_FILE_HASH_CHANGED_SINCE_PREPARE_UPGRADE = 272;
    /**
     **
     * The given freeze start time was in the (consensus) past.
     *
     * Generated from protobuf enum <code>FREEZE_START_TIME_MUST_BE_FUTURE = 273;</code>
     */
    const FREEZE_START_TIME_MUST_BE_FUTURE = 273;
    /**
     **
     * The prepared update file cannot be updated or appended until either the upgrade has
     * been completed, or a FREEZE_ABORT has been handled.
     *
     * Generated from protobuf enum <code>PREPARED_UPDATE_FILE_IS_IMMUTABLE = 274;</code>
     */
    const PREPARED_UPDATE_FILE_IS_IMMUTABLE = 274;
    /**
     **
     * Once a freeze is scheduled, it must be aborted before any other type of freeze can
     * can be performed.
     *
     * Generated from protobuf enum <code>FREEZE_ALREADY_SCHEDULED = 275;</code>
     */
    const FREEZE_ALREADY_SCHEDULED = 275;
    /**
     **
     * If an NMT upgrade has been prepared, the following operation must be a FREEZE_UPGRADE.
     * (To issue a FREEZE_ONLY, submit a FREEZE_ABORT first.)
     *
     * Generated from protobuf enum <code>FREEZE_UPGRADE_IN_PROGRESS = 276;</code>
     */
    const FREEZE_UPGRADE_IN_PROGRESS = 276;
    /**
     **
     * If an NMT upgrade has been prepared, the subsequent FREEZE_UPGRADE transaction must
     * confirm the id of the file to be used in the upgrade.
     *
     * Generated from protobuf enum <code>UPDATE_FILE_ID_DOES_NOT_MATCH_PREPARED = 277;</code>
     */
    const UPDATE_FILE_ID_DOES_NOT_MATCH_PREPARED = 277;
    /**
     **
     * If an NMT upgrade has been prepared, the subsequent FREEZE_UPGRADE transaction must
     * confirm the hash of the file to be used in the upgrade.
     *
     * Generated from protobuf enum <code>UPDATE_FILE_HASH_DOES_NOT_MATCH_PREPARED = 278;</code>
     */
    const UPDATE_FILE_HASH_DOES_NOT_MATCH_PREPARED = 278;
    /**
     **
     * Consensus throttle did not allow execution of this transaction. System is throttled at
     * consensus level.
     *
     * Generated from protobuf enum <code>CONSENSUS_GAS_EXHAUSTED = 279;</code>
     */
    const CONSENSUS_GAS_EXHAUSTED = 279;
    /**
     **
     * A precompiled contract succeeded, but was later reverted.
     *
     * Generated from protobuf enum <code>REVERTED_SUCCESS = 280;</code>
     */
    const REVERTED_SUCCESS = 280;
    /**
     **
     * All contract storage allocated to the current price regime has been consumed.
     *
     * Generated from protobuf enum <code>MAX_STORAGE_IN_PRICE_REGIME_HAS_BEEN_USED = 281;</code>
     */
    const MAX_STORAGE_IN_PRICE_REGIME_HAS_BEEN_USED = 281;
    /**
     **
     * An alias used in a CryptoTransfer transaction is not the serialization of a primitive Key
     * message--that is, a Key with a single Ed25519 or ECDSA(secp256k1) public key and no
     * unknown protobuf fields.
     *
     * Generated from protobuf enum <code>INVALID_ALIAS_KEY = 282;</code>
     */
    const INVALID_ALIAS_KEY = 282;
    /**
     **
     * A fungible token transfer expected a different number of decimals than the involved
     * type actually has.
     *
     * Generated from protobuf enum <code>UNEXPECTED_TOKEN_DECIMALS = 283;</code>
     */
    const UNEXPECTED_TOKEN_DECIMALS = 283;
    /**
     **
     * The proxy account id is invalid or does not exist.
     *
     * Generated from protobuf enum <code>INVALID_PROXY_ACCOUNT_ID = 284 [deprecated = true];</code>
     */
    const INVALID_PROXY_ACCOUNT_ID = 284;
    /**
     **
     * The transfer account id in CryptoDelete transaction is invalid or does not exist.
     *
     * Generated from protobuf enum <code>INVALID_TRANSFER_ACCOUNT_ID = 285;</code>
     */
    const INVALID_TRANSFER_ACCOUNT_ID = 285;
    /**
     **
     * The fee collector account id in TokenFeeScheduleUpdate is invalid or does not exist.
     *
     * Generated from protobuf enum <code>INVALID_FEE_COLLECTOR_ACCOUNT_ID = 286;</code>
     */
    const INVALID_FEE_COLLECTOR_ACCOUNT_ID = 286;
    /**
     **
     * The alias already set on an account cannot be updated using CryptoUpdate transaction.
     *
     * Generated from protobuf enum <code>ALIAS_IS_IMMUTABLE = 287;</code>
     */
    const ALIAS_IS_IMMUTABLE = 287;
    /**
     **
     * An approved allowance specifies a spender account that is the same as the hbar/token
     * owner account.
     *
     * Generated from protobuf enum <code>SPENDER_ACCOUNT_SAME_AS_OWNER = 288;</code>
     */
    const SPENDER_ACCOUNT_SAME_AS_OWNER = 288;
    /**
     **
     * The establishment or adjustment of an approved allowance cause the token allowance
     * to exceed the token maximum supply.
     *
     * Generated from protobuf enum <code>AMOUNT_EXCEEDS_TOKEN_MAX_SUPPLY = 289;</code>
     */
    const AMOUNT_EXCEEDS_TOKEN_MAX_SUPPLY = 289;
    /**
     **
     * The specified amount for an approved allowance cannot be negative.
     *
     * Generated from protobuf enum <code>NEGATIVE_ALLOWANCE_AMOUNT = 290;</code>
     */
    const NEGATIVE_ALLOWANCE_AMOUNT = 290;
    /**
     **
     * The approveForAll flag cannot be set for a fungible token.
     *
     * Generated from protobuf enum <code>CANNOT_APPROVE_FOR_ALL_FUNGIBLE_COMMON = 291 [deprecated = true];</code>
     */
    const CANNOT_APPROVE_FOR_ALL_FUNGIBLE_COMMON = 291;
    /**
     **
     * The spender does not have an existing approved allowance with the hbar/token owner.
     *
     * Generated from protobuf enum <code>SPENDER_DOES_NOT_HAVE_ALLOWANCE = 292;</code>
     */
    const SPENDER_DOES_NOT_HAVE_ALLOWANCE = 292;
    /**
     **
     * The transfer amount exceeds the current approved allowance for the spender account.
     *
     * Generated from protobuf enum <code>AMOUNT_EXCEEDS_ALLOWANCE = 293;</code>
     */
    const AMOUNT_EXCEEDS_ALLOWANCE = 293;
    /**
     **
     * The payer account of an approveAllowances or adjustAllowance transaction is attempting
     * to go beyond the maximum allowed number of allowances.
     *
     * Generated from protobuf enum <code>MAX_ALLOWANCES_EXCEEDED = 294;</code>
     */
    const MAX_ALLOWANCES_EXCEEDED = 294;
    /**
     **
     * No allowances have been specified in the approval transaction.
     *
     * Generated from protobuf enum <code>EMPTY_ALLOWANCES = 295;</code>
     */
    const EMPTY_ALLOWANCES = 295;
    /**
     **
     * Spender is repeated more than once in Crypto or Token or NFT allowance lists in a single
     * CryptoApproveAllowance transaction.
     *
     * Generated from protobuf enum <code>SPENDER_ACCOUNT_REPEATED_IN_ALLOWANCES = 296 [deprecated = true];</code>
     */
    const SPENDER_ACCOUNT_REPEATED_IN_ALLOWANCES = 296;
    /**
     **
     * Serial numbers are repeated in nft allowance for a single spender account
     *
     * Generated from protobuf enum <code>REPEATED_SERIAL_NUMS_IN_NFT_ALLOWANCES = 297 [deprecated = true];</code>
     */
    const REPEATED_SERIAL_NUMS_IN_NFT_ALLOWANCES = 297;
    /**
     **
     * Fungible common token used in NFT allowances
     *
     * Generated from protobuf enum <code>FUNGIBLE_TOKEN_IN_NFT_ALLOWANCES = 298;</code>
     */
    const FUNGIBLE_TOKEN_IN_NFT_ALLOWANCES = 298;
    /**
     **
     * Non fungible token used in fungible token allowances
     *
     * Generated from protobuf enum <code>NFT_IN_FUNGIBLE_TOKEN_ALLOWANCES = 299;</code>
     */
    const NFT_IN_FUNGIBLE_TOKEN_ALLOWANCES = 299;
    /**
     **
     * The account id specified as the owner is invalid or does not exist.
     *
     * Generated from protobuf enum <code>INVALID_ALLOWANCE_OWNER_ID = 300;</code>
     */
    const INVALID_ALLOWANCE_OWNER_ID = 300;
    /**
     **
     * The account id specified as the spender is invalid or does not exist.
     *
     * Generated from protobuf enum <code>INVALID_ALLOWANCE_SPENDER_ID = 301;</code>
     */
    const INVALID_ALLOWANCE_SPENDER_ID = 301;
    /**
     **
     * [Deprecated] If the CryptoDeleteAllowance transaction has repeated crypto or token or Nft allowances to delete.
     *
     * Generated from protobuf enum <code>REPEATED_ALLOWANCES_TO_DELETE = 302 [deprecated = true];</code>
     */
    const REPEATED_ALLOWANCES_TO_DELETE = 302;
    /**
     **
     * If the account Id specified as the delegating spender is invalid or does not exist.
     *
     * Generated from protobuf enum <code>INVALID_DELEGATING_SPENDER = 303;</code>
     */
    const INVALID_DELEGATING_SPENDER = 303;
    /**
     **
     * The delegating Spender cannot grant approveForAll allowance on a NFT token type for another spender.
     *
     * Generated from protobuf enum <code>DELEGATING_SPENDER_CANNOT_GRANT_APPROVE_FOR_ALL = 304;</code>
     */
    const DELEGATING_SPENDER_CANNOT_GRANT_APPROVE_FOR_ALL = 304;
    /**
     **
     * The delegating Spender cannot grant allowance on a NFT serial for another spender as it doesnt not have approveForAll
     * granted on token-owner.
     *
     * Generated from protobuf enum <code>DELEGATING_SPENDER_DOES_NOT_HAVE_APPROVE_FOR_ALL = 305;</code>
     */
    const DELEGATING_SPENDER_DOES_NOT_HAVE_APPROVE_FOR_ALL = 305;
    /**
     **
     * The scheduled transaction could not be created because it's expiration_time was too far in the future.
     *
     * Generated from protobuf enum <code>SCHEDULE_EXPIRATION_TIME_TOO_FAR_IN_FUTURE = 306;</code>
     */
    const SCHEDULE_EXPIRATION_TIME_TOO_FAR_IN_FUTURE = 306;
    /**
     **
     * The scheduled transaction could not be created because it's expiration_time was less than or equal to the consensus time.
     *
     * Generated from protobuf enum <code>SCHEDULE_EXPIRATION_TIME_MUST_BE_HIGHER_THAN_CONSENSUS_TIME = 307;</code>
     */
    const SCHEDULE_EXPIRATION_TIME_MUST_BE_HIGHER_THAN_CONSENSUS_TIME = 307;
    /**
     **
     * The scheduled transaction could not be created because it would cause throttles to be violated on the specified expiration_time.
     *
     * Generated from protobuf enum <code>SCHEDULE_FUTURE_THROTTLE_EXCEEDED = 308;</code>
     */
    const SCHEDULE_FUTURE_THROTTLE_EXCEEDED = 308;
    /**
     **
     * The scheduled transaction could not be created because it would cause the gas limit to be violated on the specified expiration_time.
     *
     * Generated from protobuf enum <code>SCHEDULE_FUTURE_GAS_LIMIT_EXCEEDED = 309;</code>
     */
    const SCHEDULE_FUTURE_GAS_LIMIT_EXCEEDED = 309;
    /**
     **
     * The ethereum transaction either failed parsing or failed signature validation, or some other EthereumTransaction error not covered by another response code.
     *
     * Generated from protobuf enum <code>INVALID_ETHEREUM_TRANSACTION = 310;</code>
     */
    const INVALID_ETHEREUM_TRANSACTION = 310;
    /**
     **
     * EthereumTransaction was signed against a chainId that this network does not support.
     *
     * Generated from protobuf enum <code>WRONG_CHAIN_ID = 311;</code>
     */
    const WRONG_CHAIN_ID = 311;
    /**
     **
     * This transaction specified an ethereumNonce that is not the current ethereumNonce of the account.
     *
     * Generated from protobuf enum <code>WRONG_NONCE = 312;</code>
     */
    const WRONG_NONCE = 312;
    /**
     **
     * The ethereum transaction specified an access list, which the network does not support.
     *
     * Generated from protobuf enum <code>ACCESS_LIST_UNSUPPORTED = 313;</code>
     */
    const ACCESS_LIST_UNSUPPORTED = 313;
    /**
     **
     * A schedule being signed or deleted has passed it's expiration date and is pending execution if needed and then expiration.
     *
     * Generated from protobuf enum <code>SCHEDULE_PENDING_EXPIRATION = 314;</code>
     */
    const SCHEDULE_PENDING_EXPIRATION = 314;
    /**
     **
     * A selfdestruct or ContractDelete targeted a contract that is a token treasury.
     *
     * Generated from protobuf enum <code>CONTRACT_IS_TOKEN_TREASURY = 315;</code>
     */
    const CONTRACT_IS_TOKEN_TREASURY = 315;
    /**
     **
     * A selfdestruct or ContractDelete targeted a contract with non-zero token balances.
     *
     * Generated from protobuf enum <code>CONTRACT_HAS_NON_ZERO_TOKEN_BALANCES = 316;</code>
     */
    const CONTRACT_HAS_NON_ZERO_TOKEN_BALANCES = 316;
    /**
     **
     * A contract referenced by a transaction is "detached"; that is, expired and lacking any
     * hbar funds for auto-renewal payment---but still within its post-expiry grace period.
     *
     * Generated from protobuf enum <code>CONTRACT_EXPIRED_AND_PENDING_REMOVAL = 317;</code>
     */
    const CONTRACT_EXPIRED_AND_PENDING_REMOVAL = 317;
    /**
     **
     * A ContractUpdate requested removal of a contract's auto-renew account, but that contract has
     * no auto-renew account.
     *
     * Generated from protobuf enum <code>CONTRACT_HAS_NO_AUTO_RENEW_ACCOUNT = 318;</code>
     */
    const CONTRACT_HAS_NO_AUTO_RENEW_ACCOUNT = 318;
    /**
     **
     * A delete transaction submitted via HAPI set permanent_removal=true
     *
     * Generated from protobuf enum <code>PERMANENT_REMOVAL_REQUIRES_SYSTEM_INITIATION = 319;</code>
     */
    const PERMANENT_REMOVAL_REQUIRES_SYSTEM_INITIATION = 319;
    /**
     * A CryptoCreate or ContractCreate used the deprecated proxyAccountID field.
     *
     * Generated from protobuf enum <code>PROXY_ACCOUNT_ID_FIELD_IS_DEPRECATED = 320;</code>
     */
    const PROXY_ACCOUNT_ID_FIELD_IS_DEPRECATED = 320;
    /**
     **
     * An account set the staked_account_id to itself in CryptoUpdate or ContractUpdate transactions.
     *
     * Generated from protobuf enum <code>SELF_STAKING_IS_NOT_ALLOWED = 321;</code>
     */
    const SELF_STAKING_IS_NOT_ALLOWED = 321;
    /**
     **
     * The staking account id or staking node id given is invalid or does not exist.
     *
     * Generated from protobuf enum <code>INVALID_STAKING_ID = 322;</code>
     */
    const INVALID_STAKING_ID = 322;
    /**
     **
     * Native staking, while implemented, has not yet enabled by the council.
     *
     * Generated from protobuf enum <code>STAKING_NOT_ENABLED = 323;</code>
     */
    const STAKING_NOT_ENABLED = 323;
    /**
     **
     * The range provided in UtilPrng transaction is negative.
     *
     * Generated from protobuf enum <code>INVALID_PRNG_RANGE = 324;</code>
     */
    const INVALID_PRNG_RANGE = 324;
    /**
     **
     * The maximum number of entities allowed in the current price regime have been created.
     *
     * Generated from protobuf enum <code>MAX_ENTITIES_IN_PRICE_REGIME_HAVE_BEEN_CREATED = 325;</code>
     */
    const MAX_ENTITIES_IN_PRICE_REGIME_HAVE_BEEN_CREATED = 325;
    /**
     **
     * The full prefix signature for precompile is not valid
     *
     * Generated from protobuf enum <code>INVALID_FULL_PREFIX_SIGNATURE_FOR_PRECOMPILE = 326;</code>
     */
    const INVALID_FULL_PREFIX_SIGNATURE_FOR_PRECOMPILE = 326;
    /**
     **
     * The combined balances of a contract and its auto-renew account (if any) did not cover
     * the rent charged for net new storage used in a transaction.
     *
     * Generated from protobuf enum <code>INSUFFICIENT_BALANCES_FOR_STORAGE_RENT = 327;</code>
     */
    const INSUFFICIENT_BALANCES_FOR_STORAGE_RENT = 327;
    /**
     **
     * A contract transaction tried to use more than the allowed number of child records, via
     * either system contract records or internal contract creations.
     *
     * Generated from protobuf enum <code>MAX_CHILD_RECORDS_EXCEEDED = 328;</code>
     */
    const MAX_CHILD_RECORDS_EXCEEDED = 328;
    /**
     **
     * The combined balances of a contract and its auto-renew account (if any) or balance of an account did not cover
     * the auto-renewal fees in a transaction.
     *
     * Generated from protobuf enum <code>INSUFFICIENT_BALANCES_FOR_RENEWAL_FEES = 329;</code>
     */
    const INSUFFICIENT_BALANCES_FOR_RENEWAL_FEES = 329;
    /**
     **
     * A transaction's protobuf message includes unknown fields; could mean that a client
     * expects not-yet-released functionality to be available.
     *
     * Generated from protobuf enum <code>TRANSACTION_HAS_UNKNOWN_FIELDS = 330;</code>
     */
    const TRANSACTION_HAS_UNKNOWN_FIELDS = 330;
    /**
     **
     * The account cannot be modified. Account's key is not set
     *
     * Generated from protobuf enum <code>ACCOUNT_IS_IMMUTABLE = 331;</code>
     */
    const ACCOUNT_IS_IMMUTABLE = 331;
    /**
     **
     * An alias that is assigned to an account or contract cannot be assigned to another account or contract.
     *
     * Generated from protobuf enum <code>ALIAS_ALREADY_ASSIGNED = 332;</code>
     */
    const ALIAS_ALREADY_ASSIGNED = 332;
    /**
     **
     * A provided metadata key was invalid. Verification includes, for example, checking the size of Ed25519 and ECDSA(secp256k1) public keys.
     *
     * Generated from protobuf enum <code>INVALID_METADATA_KEY = 333;</code>
     */
    const INVALID_METADATA_KEY = 333;
    /**
     **
     * Metadata key is not set on token
     *
     * Generated from protobuf enum <code>TOKEN_HAS_NO_METADATA_KEY = 334;</code>
     */
    const TOKEN_HAS_NO_METADATA_KEY = 334;
    /**
     **
     * Token Metadata is not provided
     *
     * Generated from protobuf enum <code>MISSING_TOKEN_METADATA = 335;</code>
     */
    const MISSING_TOKEN_METADATA = 335;
    /**
     **
     * NFT serial numbers are missing in the TokenUpdateNftsTransactionBody
     *
     * Generated from protobuf enum <code>MISSING_SERIAL_NUMBERS = 336;</code>
     */
    const MISSING_SERIAL_NUMBERS = 336;
    /**
     **
     * Admin key is not set on token
     *
     * Generated from protobuf enum <code>TOKEN_HAS_NO_ADMIN_KEY = 337;</code>
     */
    const TOKEN_HAS_NO_ADMIN_KEY = 337;
    /**
     **
     * A transaction failed because the consensus node identified is
     * deleted from the address book.
     *
     * Generated from protobuf enum <code>NODE_DELETED = 338;</code>
     */
    const NODE_DELETED = 338;
    /**
     **
     * A transaction failed because the consensus node identified is not valid or
     * does not exist in state.
     *
     * Generated from protobuf enum <code>INVALID_NODE_ID = 339;</code>
     */
    const INVALID_NODE_ID = 339;
    /**
     **
     * A transaction failed because one or more entries in the list of
     * service endpoints for the `gossip_endpoint` field is invalid.<br/>
     * The most common cause for this response is a service endpoint that has
     * the domain name (DNS) set rather than address and port.
     *
     * Generated from protobuf enum <code>INVALID_GOSSIP_ENDPOINT = 340;</code>
     */
    const INVALID_GOSSIP_ENDPOINT = 340;
    /**
     **
     * A transaction failed because the node account identifier provided
     * does not exist or is not valid.<br/>
     * One common source of this error is providing a node account identifier
     * using the "alias" form rather than "numeric" form.
     * It is also used for atomic batch transaction for child transaction if the node account id is not 0.0.0.
     *
     * Generated from protobuf enum <code>INVALID_NODE_ACCOUNT_ID = 341;</code>
     */
    const INVALID_NODE_ACCOUNT_ID = 341;
    /**
     **
     * A transaction failed because the description field cannot be encoded
     * as UTF-8 or is more than 100 bytes when encoded.
     *
     * Generated from protobuf enum <code>INVALID_NODE_DESCRIPTION = 342;</code>
     */
    const INVALID_NODE_DESCRIPTION = 342;
    /**
     **
     * A transaction failed because one or more entries in the list of
     * service endpoints for the `service_endpoint` field is invalid.<br/>
     * The most common cause for this response is a service endpoint that has
     * the domain name (DNS) set rather than address and port.
     *
     * Generated from protobuf enum <code>INVALID_SERVICE_ENDPOINT = 343;</code>
     */
    const INVALID_SERVICE_ENDPOINT = 343;
    /**
     **
     * A transaction failed because the TLS certificate provided for the
     * node is missing or invalid.
     * <p>
     * #### Probable Causes
     * The certificate MUST be a TLS certificate of a type permitted for gossip
     * signatures.<br/>
     * The value presented MUST be a UTF-8 NFKD encoding of the TLS
     * certificate.<br/>
     * The certificate encoded MUST be in PEM format.<br/>
     * The `gossip_ca_certificate` field is REQUIRED and MUST NOT be empty.
     *
     * Generated from protobuf enum <code>INVALID_GOSSIP_CA_CERTIFICATE = 344;</code>
     */
    const INVALID_GOSSIP_CA_CERTIFICATE = 344;
    /**
     **
     * A transaction failed because the hash provided for the gRPC certificate
     * is present but invalid.
     * <p>
     * #### Probable Causes
     * The `grpc_certificate_hash` MUST be a SHA-384 hash.<br/>
     * The input hashed MUST be a UTF-8 NFKD encoding of the actual TLS
     * certificate.<br/>
     * The certificate to be encoded MUST be in PEM format.
     *
     * Generated from protobuf enum <code>INVALID_GRPC_CERTIFICATE = 345;</code>
     */
    const INVALID_GRPC_CERTIFICATE = 345;
    /**
     **
     * The maximum automatic associations value is not valid.<br/>
     * The most common cause for this error is a value less than `-1`.
     *
     * Generated from protobuf enum <code>INVALID_MAX_AUTO_ASSOCIATIONS = 346;</code>
     */
    const INVALID_MAX_AUTO_ASSOCIATIONS = 346;
    /**
     **
     * The maximum number of nodes allowed in the address book have been created.
     *
     * Generated from protobuf enum <code>MAX_NODES_CREATED = 347;</code>
     */
    const MAX_NODES_CREATED = 347;
    /**
     **
     * In ServiceEndpoint, domain_name and ipAddressV4 are mutually exclusive
     *
     * Generated from protobuf enum <code>IP_FQDN_CANNOT_BE_SET_FOR_SAME_ENDPOINT = 348;</code>
     */
    const IP_FQDN_CANNOT_BE_SET_FOR_SAME_ENDPOINT = 348;
    /**
     **
     *  Fully qualified domain name is not allowed in gossip_endpoint
     *
     * Generated from protobuf enum <code>GOSSIP_ENDPOINT_CANNOT_HAVE_FQDN = 349;</code>
     */
    const GOSSIP_ENDPOINT_CANNOT_HAVE_FQDN = 349;
    /**
     **
     * In ServiceEndpoint, domain_name size too large
     *
     * Generated from protobuf enum <code>FQDN_SIZE_TOO_LARGE = 350;</code>
     */
    const FQDN_SIZE_TOO_LARGE = 350;
    /**
     **
     * ServiceEndpoint is invalid
     *
     * Generated from protobuf enum <code>INVALID_ENDPOINT = 351;</code>
     */
    const INVALID_ENDPOINT = 351;
    /**
     **
     * The number of gossip endpoints exceeds the limit
     *
     * Generated from protobuf enum <code>GOSSIP_ENDPOINTS_EXCEEDED_LIMIT = 352;</code>
     */
    const GOSSIP_ENDPOINTS_EXCEEDED_LIMIT = 352;
    /**
     **
     * The transaction attempted to use duplicate `TokenReference`.<br/>
     * This affects `TokenReject` attempting to reject same token reference more than once.
     *
     * Generated from protobuf enum <code>TOKEN_REFERENCE_REPEATED = 353;</code>
     */
    const TOKEN_REFERENCE_REPEATED = 353;
    /**
     **
     * The account id specified as the owner in `TokenReject` is invalid or does not exist.
     *
     * Generated from protobuf enum <code>INVALID_OWNER_ID = 354;</code>
     */
    const INVALID_OWNER_ID = 354;
    /**
     **
     * The transaction attempted to use more than the allowed number of `TokenReference`.
     *
     * Generated from protobuf enum <code>TOKEN_REFERENCE_LIST_SIZE_LIMIT_EXCEEDED = 355;</code>
     */
    const TOKEN_REFERENCE_LIST_SIZE_LIMIT_EXCEEDED = 355;
    /**
     **
     * The number of service endpoints exceeds the limit
     *
     * Generated from protobuf enum <code>SERVICE_ENDPOINTS_EXCEEDED_LIMIT = 356;</code>
     */
    const SERVICE_ENDPOINTS_EXCEEDED_LIMIT = 356;
    /**
     * The IPv4 address is invalid
     *
     * Generated from protobuf enum <code>INVALID_IPV4_ADDRESS = 357;</code>
     */
    const INVALID_IPV4_ADDRESS = 357;
    /**
     **
     * The transaction attempted to use empty `TokenReference` list.
     *
     * Generated from protobuf enum <code>EMPTY_TOKEN_REFERENCE_LIST = 358;</code>
     */
    const EMPTY_TOKEN_REFERENCE_LIST = 358;
    /**
     * The node account is not allowed to be updated
     *
     * Generated from protobuf enum <code>UPDATE_NODE_ACCOUNT_NOT_ALLOWED = 359;</code>
     */
    const UPDATE_NODE_ACCOUNT_NOT_ALLOWED = 359;
    /**
     * The token has no metadata or supply key
     *
     * Generated from protobuf enum <code>TOKEN_HAS_NO_METADATA_OR_SUPPLY_KEY = 360;</code>
     */
    const TOKEN_HAS_NO_METADATA_OR_SUPPLY_KEY = 360;
    /**
     **
     * The list of `PendingAirdropId`s is empty and MUST NOT be empty.
     *
     * Generated from protobuf enum <code>EMPTY_PENDING_AIRDROP_ID_LIST = 361;</code>
     */
    const EMPTY_PENDING_AIRDROP_ID_LIST = 361;
    /**
     **
     * A `PendingAirdropId` is repeated in a `claim` or `cancel` transaction.
     *
     * Generated from protobuf enum <code>PENDING_AIRDROP_ID_REPEATED = 362;</code>
     */
    const PENDING_AIRDROP_ID_REPEATED = 362;
    /**
     **
     * The number of `PendingAirdropId` values in the list exceeds the maximum
     * allowable number.
     *
     * Generated from protobuf enum <code>PENDING_AIRDROP_ID_LIST_TOO_LONG = 363;</code>
     */
    const PENDING_AIRDROP_ID_LIST_TOO_LONG = 363;
    /**
     * A pending airdrop already exists for the specified NFT.
     *
     * Generated from protobuf enum <code>PENDING_NFT_AIRDROP_ALREADY_EXISTS = 364;</code>
     */
    const PENDING_NFT_AIRDROP_ALREADY_EXISTS = 364;
    /**
     * The identified account is sender for one or more pending airdrop(s)
     * and cannot be deleted.
     * <p>
     * The requester SHOULD cancel all pending airdrops before resending
     * this transaction.
     *
     * Generated from protobuf enum <code>ACCOUNT_HAS_PENDING_AIRDROPS = 365;</code>
     */
    const ACCOUNT_HAS_PENDING_AIRDROPS = 365;
    /**
     **
     * Consensus throttle did not allow execution of this transaction.<br/>
     * The transaction should be retried after a modest delay.
     *
     * Generated from protobuf enum <code>THROTTLED_AT_CONSENSUS = 366;</code>
     */
    const THROTTLED_AT_CONSENSUS = 366;
    /**
     **
     * The provided pending airdrop id is invalid.<br/>
     * This pending airdrop MAY already be claimed or cancelled.
     * <p>
     * The client SHOULD query a mirror node to determine the current status of
     * the pending airdrop.
     *
     * Generated from protobuf enum <code>INVALID_PENDING_AIRDROP_ID = 367;</code>
     */
    const INVALID_PENDING_AIRDROP_ID = 367;
    /**
     **
     * The token to be airdropped has a fallback royalty fee and cannot be
     * sent or claimed via an airdrop transaction.
     *
     * Generated from protobuf enum <code>TOKEN_AIRDROP_WITH_FALLBACK_ROYALTY = 368;</code>
     */
    const TOKEN_AIRDROP_WITH_FALLBACK_ROYALTY = 368;
    /**
     **
     * This airdrop claim is for a pending airdrop with an invalid token.<br/>
     * The token might be deleted, or the sender may not have enough tokens
     * to fulfill the offer.
     * <p>
     * The client SHOULD query mirror node to determine the status of the
     * pending airdrop and whether the sender can fulfill the offer.
     *
     * Generated from protobuf enum <code>INVALID_TOKEN_IN_PENDING_AIRDROP = 369;</code>
     */
    const INVALID_TOKEN_IN_PENDING_AIRDROP = 369;
    /**
     **
     * A scheduled transaction configured to wait for expiry to execute was given
     * an expiry time at which there is already too many transactions scheduled to
     * expire; its creation must be retried with a different expiry.
     *
     * Generated from protobuf enum <code>SCHEDULE_EXPIRY_IS_BUSY = 370;</code>
     */
    const SCHEDULE_EXPIRY_IS_BUSY = 370;
    /**
     **
     * The provided gRPC certificate hash is invalid.
     *
     * Generated from protobuf enum <code>INVALID_GRPC_CERTIFICATE_HASH = 371;</code>
     */
    const INVALID_GRPC_CERTIFICATE_HASH = 371;
    /**
     **
     * A scheduled transaction configured to wait for expiry to execute was not
     * given an explicit expiration time.
     *
     * Generated from protobuf enum <code>MISSING_EXPIRY_TIME = 372;</code>
     */
    const MISSING_EXPIRY_TIME = 372;
    /**
     **
     * A contract operation attempted to schedule another transaction after it
     * had already scheduled a recursive contract call.
     *
     * Generated from protobuf enum <code>NO_SCHEDULING_ALLOWED_AFTER_SCHEDULED_RECURSION = 373;</code>
     */
    const NO_SCHEDULING_ALLOWED_AFTER_SCHEDULED_RECURSION = 373;
    /**
     **
     * A contract can schedule recursive calls a finite number of times (this is
     * approximately four million times with typical network configuration.)
     *
     * Generated from protobuf enum <code>RECURSIVE_SCHEDULING_LIMIT_REACHED = 374;</code>
     */
    const RECURSIVE_SCHEDULING_LIMIT_REACHED = 374;
    /**
     **
     * The target network is waiting for the ledger ID to be set, which is a
     * side effect of finishing the network's TSS construction.
     *
     * Generated from protobuf enum <code>WAITING_FOR_LEDGER_ID = 375;</code>
     */
    const WAITING_FOR_LEDGER_ID = 375;
    /**
     **
     * The provided fee exempt key list size exceeded the limit.
     *
     * Generated from protobuf enum <code>MAX_ENTRIES_FOR_FEE_EXEMPT_KEY_LIST_EXCEEDED = 376;</code>
     */
    const MAX_ENTRIES_FOR_FEE_EXEMPT_KEY_LIST_EXCEEDED = 376;
    /**
     **
     * The provided fee exempt key list contains duplicated keys.
     *
     * Generated from protobuf enum <code>FEE_EXEMPT_KEY_LIST_CONTAINS_DUPLICATED_KEYS = 377;</code>
     */
    const FEE_EXEMPT_KEY_LIST_CONTAINS_DUPLICATED_KEYS = 377;
    /**
     **
     * The provided fee exempt key list contains an invalid key.
     *
     * Generated from protobuf enum <code>INVALID_KEY_IN_FEE_EXEMPT_KEY_LIST = 378;</code>
     */
    const INVALID_KEY_IN_FEE_EXEMPT_KEY_LIST = 378;
    /**
     **
     * The provided fee schedule key contains an invalid key.
     *
     * Generated from protobuf enum <code>INVALID_FEE_SCHEDULE_KEY = 379;</code>
     */
    const INVALID_FEE_SCHEDULE_KEY = 379;
    /**
     **
     * If a fee schedule key is not set when we create a topic
     * we cannot add it on update.
     *
     * Generated from protobuf enum <code>FEE_SCHEDULE_KEY_CANNOT_BE_UPDATED = 380;</code>
     */
    const FEE_SCHEDULE_KEY_CANNOT_BE_UPDATED = 380;
    /**
     **
     * If the topic's custom fees are updated the topic SHOULD have a
     * fee schedule key
     *
     * Generated from protobuf enum <code>FEE_SCHEDULE_KEY_NOT_SET = 381;</code>
     */
    const FEE_SCHEDULE_KEY_NOT_SET = 381;
    /**
     **
     * The fee amount is exceeding the amount that the payer
     * is willing to pay.
     *
     * Generated from protobuf enum <code>MAX_CUSTOM_FEE_LIMIT_EXCEEDED = 382;</code>
     */
    const MAX_CUSTOM_FEE_LIMIT_EXCEEDED = 382;
    /**
     **
     * There are no corresponding custom fees.
     *
     * Generated from protobuf enum <code>NO_VALID_MAX_CUSTOM_FEE = 383;</code>
     */
    const NO_VALID_MAX_CUSTOM_FEE = 383;
    /**
     **
     * The provided list contains invalid max custom fee.
     *
     * Generated from protobuf enum <code>INVALID_MAX_CUSTOM_FEES = 384;</code>
     */
    const INVALID_MAX_CUSTOM_FEES = 384;
    /**
     **
     * The provided max custom fee list contains fees with
     * duplicate denominations.
     *
     * Generated from protobuf enum <code>DUPLICATE_DENOMINATION_IN_MAX_CUSTOM_FEE_LIST = 385;</code>
     */
    const DUPLICATE_DENOMINATION_IN_MAX_CUSTOM_FEE_LIST = 385;
    /**
     **
     * The provided max custom fee list contains fees with
     * duplicate account id.
     *
     * Generated from protobuf enum <code>DUPLICATE_ACCOUNT_ID_IN_MAX_CUSTOM_FEE_LIST = 386;</code>
     */
    const DUPLICATE_ACCOUNT_ID_IN_MAX_CUSTOM_FEE_LIST = 386;
    /**
     **
     * Max custom fees list is not supported for this operation.
     *
     * Generated from protobuf enum <code>MAX_CUSTOM_FEES_IS_NOT_SUPPORTED = 387;</code>
     */
    const MAX_CUSTOM_FEES_IS_NOT_SUPPORTED = 387;
    /**
     **
     * The list of batch transactions is empty
     *
     * Generated from protobuf enum <code>BATCH_LIST_EMPTY = 388;</code>
     */
    const BATCH_LIST_EMPTY = 388;
    /**
     **
     * The list of batch transactions contains duplicated transactions
     *
     * Generated from protobuf enum <code>BATCH_LIST_CONTAINS_DUPLICATES = 389;</code>
     */
    const BATCH_LIST_CONTAINS_DUPLICATES = 389;
    /**
     **
     * The list of batch transactions contains a transaction type that is
     * in the AtomicBatch blacklist as configured in the network.
     *
     * Generated from protobuf enum <code>BATCH_TRANSACTION_IN_BLACKLIST = 390;</code>
     */
    const BATCH_TRANSACTION_IN_BLACKLIST = 390;
    /**
     **
     * The inner transaction of a batch transaction failed
     *
     * Generated from protobuf enum <code>INNER_TRANSACTION_FAILED = 391;</code>
     */
    const INNER_TRANSACTION_FAILED = 391;
    /**
     **
     * The inner transaction of a batch transaction is missing a batch key
     *
     * Generated from protobuf enum <code>MISSING_BATCH_KEY = 392;</code>
     */
    const MISSING_BATCH_KEY = 392;
    /**
     **
     * The batch key is set for a non batch transaction
     *
     * Generated from protobuf enum <code>BATCH_KEY_SET_ON_NON_INNER_TRANSACTION = 393;</code>
     */
    const BATCH_KEY_SET_ON_NON_INNER_TRANSACTION = 393;
    /**
     **
     * The batch key is not valid
     *
     * Generated from protobuf enum <code>INVALID_BATCH_KEY = 394;</code>
     */
    const INVALID_BATCH_KEY = 394;
    /**
     **
     * The provided schedule expiry time is not configurable.
     *
     * Generated from protobuf enum <code>SCHEDULE_EXPIRY_NOT_CONFIGURABLE = 395;</code>
     */
    const SCHEDULE_EXPIRY_NOT_CONFIGURABLE = 395;
    /**
     **
     * The network just started at genesis and is creating system entities.
     *
     * Generated from protobuf enum <code>CREATING_SYSTEM_ENTITIES = 396;</code>
     */
    const CREATING_SYSTEM_ENTITIES = 396;
    /**
     **
     * The least common multiple of the throttle group's milliOpsPerSec is
     * too large and it's overflowing.
     *
     * Generated from protobuf enum <code>THROTTLE_GROUP_LCM_OVERFLOW = 397;</code>
     */
    const THROTTLE_GROUP_LCM_OVERFLOW = 397;
    /**
     **
     * Token airdrop transactions can not contain multiple senders for a single token.
     *
     * Generated from protobuf enum <code>AIRDROP_CONTAINS_MULTIPLE_SENDERS_FOR_A_TOKEN = 398;</code>
     */
    const AIRDROP_CONTAINS_MULTIPLE_SENDERS_FOR_A_TOKEN = 398;
    /**
     **
     * The GRPC proxy endpoint is set in the NodeCreate or NodeUpdate transaction,
     * which the network does not support.
     *
     * Generated from protobuf enum <code>GRPC_WEB_PROXY_NOT_SUPPORTED = 399;</code>
     */
    const GRPC_WEB_PROXY_NOT_SUPPORTED = 399;

    private static $valueToName = [
        self::OK => 'OK',
        self::INVALID_TRANSACTION => 'INVALID_TRANSACTION',
        self::PAYER_ACCOUNT_NOT_FOUND => 'PAYER_ACCOUNT_NOT_FOUND',
        self::INVALID_NODE_ACCOUNT => 'INVALID_NODE_ACCOUNT',
        self::TRANSACTION_EXPIRED => 'TRANSACTION_EXPIRED',
        self::INVALID_TRANSACTION_START => 'INVALID_TRANSACTION_START',
        self::INVALID_TRANSACTION_DURATION => 'INVALID_TRANSACTION_DURATION',
        self::INVALID_SIGNATURE => 'INVALID_SIGNATURE',
        self::MEMO_TOO_LONG => 'MEMO_TOO_LONG',
        self::INSUFFICIENT_TX_FEE => 'INSUFFICIENT_TX_FEE',
        self::INSUFFICIENT_PAYER_BALANCE => 'INSUFFICIENT_PAYER_BALANCE',
        self::DUPLICATE_TRANSACTION => 'DUPLICATE_TRANSACTION',
        self::BUSY => 'BUSY',
        self::NOT_SUPPORTED => 'NOT_SUPPORTED',
        self::INVALID_FILE_ID => 'INVALID_FILE_ID',
        self::INVALID_ACCOUNT_ID => 'INVALID_ACCOUNT_ID',
        self::INVALID_CONTRACT_ID => 'INVALID_CONTRACT_ID',
        self::INVALID_TRANSACTION_ID => 'INVALID_TRANSACTION_ID',
        self::RECEIPT_NOT_FOUND => 'RECEIPT_NOT_FOUND',
        self::RECORD_NOT_FOUND => 'RECORD_NOT_FOUND',
        self::INVALID_SOLIDITY_ID => 'INVALID_SOLIDITY_ID',
        self::UNKNOWN => 'UNKNOWN',
        self::SUCCESS => 'SUCCESS',
        self::FAIL_INVALID => 'FAIL_INVALID',
        self::FAIL_FEE => 'FAIL_FEE',
        self::FAIL_BALANCE => 'FAIL_BALANCE',
        self::KEY_REQUIRED => 'KEY_REQUIRED',
        self::BAD_ENCODING => 'BAD_ENCODING',
        self::INSUFFICIENT_ACCOUNT_BALANCE => 'INSUFFICIENT_ACCOUNT_BALANCE',
        self::INVALID_SOLIDITY_ADDRESS => 'INVALID_SOLIDITY_ADDRESS',
        self::INSUFFICIENT_GAS => 'INSUFFICIENT_GAS',
        self::CONTRACT_SIZE_LIMIT_EXCEEDED => 'CONTRACT_SIZE_LIMIT_EXCEEDED',
        self::LOCAL_CALL_MODIFICATION_EXCEPTION => 'LOCAL_CALL_MODIFICATION_EXCEPTION',
        self::CONTRACT_REVERT_EXECUTED => 'CONTRACT_REVERT_EXECUTED',
        self::CONTRACT_EXECUTION_EXCEPTION => 'CONTRACT_EXECUTION_EXCEPTION',
        self::INVALID_RECEIVING_NODE_ACCOUNT => 'INVALID_RECEIVING_NODE_ACCOUNT',
        self::MISSING_QUERY_HEADER => 'MISSING_QUERY_HEADER',
        self::ACCOUNT_UPDATE_FAILED => 'ACCOUNT_UPDATE_FAILED',
        self::INVALID_KEY_ENCODING => 'INVALID_KEY_ENCODING',
        self::NULL_SOLIDITY_ADDRESS => 'NULL_SOLIDITY_ADDRESS',
        self::CONTRACT_UPDATE_FAILED => 'CONTRACT_UPDATE_FAILED',
        self::INVALID_QUERY_HEADER => 'INVALID_QUERY_HEADER',
        self::INVALID_FEE_SUBMITTED => 'INVALID_FEE_SUBMITTED',
        self::INVALID_PAYER_SIGNATURE => 'INVALID_PAYER_SIGNATURE',
        self::KEY_NOT_PROVIDED => 'KEY_NOT_PROVIDED',
        self::INVALID_EXPIRATION_TIME => 'INVALID_EXPIRATION_TIME',
        self::NO_WACL_KEY => 'NO_WACL_KEY',
        self::FILE_CONTENT_EMPTY => 'FILE_CONTENT_EMPTY',
        self::INVALID_ACCOUNT_AMOUNTS => 'INVALID_ACCOUNT_AMOUNTS',
        self::EMPTY_TRANSACTION_BODY => 'EMPTY_TRANSACTION_BODY',
        self::INVALID_TRANSACTION_BODY => 'INVALID_TRANSACTION_BODY',
        self::INVALID_SIGNATURE_TYPE_MISMATCHING_KEY => 'INVALID_SIGNATURE_TYPE_MISMATCHING_KEY',
        self::INVALID_SIGNATURE_COUNT_MISMATCHING_KEY => 'INVALID_SIGNATURE_COUNT_MISMATCHING_KEY',
        self::EMPTY_LIVE_HASH_BODY => 'EMPTY_LIVE_HASH_BODY',
        self::EMPTY_LIVE_HASH => 'EMPTY_LIVE_HASH',
        self::EMPTY_LIVE_HASH_KEYS => 'EMPTY_LIVE_HASH_KEYS',
        self::INVALID_LIVE_HASH_SIZE => 'INVALID_LIVE_HASH_SIZE',
        self::EMPTY_QUERY_BODY => 'EMPTY_QUERY_BODY',
        self::EMPTY_LIVE_HASH_QUERY => 'EMPTY_LIVE_HASH_QUERY',
        self::LIVE_HASH_NOT_FOUND => 'LIVE_HASH_NOT_FOUND',
        self::ACCOUNT_ID_DOES_NOT_EXIST => 'ACCOUNT_ID_DOES_NOT_EXIST',
        self::LIVE_HASH_ALREADY_EXISTS => 'LIVE_HASH_ALREADY_EXISTS',
        self::INVALID_FILE_WACL => 'INVALID_FILE_WACL',
        self::SERIALIZATION_FAILED => 'SERIALIZATION_FAILED',
        self::TRANSACTION_OVERSIZE => 'TRANSACTION_OVERSIZE',
        self::TRANSACTION_TOO_MANY_LAYERS => 'TRANSACTION_TOO_MANY_LAYERS',
        self::CONTRACT_DELETED => 'CONTRACT_DELETED',
        self::PLATFORM_NOT_ACTIVE => 'PLATFORM_NOT_ACTIVE',
        self::KEY_PREFIX_MISMATCH => 'KEY_PREFIX_MISMATCH',
        self::PLATFORM_TRANSACTION_NOT_CREATED => 'PLATFORM_TRANSACTION_NOT_CREATED',
        self::INVALID_RENEWAL_PERIOD => 'INVALID_RENEWAL_PERIOD',
        self::INVALID_PAYER_ACCOUNT_ID => 'INVALID_PAYER_ACCOUNT_ID',
        self::ACCOUNT_DELETED => 'ACCOUNT_DELETED',
        self::FILE_DELETED => 'FILE_DELETED',
        self::ACCOUNT_REPEATED_IN_ACCOUNT_AMOUNTS => 'ACCOUNT_REPEATED_IN_ACCOUNT_AMOUNTS',
        self::SETTING_NEGATIVE_ACCOUNT_BALANCE => 'SETTING_NEGATIVE_ACCOUNT_BALANCE',
        self::OBTAINER_REQUIRED => 'OBTAINER_REQUIRED',
        self::OBTAINER_SAME_CONTRACT_ID => 'OBTAINER_SAME_CONTRACT_ID',
        self::OBTAINER_DOES_NOT_EXIST => 'OBTAINER_DOES_NOT_EXIST',
        self::MODIFYING_IMMUTABLE_CONTRACT => 'MODIFYING_IMMUTABLE_CONTRACT',
        self::FILE_SYSTEM_EXCEPTION => 'FILE_SYSTEM_EXCEPTION',
        self::AUTORENEW_DURATION_NOT_IN_RANGE => 'AUTORENEW_DURATION_NOT_IN_RANGE',
        self::ERROR_DECODING_BYTESTRING => 'ERROR_DECODING_BYTESTRING',
        self::CONTRACT_FILE_EMPTY => 'CONTRACT_FILE_EMPTY',
        self::CONTRACT_BYTECODE_EMPTY => 'CONTRACT_BYTECODE_EMPTY',
        self::INVALID_INITIAL_BALANCE => 'INVALID_INITIAL_BALANCE',
        self::INVALID_RECEIVE_RECORD_THRESHOLD => 'INVALID_RECEIVE_RECORD_THRESHOLD',
        self::INVALID_SEND_RECORD_THRESHOLD => 'INVALID_SEND_RECORD_THRESHOLD',
        self::ACCOUNT_IS_NOT_GENESIS_ACCOUNT => 'ACCOUNT_IS_NOT_GENESIS_ACCOUNT',
        self::PAYER_ACCOUNT_UNAUTHORIZED => 'PAYER_ACCOUNT_UNAUTHORIZED',
        self::INVALID_FREEZE_TRANSACTION_BODY => 'INVALID_FREEZE_TRANSACTION_BODY',
        self::FREEZE_TRANSACTION_BODY_NOT_FOUND => 'FREEZE_TRANSACTION_BODY_NOT_FOUND',
        self::TRANSFER_LIST_SIZE_LIMIT_EXCEEDED => 'TRANSFER_LIST_SIZE_LIMIT_EXCEEDED',
        self::RESULT_SIZE_LIMIT_EXCEEDED => 'RESULT_SIZE_LIMIT_EXCEEDED',
        self::NOT_SPECIAL_ACCOUNT => 'NOT_SPECIAL_ACCOUNT',
        self::CONTRACT_NEGATIVE_GAS => 'CONTRACT_NEGATIVE_GAS',
        self::CONTRACT_NEGATIVE_VALUE => 'CONTRACT_NEGATIVE_VALUE',
        self::INVALID_FEE_FILE => 'INVALID_FEE_FILE',
        self::INVALID_EXCHANGE_RATE_FILE => 'INVALID_EXCHANGE_RATE_FILE',
        self::INSUFFICIENT_LOCAL_CALL_GAS => 'INSUFFICIENT_LOCAL_CALL_GAS',
        self::ENTITY_NOT_ALLOWED_TO_DELETE => 'ENTITY_NOT_ALLOWED_TO_DELETE',
        self::AUTHORIZATION_FAILED => 'AUTHORIZATION_FAILED',
        self::FILE_UPLOADED_PROTO_INVALID => 'FILE_UPLOADED_PROTO_INVALID',
        self::FILE_UPLOADED_PROTO_NOT_SAVED_TO_DISK => 'FILE_UPLOADED_PROTO_NOT_SAVED_TO_DISK',
        self::FEE_SCHEDULE_FILE_PART_UPLOADED => 'FEE_SCHEDULE_FILE_PART_UPLOADED',
        self::EXCHANGE_RATE_CHANGE_LIMIT_EXCEEDED => 'EXCHANGE_RATE_CHANGE_LIMIT_EXCEEDED',
        self::MAX_CONTRACT_STORAGE_EXCEEDED => 'MAX_CONTRACT_STORAGE_EXCEEDED',
        self::TRANSFER_ACCOUNT_SAME_AS_DELETE_ACCOUNT => 'TRANSFER_ACCOUNT_SAME_AS_DELETE_ACCOUNT',
        self::TOTAL_LEDGER_BALANCE_INVALID => 'TOTAL_LEDGER_BALANCE_INVALID',
        self::EXPIRATION_REDUCTION_NOT_ALLOWED => 'EXPIRATION_REDUCTION_NOT_ALLOWED',
        self::MAX_GAS_LIMIT_EXCEEDED => 'MAX_GAS_LIMIT_EXCEEDED',
        self::MAX_FILE_SIZE_EXCEEDED => 'MAX_FILE_SIZE_EXCEEDED',
        self::RECEIVER_SIG_REQUIRED => 'RECEIVER_SIG_REQUIRED',
        self::INVALID_TOPIC_ID => 'INVALID_TOPIC_ID',
        self::INVALID_ADMIN_KEY => 'INVALID_ADMIN_KEY',
        self::INVALID_SUBMIT_KEY => 'INVALID_SUBMIT_KEY',
        self::UNAUTHORIZED => 'UNAUTHORIZED',
        self::INVALID_TOPIC_MESSAGE => 'INVALID_TOPIC_MESSAGE',
        self::INVALID_AUTORENEW_ACCOUNT => 'INVALID_AUTORENEW_ACCOUNT',
        self::AUTORENEW_ACCOUNT_NOT_ALLOWED => 'AUTORENEW_ACCOUNT_NOT_ALLOWED',
        self::TOPIC_EXPIRED => 'TOPIC_EXPIRED',
        self::INVALID_CHUNK_NUMBER => 'INVALID_CHUNK_NUMBER',
        self::INVALID_CHUNK_TRANSACTION_ID => 'INVALID_CHUNK_TRANSACTION_ID',
        self::ACCOUNT_FROZEN_FOR_TOKEN => 'ACCOUNT_FROZEN_FOR_TOKEN',
        self::TOKENS_PER_ACCOUNT_LIMIT_EXCEEDED => 'TOKENS_PER_ACCOUNT_LIMIT_EXCEEDED',
        self::INVALID_TOKEN_ID => 'INVALID_TOKEN_ID',
        self::INVALID_TOKEN_DECIMALS => 'INVALID_TOKEN_DECIMALS',
        self::INVALID_TOKEN_INITIAL_SUPPLY => 'INVALID_TOKEN_INITIAL_SUPPLY',
        self::INVALID_TREASURY_ACCOUNT_FOR_TOKEN => 'INVALID_TREASURY_ACCOUNT_FOR_TOKEN',
        self::INVALID_TOKEN_SYMBOL => 'INVALID_TOKEN_SYMBOL',
        self::TOKEN_HAS_NO_FREEZE_KEY => 'TOKEN_HAS_NO_FREEZE_KEY',
        self::TRANSFERS_NOT_ZERO_SUM_FOR_TOKEN => 'TRANSFERS_NOT_ZERO_SUM_FOR_TOKEN',
        self::MISSING_TOKEN_SYMBOL => 'MISSING_TOKEN_SYMBOL',
        self::TOKEN_SYMBOL_TOO_LONG => 'TOKEN_SYMBOL_TOO_LONG',
        self::ACCOUNT_KYC_NOT_GRANTED_FOR_TOKEN => 'ACCOUNT_KYC_NOT_GRANTED_FOR_TOKEN',
        self::TOKEN_HAS_NO_KYC_KEY => 'TOKEN_HAS_NO_KYC_KEY',
        self::INSUFFICIENT_TOKEN_BALANCE => 'INSUFFICIENT_TOKEN_BALANCE',
        self::TOKEN_WAS_DELETED => 'TOKEN_WAS_DELETED',
        self::TOKEN_HAS_NO_SUPPLY_KEY => 'TOKEN_HAS_NO_SUPPLY_KEY',
        self::TOKEN_HAS_NO_WIPE_KEY => 'TOKEN_HAS_NO_WIPE_KEY',
        self::INVALID_TOKEN_MINT_AMOUNT => 'INVALID_TOKEN_MINT_AMOUNT',
        self::INVALID_TOKEN_BURN_AMOUNT => 'INVALID_TOKEN_BURN_AMOUNT',
        self::TOKEN_NOT_ASSOCIATED_TO_ACCOUNT => 'TOKEN_NOT_ASSOCIATED_TO_ACCOUNT',
        self::CANNOT_WIPE_TOKEN_TREASURY_ACCOUNT => 'CANNOT_WIPE_TOKEN_TREASURY_ACCOUNT',
        self::INVALID_KYC_KEY => 'INVALID_KYC_KEY',
        self::INVALID_WIPE_KEY => 'INVALID_WIPE_KEY',
        self::INVALID_FREEZE_KEY => 'INVALID_FREEZE_KEY',
        self::INVALID_SUPPLY_KEY => 'INVALID_SUPPLY_KEY',
        self::MISSING_TOKEN_NAME => 'MISSING_TOKEN_NAME',
        self::TOKEN_NAME_TOO_LONG => 'TOKEN_NAME_TOO_LONG',
        self::INVALID_WIPING_AMOUNT => 'INVALID_WIPING_AMOUNT',
        self::TOKEN_IS_IMMUTABLE => 'TOKEN_IS_IMMUTABLE',
        self::TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT => 'TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT',
        self::TRANSACTION_REQUIRES_ZERO_TOKEN_BALANCES => 'TRANSACTION_REQUIRES_ZERO_TOKEN_BALANCES',
        self::ACCOUNT_IS_TREASURY => 'ACCOUNT_IS_TREASURY',
        self::TOKEN_ID_REPEATED_IN_TOKEN_LIST => 'TOKEN_ID_REPEATED_IN_TOKEN_LIST',
        self::TOKEN_TRANSFER_LIST_SIZE_LIMIT_EXCEEDED => 'TOKEN_TRANSFER_LIST_SIZE_LIMIT_EXCEEDED',
        self::EMPTY_TOKEN_TRANSFER_BODY => 'EMPTY_TOKEN_TRANSFER_BODY',
        self::EMPTY_TOKEN_TRANSFER_ACCOUNT_AMOUNTS => 'EMPTY_TOKEN_TRANSFER_ACCOUNT_AMOUNTS',
        self::INVALID_SCHEDULE_ID => 'INVALID_SCHEDULE_ID',
        self::SCHEDULE_IS_IMMUTABLE => 'SCHEDULE_IS_IMMUTABLE',
        self::INVALID_SCHEDULE_PAYER_ID => 'INVALID_SCHEDULE_PAYER_ID',
        self::INVALID_SCHEDULE_ACCOUNT_ID => 'INVALID_SCHEDULE_ACCOUNT_ID',
        self::NO_NEW_VALID_SIGNATURES => 'NO_NEW_VALID_SIGNATURES',
        self::UNRESOLVABLE_REQUIRED_SIGNERS => 'UNRESOLVABLE_REQUIRED_SIGNERS',
        self::SCHEDULED_TRANSACTION_NOT_IN_WHITELIST => 'SCHEDULED_TRANSACTION_NOT_IN_WHITELIST',
        self::SOME_SIGNATURES_WERE_INVALID => 'SOME_SIGNATURES_WERE_INVALID',
        self::TRANSACTION_ID_FIELD_NOT_ALLOWED => 'TRANSACTION_ID_FIELD_NOT_ALLOWED',
        self::IDENTICAL_SCHEDULE_ALREADY_CREATED => 'IDENTICAL_SCHEDULE_ALREADY_CREATED',
        self::INVALID_ZERO_BYTE_IN_STRING => 'INVALID_ZERO_BYTE_IN_STRING',
        self::SCHEDULE_ALREADY_DELETED => 'SCHEDULE_ALREADY_DELETED',
        self::SCHEDULE_ALREADY_EXECUTED => 'SCHEDULE_ALREADY_EXECUTED',
        self::MESSAGE_SIZE_TOO_LARGE => 'MESSAGE_SIZE_TOO_LARGE',
        self::OPERATION_REPEATED_IN_BUCKET_GROUPS => 'OPERATION_REPEATED_IN_BUCKET_GROUPS',
        self::BUCKET_CAPACITY_OVERFLOW => 'BUCKET_CAPACITY_OVERFLOW',
        self::NODE_CAPACITY_NOT_SUFFICIENT_FOR_OPERATION => 'NODE_CAPACITY_NOT_SUFFICIENT_FOR_OPERATION',
        self::BUCKET_HAS_NO_THROTTLE_GROUPS => 'BUCKET_HAS_NO_THROTTLE_GROUPS',
        self::THROTTLE_GROUP_HAS_ZERO_OPS_PER_SEC => 'THROTTLE_GROUP_HAS_ZERO_OPS_PER_SEC',
        self::SUCCESS_BUT_MISSING_EXPECTED_OPERATION => 'SUCCESS_BUT_MISSING_EXPECTED_OPERATION',
        self::UNPARSEABLE_THROTTLE_DEFINITIONS => 'UNPARSEABLE_THROTTLE_DEFINITIONS',
        self::INVALID_THROTTLE_DEFINITIONS => 'INVALID_THROTTLE_DEFINITIONS',
        self::ACCOUNT_EXPIRED_AND_PENDING_REMOVAL => 'ACCOUNT_EXPIRED_AND_PENDING_REMOVAL',
        self::INVALID_TOKEN_MAX_SUPPLY => 'INVALID_TOKEN_MAX_SUPPLY',
        self::INVALID_TOKEN_NFT_SERIAL_NUMBER => 'INVALID_TOKEN_NFT_SERIAL_NUMBER',
        self::INVALID_NFT_ID => 'INVALID_NFT_ID',
        self::METADATA_TOO_LONG => 'METADATA_TOO_LONG',
        self::BATCH_SIZE_LIMIT_EXCEEDED => 'BATCH_SIZE_LIMIT_EXCEEDED',
        self::INVALID_QUERY_RANGE => 'INVALID_QUERY_RANGE',
        self::FRACTION_DIVIDES_BY_ZERO => 'FRACTION_DIVIDES_BY_ZERO',
        self::INSUFFICIENT_PAYER_BALANCE_FOR_CUSTOM_FEE => 'INSUFFICIENT_PAYER_BALANCE_FOR_CUSTOM_FEE',
        self::CUSTOM_FEES_LIST_TOO_LONG => 'CUSTOM_FEES_LIST_TOO_LONG',
        self::INVALID_CUSTOM_FEE_COLLECTOR => 'INVALID_CUSTOM_FEE_COLLECTOR',
        self::INVALID_TOKEN_ID_IN_CUSTOM_FEES => 'INVALID_TOKEN_ID_IN_CUSTOM_FEES',
        self::TOKEN_NOT_ASSOCIATED_TO_FEE_COLLECTOR => 'TOKEN_NOT_ASSOCIATED_TO_FEE_COLLECTOR',
        self::TOKEN_MAX_SUPPLY_REACHED => 'TOKEN_MAX_SUPPLY_REACHED',
        self::SENDER_DOES_NOT_OWN_NFT_SERIAL_NO => 'SENDER_DOES_NOT_OWN_NFT_SERIAL_NO',
        self::CUSTOM_FEE_NOT_FULLY_SPECIFIED => 'CUSTOM_FEE_NOT_FULLY_SPECIFIED',
        self::CUSTOM_FEE_MUST_BE_POSITIVE => 'CUSTOM_FEE_MUST_BE_POSITIVE',
        self::TOKEN_HAS_NO_FEE_SCHEDULE_KEY => 'TOKEN_HAS_NO_FEE_SCHEDULE_KEY',
        self::CUSTOM_FEE_OUTSIDE_NUMERIC_RANGE => 'CUSTOM_FEE_OUTSIDE_NUMERIC_RANGE',
        self::ROYALTY_FRACTION_CANNOT_EXCEED_ONE => 'ROYALTY_FRACTION_CANNOT_EXCEED_ONE',
        self::FRACTIONAL_FEE_MAX_AMOUNT_LESS_THAN_MIN_AMOUNT => 'FRACTIONAL_FEE_MAX_AMOUNT_LESS_THAN_MIN_AMOUNT',
        self::CUSTOM_SCHEDULE_ALREADY_HAS_NO_FEES => 'CUSTOM_SCHEDULE_ALREADY_HAS_NO_FEES',
        self::CUSTOM_FEE_DENOMINATION_MUST_BE_FUNGIBLE_COMMON => 'CUSTOM_FEE_DENOMINATION_MUST_BE_FUNGIBLE_COMMON',
        self::CUSTOM_FRACTIONAL_FEE_ONLY_ALLOWED_FOR_FUNGIBLE_COMMON => 'CUSTOM_FRACTIONAL_FEE_ONLY_ALLOWED_FOR_FUNGIBLE_COMMON',
        self::INVALID_CUSTOM_FEE_SCHEDULE_KEY => 'INVALID_CUSTOM_FEE_SCHEDULE_KEY',
        self::INVALID_TOKEN_MINT_METADATA => 'INVALID_TOKEN_MINT_METADATA',
        self::INVALID_TOKEN_BURN_METADATA => 'INVALID_TOKEN_BURN_METADATA',
        self::CURRENT_TREASURY_STILL_OWNS_NFTS => 'CURRENT_TREASURY_STILL_OWNS_NFTS',
        self::ACCOUNT_STILL_OWNS_NFTS => 'ACCOUNT_STILL_OWNS_NFTS',
        self::TREASURY_MUST_OWN_BURNED_NFT => 'TREASURY_MUST_OWN_BURNED_NFT',
        self::ACCOUNT_DOES_NOT_OWN_WIPED_NFT => 'ACCOUNT_DOES_NOT_OWN_WIPED_NFT',
        self::ACCOUNT_AMOUNT_TRANSFERS_ONLY_ALLOWED_FOR_FUNGIBLE_COMMON => 'ACCOUNT_AMOUNT_TRANSFERS_ONLY_ALLOWED_FOR_FUNGIBLE_COMMON',
        self::MAX_NFTS_IN_PRICE_REGIME_HAVE_BEEN_MINTED => 'MAX_NFTS_IN_PRICE_REGIME_HAVE_BEEN_MINTED',
        self::PAYER_ACCOUNT_DELETED => 'PAYER_ACCOUNT_DELETED',
        self::CUSTOM_FEE_CHARGING_EXCEEDED_MAX_RECURSION_DEPTH => 'CUSTOM_FEE_CHARGING_EXCEEDED_MAX_RECURSION_DEPTH',
        self::CUSTOM_FEE_CHARGING_EXCEEDED_MAX_ACCOUNT_AMOUNTS => 'CUSTOM_FEE_CHARGING_EXCEEDED_MAX_ACCOUNT_AMOUNTS',
        self::INSUFFICIENT_SENDER_ACCOUNT_BALANCE_FOR_CUSTOM_FEE => 'INSUFFICIENT_SENDER_ACCOUNT_BALANCE_FOR_CUSTOM_FEE',
        self::SERIAL_NUMBER_LIMIT_REACHED => 'SERIAL_NUMBER_LIMIT_REACHED',
        self::CUSTOM_ROYALTY_FEE_ONLY_ALLOWED_FOR_NON_FUNGIBLE_UNIQUE => 'CUSTOM_ROYALTY_FEE_ONLY_ALLOWED_FOR_NON_FUNGIBLE_UNIQUE',
        self::NO_REMAINING_AUTOMATIC_ASSOCIATIONS => 'NO_REMAINING_AUTOMATIC_ASSOCIATIONS',
        self::EXISTING_AUTOMATIC_ASSOCIATIONS_EXCEED_GIVEN_LIMIT => 'EXISTING_AUTOMATIC_ASSOCIATIONS_EXCEED_GIVEN_LIMIT',
        self::REQUESTED_NUM_AUTOMATIC_ASSOCIATIONS_EXCEEDS_ASSOCIATION_LIMIT => 'REQUESTED_NUM_AUTOMATIC_ASSOCIATIONS_EXCEEDS_ASSOCIATION_LIMIT',
        self::TOKEN_IS_PAUSED => 'TOKEN_IS_PAUSED',
        self::TOKEN_HAS_NO_PAUSE_KEY => 'TOKEN_HAS_NO_PAUSE_KEY',
        self::INVALID_PAUSE_KEY => 'INVALID_PAUSE_KEY',
        self::FREEZE_UPDATE_FILE_DOES_NOT_EXIST => 'FREEZE_UPDATE_FILE_DOES_NOT_EXIST',
        self::FREEZE_UPDATE_FILE_HASH_DOES_NOT_MATCH => 'FREEZE_UPDATE_FILE_HASH_DOES_NOT_MATCH',
        self::NO_UPGRADE_HAS_BEEN_PREPARED => 'NO_UPGRADE_HAS_BEEN_PREPARED',
        self::NO_FREEZE_IS_SCHEDULED => 'NO_FREEZE_IS_SCHEDULED',
        self::UPDATE_FILE_HASH_CHANGED_SINCE_PREPARE_UPGRADE => 'UPDATE_FILE_HASH_CHANGED_SINCE_PREPARE_UPGRADE',
        self::FREEZE_START_TIME_MUST_BE_FUTURE => 'FREEZE_START_TIME_MUST_BE_FUTURE',
        self::PREPARED_UPDATE_FILE_IS_IMMUTABLE => 'PREPARED_UPDATE_FILE_IS_IMMUTABLE',
        self::FREEZE_ALREADY_SCHEDULED => 'FREEZE_ALREADY_SCHEDULED',
        self::FREEZE_UPGRADE_IN_PROGRESS => 'FREEZE_UPGRADE_IN_PROGRESS',
        self::UPDATE_FILE_ID_DOES_NOT_MATCH_PREPARED => 'UPDATE_FILE_ID_DOES_NOT_MATCH_PREPARED',
        self::UPDATE_FILE_HASH_DOES_NOT_MATCH_PREPARED => 'UPDATE_FILE_HASH_DOES_NOT_MATCH_PREPARED',
        self::CONSENSUS_GAS_EXHAUSTED => 'CONSENSUS_GAS_EXHAUSTED',
        self::REVERTED_SUCCESS => 'REVERTED_SUCCESS',
        self::MAX_STORAGE_IN_PRICE_REGIME_HAS_BEEN_USED => 'MAX_STORAGE_IN_PRICE_REGIME_HAS_BEEN_USED',
        self::INVALID_ALIAS_KEY => 'INVALID_ALIAS_KEY',
        self::UNEXPECTED_TOKEN_DECIMALS => 'UNEXPECTED_TOKEN_DECIMALS',
        self::INVALID_PROXY_ACCOUNT_ID => 'INVALID_PROXY_ACCOUNT_ID',
        self::INVALID_TRANSFER_ACCOUNT_ID => 'INVALID_TRANSFER_ACCOUNT_ID',
        self::INVALID_FEE_COLLECTOR_ACCOUNT_ID => 'INVALID_FEE_COLLECTOR_ACCOUNT_ID',
        self::ALIAS_IS_IMMUTABLE => 'ALIAS_IS_IMMUTABLE',
        self::SPENDER_ACCOUNT_SAME_AS_OWNER => 'SPENDER_ACCOUNT_SAME_AS_OWNER',
        self::AMOUNT_EXCEEDS_TOKEN_MAX_SUPPLY => 'AMOUNT_EXCEEDS_TOKEN_MAX_SUPPLY',
        self::NEGATIVE_ALLOWANCE_AMOUNT => 'NEGATIVE_ALLOWANCE_AMOUNT',
        self::CANNOT_APPROVE_FOR_ALL_FUNGIBLE_COMMON => 'CANNOT_APPROVE_FOR_ALL_FUNGIBLE_COMMON',
        self::SPENDER_DOES_NOT_HAVE_ALLOWANCE => 'SPENDER_DOES_NOT_HAVE_ALLOWANCE',
        self::AMOUNT_EXCEEDS_ALLOWANCE => 'AMOUNT_EXCEEDS_ALLOWANCE',
        self::MAX_ALLOWANCES_EXCEEDED => 'MAX_ALLOWANCES_EXCEEDED',
        self::EMPTY_ALLOWANCES => 'EMPTY_ALLOWANCES',
        self::SPENDER_ACCOUNT_REPEATED_IN_ALLOWANCES => 'SPENDER_ACCOUNT_REPEATED_IN_ALLOWANCES',
        self::REPEATED_SERIAL_NUMS_IN_NFT_ALLOWANCES => 'REPEATED_SERIAL_NUMS_IN_NFT_ALLOWANCES',
        self::FUNGIBLE_TOKEN_IN_NFT_ALLOWANCES => 'FUNGIBLE_TOKEN_IN_NFT_ALLOWANCES',
        self::NFT_IN_FUNGIBLE_TOKEN_ALLOWANCES => 'NFT_IN_FUNGIBLE_TOKEN_ALLOWANCES',
        self::INVALID_ALLOWANCE_OWNER_ID => 'INVALID_ALLOWANCE_OWNER_ID',
        self::INVALID_ALLOWANCE_SPENDER_ID => 'INVALID_ALLOWANCE_SPENDER_ID',
        self::REPEATED_ALLOWANCES_TO_DELETE => 'REPEATED_ALLOWANCES_TO_DELETE',
        self::INVALID_DELEGATING_SPENDER => 'INVALID_DELEGATING_SPENDER',
        self::DELEGATING_SPENDER_CANNOT_GRANT_APPROVE_FOR_ALL => 'DELEGATING_SPENDER_CANNOT_GRANT_APPROVE_FOR_ALL',
        self::DELEGATING_SPENDER_DOES_NOT_HAVE_APPROVE_FOR_ALL => 'DELEGATING_SPENDER_DOES_NOT_HAVE_APPROVE_FOR_ALL',
        self::SCHEDULE_EXPIRATION_TIME_TOO_FAR_IN_FUTURE => 'SCHEDULE_EXPIRATION_TIME_TOO_FAR_IN_FUTURE',
        self::SCHEDULE_EXPIRATION_TIME_MUST_BE_HIGHER_THAN_CONSENSUS_TIME => 'SCHEDULE_EXPIRATION_TIME_MUST_BE_HIGHER_THAN_CONSENSUS_TIME',
        self::SCHEDULE_FUTURE_THROTTLE_EXCEEDED => 'SCHEDULE_FUTURE_THROTTLE_EXCEEDED',
        self::SCHEDULE_FUTURE_GAS_LIMIT_EXCEEDED => 'SCHEDULE_FUTURE_GAS_LIMIT_EXCEEDED',
        self::INVALID_ETHEREUM_TRANSACTION => 'INVALID_ETHEREUM_TRANSACTION',
        self::WRONG_CHAIN_ID => 'WRONG_CHAIN_ID',
        self::WRONG_NONCE => 'WRONG_NONCE',
        self::ACCESS_LIST_UNSUPPORTED => 'ACCESS_LIST_UNSUPPORTED',
        self::SCHEDULE_PENDING_EXPIRATION => 'SCHEDULE_PENDING_EXPIRATION',
        self::CONTRACT_IS_TOKEN_TREASURY => 'CONTRACT_IS_TOKEN_TREASURY',
        self::CONTRACT_HAS_NON_ZERO_TOKEN_BALANCES => 'CONTRACT_HAS_NON_ZERO_TOKEN_BALANCES',
        self::CONTRACT_EXPIRED_AND_PENDING_REMOVAL => 'CONTRACT_EXPIRED_AND_PENDING_REMOVAL',
        self::CONTRACT_HAS_NO_AUTO_RENEW_ACCOUNT => 'CONTRACT_HAS_NO_AUTO_RENEW_ACCOUNT',
        self::PERMANENT_REMOVAL_REQUIRES_SYSTEM_INITIATION => 'PERMANENT_REMOVAL_REQUIRES_SYSTEM_INITIATION',
        self::PROXY_ACCOUNT_ID_FIELD_IS_DEPRECATED => 'PROXY_ACCOUNT_ID_FIELD_IS_DEPRECATED',
        self::SELF_STAKING_IS_NOT_ALLOWED => 'SELF_STAKING_IS_NOT_ALLOWED',
        self::INVALID_STAKING_ID => 'INVALID_STAKING_ID',
        self::STAKING_NOT_ENABLED => 'STAKING_NOT_ENABLED',
        self::INVALID_PRNG_RANGE => 'INVALID_PRNG_RANGE',
        self::MAX_ENTITIES_IN_PRICE_REGIME_HAVE_BEEN_CREATED => 'MAX_ENTITIES_IN_PRICE_REGIME_HAVE_BEEN_CREATED',
        self::INVALID_FULL_PREFIX_SIGNATURE_FOR_PRECOMPILE => 'INVALID_FULL_PREFIX_SIGNATURE_FOR_PRECOMPILE',
        self::INSUFFICIENT_BALANCES_FOR_STORAGE_RENT => 'INSUFFICIENT_BALANCES_FOR_STORAGE_RENT',
        self::MAX_CHILD_RECORDS_EXCEEDED => 'MAX_CHILD_RECORDS_EXCEEDED',
        self::INSUFFICIENT_BALANCES_FOR_RENEWAL_FEES => 'INSUFFICIENT_BALANCES_FOR_RENEWAL_FEES',
        self::TRANSACTION_HAS_UNKNOWN_FIELDS => 'TRANSACTION_HAS_UNKNOWN_FIELDS',
        self::ACCOUNT_IS_IMMUTABLE => 'ACCOUNT_IS_IMMUTABLE',
        self::ALIAS_ALREADY_ASSIGNED => 'ALIAS_ALREADY_ASSIGNED',
        self::INVALID_METADATA_KEY => 'INVALID_METADATA_KEY',
        self::TOKEN_HAS_NO_METADATA_KEY => 'TOKEN_HAS_NO_METADATA_KEY',
        self::MISSING_TOKEN_METADATA => 'MISSING_TOKEN_METADATA',
        self::MISSING_SERIAL_NUMBERS => 'MISSING_SERIAL_NUMBERS',
        self::TOKEN_HAS_NO_ADMIN_KEY => 'TOKEN_HAS_NO_ADMIN_KEY',
        self::NODE_DELETED => 'NODE_DELETED',
        self::INVALID_NODE_ID => 'INVALID_NODE_ID',
        self::INVALID_GOSSIP_ENDPOINT => 'INVALID_GOSSIP_ENDPOINT',
        self::INVALID_NODE_ACCOUNT_ID => 'INVALID_NODE_ACCOUNT_ID',
        self::INVALID_NODE_DESCRIPTION => 'INVALID_NODE_DESCRIPTION',
        self::INVALID_SERVICE_ENDPOINT => 'INVALID_SERVICE_ENDPOINT',
        self::INVALID_GOSSIP_CA_CERTIFICATE => 'INVALID_GOSSIP_CA_CERTIFICATE',
        self::INVALID_GRPC_CERTIFICATE => 'INVALID_GRPC_CERTIFICATE',
        self::INVALID_MAX_AUTO_ASSOCIATIONS => 'INVALID_MAX_AUTO_ASSOCIATIONS',
        self::MAX_NODES_CREATED => 'MAX_NODES_CREATED',
        self::IP_FQDN_CANNOT_BE_SET_FOR_SAME_ENDPOINT => 'IP_FQDN_CANNOT_BE_SET_FOR_SAME_ENDPOINT',
        self::GOSSIP_ENDPOINT_CANNOT_HAVE_FQDN => 'GOSSIP_ENDPOINT_CANNOT_HAVE_FQDN',
        self::FQDN_SIZE_TOO_LARGE => 'FQDN_SIZE_TOO_LARGE',
        self::INVALID_ENDPOINT => 'INVALID_ENDPOINT',
        self::GOSSIP_ENDPOINTS_EXCEEDED_LIMIT => 'GOSSIP_ENDPOINTS_EXCEEDED_LIMIT',
        self::TOKEN_REFERENCE_REPEATED => 'TOKEN_REFERENCE_REPEATED',
        self::INVALID_OWNER_ID => 'INVALID_OWNER_ID',
        self::TOKEN_REFERENCE_LIST_SIZE_LIMIT_EXCEEDED => 'TOKEN_REFERENCE_LIST_SIZE_LIMIT_EXCEEDED',
        self::SERVICE_ENDPOINTS_EXCEEDED_LIMIT => 'SERVICE_ENDPOINTS_EXCEEDED_LIMIT',
        self::INVALID_IPV4_ADDRESS => 'INVALID_IPV4_ADDRESS',
        self::EMPTY_TOKEN_REFERENCE_LIST => 'EMPTY_TOKEN_REFERENCE_LIST',
        self::UPDATE_NODE_ACCOUNT_NOT_ALLOWED => 'UPDATE_NODE_ACCOUNT_NOT_ALLOWED',
        self::TOKEN_HAS_NO_METADATA_OR_SUPPLY_KEY => 'TOKEN_HAS_NO_METADATA_OR_SUPPLY_KEY',
        self::EMPTY_PENDING_AIRDROP_ID_LIST => 'EMPTY_PENDING_AIRDROP_ID_LIST',
        self::PENDING_AIRDROP_ID_REPEATED => 'PENDING_AIRDROP_ID_REPEATED',
        self::PENDING_AIRDROP_ID_LIST_TOO_LONG => 'PENDING_AIRDROP_ID_LIST_TOO_LONG',
        self::PENDING_NFT_AIRDROP_ALREADY_EXISTS => 'PENDING_NFT_AIRDROP_ALREADY_EXISTS',
        self::ACCOUNT_HAS_PENDING_AIRDROPS => 'ACCOUNT_HAS_PENDING_AIRDROPS',
        self::THROTTLED_AT_CONSENSUS => 'THROTTLED_AT_CONSENSUS',
        self::INVALID_PENDING_AIRDROP_ID => 'INVALID_PENDING_AIRDROP_ID',
        self::TOKEN_AIRDROP_WITH_FALLBACK_ROYALTY => 'TOKEN_AIRDROP_WITH_FALLBACK_ROYALTY',
        self::INVALID_TOKEN_IN_PENDING_AIRDROP => 'INVALID_TOKEN_IN_PENDING_AIRDROP',
        self::SCHEDULE_EXPIRY_IS_BUSY => 'SCHEDULE_EXPIRY_IS_BUSY',
        self::INVALID_GRPC_CERTIFICATE_HASH => 'INVALID_GRPC_CERTIFICATE_HASH',
        self::MISSING_EXPIRY_TIME => 'MISSING_EXPIRY_TIME',
        self::NO_SCHEDULING_ALLOWED_AFTER_SCHEDULED_RECURSION => 'NO_SCHEDULING_ALLOWED_AFTER_SCHEDULED_RECURSION',
        self::RECURSIVE_SCHEDULING_LIMIT_REACHED => 'RECURSIVE_SCHEDULING_LIMIT_REACHED',
        self::WAITING_FOR_LEDGER_ID => 'WAITING_FOR_LEDGER_ID',
        self::MAX_ENTRIES_FOR_FEE_EXEMPT_KEY_LIST_EXCEEDED => 'MAX_ENTRIES_FOR_FEE_EXEMPT_KEY_LIST_EXCEEDED',
        self::FEE_EXEMPT_KEY_LIST_CONTAINS_DUPLICATED_KEYS => 'FEE_EXEMPT_KEY_LIST_CONTAINS_DUPLICATED_KEYS',
        self::INVALID_KEY_IN_FEE_EXEMPT_KEY_LIST => 'INVALID_KEY_IN_FEE_EXEMPT_KEY_LIST',
        self::INVALID_FEE_SCHEDULE_KEY => 'INVALID_FEE_SCHEDULE_KEY',
        self::FEE_SCHEDULE_KEY_CANNOT_BE_UPDATED => 'FEE_SCHEDULE_KEY_CANNOT_BE_UPDATED',
        self::FEE_SCHEDULE_KEY_NOT_SET => 'FEE_SCHEDULE_KEY_NOT_SET',
        self::MAX_CUSTOM_FEE_LIMIT_EXCEEDED => 'MAX_CUSTOM_FEE_LIMIT_EXCEEDED',
        self::NO_VALID_MAX_CUSTOM_FEE => 'NO_VALID_MAX_CUSTOM_FEE',
        self::INVALID_MAX_CUSTOM_FEES => 'INVALID_MAX_CUSTOM_FEES',
        self::DUPLICATE_DENOMINATION_IN_MAX_CUSTOM_FEE_LIST => 'DUPLICATE_DENOMINATION_IN_MAX_CUSTOM_FEE_LIST',
        self::DUPLICATE_ACCOUNT_ID_IN_MAX_CUSTOM_FEE_LIST => 'DUPLICATE_ACCOUNT_ID_IN_MAX_CUSTOM_FEE_LIST',
        self::MAX_CUSTOM_FEES_IS_NOT_SUPPORTED => 'MAX_CUSTOM_FEES_IS_NOT_SUPPORTED',
        self::BATCH_LIST_EMPTY => 'BATCH_LIST_EMPTY',
        self::BATCH_LIST_CONTAINS_DUPLICATES => 'BATCH_LIST_CONTAINS_DUPLICATES',
        self::BATCH_TRANSACTION_IN_BLACKLIST => 'BATCH_TRANSACTION_IN_BLACKLIST',
        self::INNER_TRANSACTION_FAILED => 'INNER_TRANSACTION_FAILED',
        self::MISSING_BATCH_KEY => 'MISSING_BATCH_KEY',
        self::BATCH_KEY_SET_ON_NON_INNER_TRANSACTION => 'BATCH_KEY_SET_ON_NON_INNER_TRANSACTION',
        self::INVALID_BATCH_KEY => 'INVALID_BATCH_KEY',
        self::SCHEDULE_EXPIRY_NOT_CONFIGURABLE => 'SCHEDULE_EXPIRY_NOT_CONFIGURABLE',
        self::CREATING_SYSTEM_ENTITIES => 'CREATING_SYSTEM_ENTITIES',
        self::THROTTLE_GROUP_LCM_OVERFLOW => 'THROTTLE_GROUP_LCM_OVERFLOW',
        self::AIRDROP_CONTAINS_MULTIPLE_SENDERS_FOR_A_TOKEN => 'AIRDROP_CONTAINS_MULTIPLE_SENDERS_FOR_A_TOKEN',
        self::GRPC_WEB_PROXY_NOT_SUPPORTED => 'GRPC_WEB_PROXY_NOT_SUPPORTED',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

