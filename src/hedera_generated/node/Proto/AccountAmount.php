<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: basic_types.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * An account, and the amount that it sends or receives during a token transfer.
 * This message is only relevant to fungible/common token transfers.
 * Non-fungible/unique (NFT) token transfers MUST use the NftTransfer message.
 *
 * Generated from protobuf message <code>proto.AccountAmount</code>
 */
class AccountAmount extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * An account identifier that will send or receive token(s).
     *
     * Generated from protobuf field <code>.proto.AccountID accountID = 1;</code>
     */
    protected $accountID = null;
    /**
     **
     * An amount to send (negative) or receive (positive).
     * <p>
     * This amount MUST be denominated in the smallest unit of the relevant
     * token.<br/>
     * For HBAR this SHALL be tinybar (10<sup>-8</sup> HBAR).<br/>
     * For other fungible/common tokens this SHALL depend on the value of
     * `decimals` for that token.
     *
     * Generated from protobuf field <code>sint64 amount = 2;</code>
     */
    protected $amount = 0;
    /**
     **
     * An approved allowance flag.<br/>
     * If true then the transfer is expected to be an approved allowance.
     * <p>
     * If set, `accountID` SHALL be the owner that previously approved
     * the allowance.<br/>
     * The default value SHALL be false (unset).
     *
     * Generated from protobuf field <code>bool is_approval = 3;</code>
     */
    protected $is_approval = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\AccountID $accountID
     *          *
     *           An account identifier that will send or receive token(s).
     *     @type int|string $amount
     *          *
     *           An amount to send (negative) or receive (positive).
     *           <p>
     *           This amount MUST be denominated in the smallest unit of the relevant
     *           token.<br/>
     *           For HBAR this SHALL be tinybar (10<sup>-8</sup> HBAR).<br/>
     *           For other fungible/common tokens this SHALL depend on the value of
     *           `decimals` for that token.
     *     @type bool $is_approval
     *          *
     *           An approved allowance flag.<br/>
     *           If true then the transfer is expected to be an approved allowance.
     *           <p>
     *           If set, `accountID` SHALL be the owner that previously approved
     *           the allowance.<br/>
     *           The default value SHALL be false (unset).
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\BasicTypes::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * An account identifier that will send or receive token(s).
     *
     * Generated from protobuf field <code>.proto.AccountID accountID = 1;</code>
     * @return \Proto\AccountID|null
     */
    public function getAccountID()
    {
        return $this->accountID;
    }

    public function hasAccountID()
    {
        return isset($this->accountID);
    }

    public function clearAccountID()
    {
        unset($this->accountID);
    }

    /**
     **
     * An account identifier that will send or receive token(s).
     *
     * Generated from protobuf field <code>.proto.AccountID accountID = 1;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setAccountID($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->accountID = $var;

        return $this;
    }

    /**
     **
     * An amount to send (negative) or receive (positive).
     * <p>
     * This amount MUST be denominated in the smallest unit of the relevant
     * token.<br/>
     * For HBAR this SHALL be tinybar (10<sup>-8</sup> HBAR).<br/>
     * For other fungible/common tokens this SHALL depend on the value of
     * `decimals` for that token.
     *
     * Generated from protobuf field <code>sint64 amount = 2;</code>
     * @return int|string
     */
    public function getAmount()
    {
        return $this->amount;
    }

    /**
     **
     * An amount to send (negative) or receive (positive).
     * <p>
     * This amount MUST be denominated in the smallest unit of the relevant
     * token.<br/>
     * For HBAR this SHALL be tinybar (10<sup>-8</sup> HBAR).<br/>
     * For other fungible/common tokens this SHALL depend on the value of
     * `decimals` for that token.
     *
     * Generated from protobuf field <code>sint64 amount = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setAmount($var)
    {
        GPBUtil::checkInt64($var);
        $this->amount = $var;

        return $this;
    }

    /**
     **
     * An approved allowance flag.<br/>
     * If true then the transfer is expected to be an approved allowance.
     * <p>
     * If set, `accountID` SHALL be the owner that previously approved
     * the allowance.<br/>
     * The default value SHALL be false (unset).
     *
     * Generated from protobuf field <code>bool is_approval = 3;</code>
     * @return bool
     */
    public function getIsApproval()
    {
        return $this->is_approval;
    }

    /**
     **
     * An approved allowance flag.<br/>
     * If true then the transfer is expected to be an approved allowance.
     * <p>
     * If set, `accountID` SHALL be the owner that previously approved
     * the allowance.<br/>
     * The default value SHALL be false (unset).
     *
     * Generated from protobuf field <code>bool is_approval = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setIsApproval($var)
    {
        GPBUtil::checkBool($var);
        $this->is_approval = $var;

        return $this;
    }

}

