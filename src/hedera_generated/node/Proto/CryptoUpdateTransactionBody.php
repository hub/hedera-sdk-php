<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: crypto_update.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Modify the current state of an account.
 * ### Requirements
 * - The `key` for this account MUST sign all account update transactions.
 * - If the `key` field is set for this transaction, then _both_ the current
 *   `key` and the new `key` MUST sign this transaction, for security and to
 *   prevent setting the `key` field to an invalid value.
 * - If the `auto_renew_account` field is set for this transaction, the account
 *   identified in that field MUST sign this transaction.
 * - Fields set to non-default values in this transaction SHALL be updated on
 *   success. Fields not set to non-default values SHALL NOT be
 *   updated on success.
 * - All fields that may be modified in this transaction SHALL have a
 *   default value of unset (a.k.a. `null`).
 * ### Block Stream Effects
 * None
 *
 * Generated from protobuf message <code>proto.CryptoUpdateTransactionBody</code>
 */
class CryptoUpdateTransactionBody extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * An account identifier.<br/>
     * This identifies the account which is to be modified in this transaction.
     * <p>
     * This field is REQUIRED.
     *
     * Generated from protobuf field <code>.proto.AccountID accountIDToUpdate = 2;</code>
     */
    protected $accountIDToUpdate = null;
    /**
     **
     * An account key.<br/>
     * This may be a "primitive" key (a singly cryptographic key), or a
     * composite key.
     * <p>
     * If set, this key MUST be a valid key.<br/>
     * If set, the previous key and new key MUST both sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key key = 3;</code>
     */
    protected $key = null;
    /**
     **
     * Removed in favor of the `staked_id` oneOf.<br/>
     * An account identifier for a "proxy" account. This account's HBAR are
     * staked to a node selected by the proxy account.
     *
     * Generated from protobuf field <code>.proto.AccountID proxyAccountID = 4 [deprecated = true];</code>
     * @deprecated
     */
    protected $proxyAccountID = null;
    /**
     **
     * Removed prior to the first available history.<br/>
     * A fraction to split staking rewards between this account and the proxy
     * account.
     *
     * Generated from protobuf field <code>int32 proxyFraction = 5 [deprecated = true];</code>
     * @deprecated
     */
    protected $proxyFraction = 0;
    /**
     **
     * A duration to extend account expiration.<br/>
     * An amount of time, in seconds, to extend the expiration date for this
     * account when _automatically_ renewed.
     * <p>
     * This duration MUST be between the current configured minimum and maximum
     * values defined for the network.<br/>
     * This duration SHALL be applied only when _automatically_ extending the
     * account expiration.
     *
     * Generated from protobuf field <code>.proto.Duration autoRenewPeriod = 8;</code>
     */
    protected $autoRenewPeriod = null;
    /**
     **
     * A new account expiration time, in seconds since the epoch.
     * <p>
     * For this purpose, `epoch` SHALL be the UNIX epoch with 0
     * at `1970-01-01T00:00:00.000Z`.<br/>
     * If set, this value MUST be later than the current consensus time.<br/>
     * If set, this value MUST be earlier than the current consensus time
     * extended by the current maximum expiration time configured for the
     * network.
     *
     * Generated from protobuf field <code>.proto.Timestamp expirationTime = 9;</code>
     */
    protected $expirationTime = null;
    /**
     **
     * A short description of this Account.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue memo = 14;</code>
     */
    protected $memo = null;
    /**
     **
     * A maximum number of tokens that can be auto-associated
     * with this account.<br/>
     * By default this value is 0 for all accounts except for automatically
     * created accounts (i.e smart contracts) which default to -1.
     * <p>
     * If this value is `0`, then this account MUST manually associate to
     * a token before holding or transacting in that token.<br/>
     * This value MAY also be `-1` to indicate no limit.<br/>
     * If set, this value MUST NOT be less than `-1`.<br/>
     *
     * Generated from protobuf field <code>.google.protobuf.Int32Value max_automatic_token_associations = 15;</code>
     */
    protected $max_automatic_token_associations = null;
    /**
     **
     * A boolean indicating that this account has chosen to decline rewards for
     * staking its balances.
     * <p>
     * This account MAY still stake its balances, but SHALL NOT receive reward
     * payments for doing so, if this value is set, and `true`.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue decline_reward = 18;</code>
     */
    protected $decline_reward = null;
    protected $sendRecordThresholdField;
    protected $receiveRecordThresholdField;
    protected $receiverSigRequiredField;
    protected $staked_id;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\AccountID $accountIDToUpdate
     *          *
     *           An account identifier.<br/>
     *           This identifies the account which is to be modified in this transaction.
     *           <p>
     *           This field is REQUIRED.
     *     @type \Proto\Key $key
     *          *
     *           An account key.<br/>
     *           This may be a "primitive" key (a singly cryptographic key), or a
     *           composite key.
     *           <p>
     *           If set, this key MUST be a valid key.<br/>
     *           If set, the previous key and new key MUST both sign this transaction.
     *     @type \Proto\AccountID $proxyAccountID
     *          *
     *           Removed in favor of the `staked_id` oneOf.<br/>
     *           An account identifier for a "proxy" account. This account's HBAR are
     *           staked to a node selected by the proxy account.
     *     @type int $proxyFraction
     *          *
     *           Removed prior to the first available history.<br/>
     *           A fraction to split staking rewards between this account and the proxy
     *           account.
     *     @type int|string $sendRecordThreshold
     *          *
     *           Removed prior to the first available history, and may be related
     *           to an early design dead-end.<br/>
     *           The new threshold amount (in tinybars) for which an account record is
     *           created for any send/withdraw transaction
     *     @type \Google\Protobuf\UInt64Value $sendRecordThresholdWrapper
     *          *
     *           Removed prior to the first available history, and may be related
     *           to an early design dead-end.<br/>
     *           The new threshold amount (in tinybars) for which an account record is
     *           created for any send/withdraw transaction
     *     @type int|string $receiveRecordThreshold
     *          *
     *           Removed prior to the first available history, and may be related
     *           to an early design dead-end.<br/>
     *           The new threshold amount (in tinybars) for which an account record is
     *           created for any receive/deposit transaction.
     *     @type \Google\Protobuf\UInt64Value $receiveRecordThresholdWrapper
     *          *
     *           Removed prior to the first available history, and may be related
     *           to an early design dead-end.<br/>
     *           The new threshold amount (in tinybars) for which an account record is
     *           created for any receive/deposit transaction.
     *     @type \Proto\Duration $autoRenewPeriod
     *          *
     *           A duration to extend account expiration.<br/>
     *           An amount of time, in seconds, to extend the expiration date for this
     *           account when _automatically_ renewed.
     *           <p>
     *           This duration MUST be between the current configured minimum and maximum
     *           values defined for the network.<br/>
     *           This duration SHALL be applied only when _automatically_ extending the
     *           account expiration.
     *     @type \Proto\Timestamp $expirationTime
     *          *
     *           A new account expiration time, in seconds since the epoch.
     *           <p>
     *           For this purpose, `epoch` SHALL be the UNIX epoch with 0
     *           at `1970-01-01T00:00:00.000Z`.<br/>
     *           If set, this value MUST be later than the current consensus time.<br/>
     *           If set, this value MUST be earlier than the current consensus time
     *           extended by the current maximum expiration time configured for the
     *           network.
     *     @type bool $receiverSigRequired
     *          *
     *           Removed to distinguish between unset and a default value.<br/>
     *           Do NOT use this field to set a false value because the server cannot
     *           distinguish from the default value. Use receiverSigRequiredWrapper
     *           field for this purpose.
     *     @type \Google\Protobuf\BoolValue $receiverSigRequiredWrapper
     *          *
     *           A flag indicating the account holder must authorize all incoming
     *           token transfers.
     *           <p>
     *           If this flag is set then any transaction that would result in adding
     *           hbar or other tokens to this account balance MUST be signed by the
     *           identifying key of this account (that is, the `key` field).
     *     @type \Google\Protobuf\StringValue $memo
     *          *
     *           A short description of this Account.
     *           <p>
     *           This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     *           (default 100) bytes when encoded as UTF-8.
     *     @type \Google\Protobuf\Int32Value $max_automatic_token_associations
     *          *
     *           A maximum number of tokens that can be auto-associated
     *           with this account.<br/>
     *           By default this value is 0 for all accounts except for automatically
     *           created accounts (i.e smart contracts) which default to -1.
     *           <p>
     *           If this value is `0`, then this account MUST manually associate to
     *           a token before holding or transacting in that token.<br/>
     *           This value MAY also be `-1` to indicate no limit.<br/>
     *           If set, this value MUST NOT be less than `-1`.<br/>
     *     @type \Proto\AccountID $staked_account_id
     *          *
     *           ID of the account to which this account is staking its balances.
     *           <p>
     *           If this account is not currently staking its balances, then this
     *           field, if set, MUST be the sentinel value of `0.0.0`.
     *     @type int|string $staked_node_id
     *          *
     *           ID of the node this account is staked to.
     *           <p>
     *           If this account is not currently staking its balances, then this
     *           field, if set, SHALL be the sentinel value of `-1`.<br/>
     *           Wallet software SHOULD surface staking issues to users and provide a
     *           simple mechanism to update staking to a new node ID in the event the
     *           prior staked node ID ceases to be valid.
     *     @type \Google\Protobuf\BoolValue $decline_reward
     *          *
     *           A boolean indicating that this account has chosen to decline rewards for
     *           staking its balances.
     *           <p>
     *           This account MAY still stake its balances, but SHALL NOT receive reward
     *           payments for doing so, if this value is set, and `true`.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\CryptoUpdate::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * An account identifier.<br/>
     * This identifies the account which is to be modified in this transaction.
     * <p>
     * This field is REQUIRED.
     *
     * Generated from protobuf field <code>.proto.AccountID accountIDToUpdate = 2;</code>
     * @return \Proto\AccountID|null
     */
    public function getAccountIDToUpdate()
    {
        return $this->accountIDToUpdate;
    }

    public function hasAccountIDToUpdate()
    {
        return isset($this->accountIDToUpdate);
    }

    public function clearAccountIDToUpdate()
    {
        unset($this->accountIDToUpdate);
    }

    /**
     **
     * An account identifier.<br/>
     * This identifies the account which is to be modified in this transaction.
     * <p>
     * This field is REQUIRED.
     *
     * Generated from protobuf field <code>.proto.AccountID accountIDToUpdate = 2;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setAccountIDToUpdate($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->accountIDToUpdate = $var;

        return $this;
    }

    /**
     **
     * An account key.<br/>
     * This may be a "primitive" key (a singly cryptographic key), or a
     * composite key.
     * <p>
     * If set, this key MUST be a valid key.<br/>
     * If set, the previous key and new key MUST both sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key key = 3;</code>
     * @return \Proto\Key|null
     */
    public function getKey()
    {
        return $this->key;
    }

    public function hasKey()
    {
        return isset($this->key);
    }

    public function clearKey()
    {
        unset($this->key);
    }

    /**
     **
     * An account key.<br/>
     * This may be a "primitive" key (a singly cryptographic key), or a
     * composite key.
     * <p>
     * If set, this key MUST be a valid key.<br/>
     * If set, the previous key and new key MUST both sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key key = 3;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->key = $var;

        return $this;
    }

    /**
     **
     * Removed in favor of the `staked_id` oneOf.<br/>
     * An account identifier for a "proxy" account. This account's HBAR are
     * staked to a node selected by the proxy account.
     *
     * Generated from protobuf field <code>.proto.AccountID proxyAccountID = 4 [deprecated = true];</code>
     * @return \Proto\AccountID|null
     * @deprecated
     */
    public function getProxyAccountID()
    {
        if (isset($this->proxyAccountID)) {
            @trigger_error('proxyAccountID is deprecated.', E_USER_DEPRECATED);
        }
        return $this->proxyAccountID;
    }

    public function hasProxyAccountID()
    {
        if (isset($this->proxyAccountID)) {
            @trigger_error('proxyAccountID is deprecated.', E_USER_DEPRECATED);
        }
        return isset($this->proxyAccountID);
    }

    public function clearProxyAccountID()
    {
        @trigger_error('proxyAccountID is deprecated.', E_USER_DEPRECATED);
        unset($this->proxyAccountID);
    }

    /**
     **
     * Removed in favor of the `staked_id` oneOf.<br/>
     * An account identifier for a "proxy" account. This account's HBAR are
     * staked to a node selected by the proxy account.
     *
     * Generated from protobuf field <code>.proto.AccountID proxyAccountID = 4 [deprecated = true];</code>
     * @param \Proto\AccountID $var
     * @return $this
     * @deprecated
     */
    public function setProxyAccountID($var)
    {
        @trigger_error('proxyAccountID is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->proxyAccountID = $var;

        return $this;
    }

    /**
     **
     * Removed prior to the first available history.<br/>
     * A fraction to split staking rewards between this account and the proxy
     * account.
     *
     * Generated from protobuf field <code>int32 proxyFraction = 5 [deprecated = true];</code>
     * @return int
     * @deprecated
     */
    public function getProxyFraction()
    {
        if ($this->proxyFraction !== 0) {
            @trigger_error('proxyFraction is deprecated.', E_USER_DEPRECATED);
        }
        return $this->proxyFraction;
    }

    /**
     **
     * Removed prior to the first available history.<br/>
     * A fraction to split staking rewards between this account and the proxy
     * account.
     *
     * Generated from protobuf field <code>int32 proxyFraction = 5 [deprecated = true];</code>
     * @param int $var
     * @return $this
     * @deprecated
     */
    public function setProxyFraction($var)
    {
        @trigger_error('proxyFraction is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkInt32($var);
        $this->proxyFraction = $var;

        return $this;
    }

    /**
     **
     * Removed prior to the first available history, and may be related
     * to an early design dead-end.<br/>
     * The new threshold amount (in tinybars) for which an account record is
     * created for any send/withdraw transaction
     *
     * Generated from protobuf field <code>uint64 sendRecordThreshold = 6 [deprecated = true];</code>
     * @return int|string
     * @deprecated
     */
    public function getSendRecordThreshold()
    {
        if ($this->hasOneof(6)) {
            @trigger_error('sendRecordThreshold is deprecated.', E_USER_DEPRECATED);
        }
        return $this->readOneof(6);
    }

    public function hasSendRecordThreshold()
    {
        if ($this->hasOneof(6)) {
            @trigger_error('sendRecordThreshold is deprecated.', E_USER_DEPRECATED);
        }
        return $this->hasOneof(6);
    }

    /**
     **
     * Removed prior to the first available history, and may be related
     * to an early design dead-end.<br/>
     * The new threshold amount (in tinybars) for which an account record is
     * created for any send/withdraw transaction
     *
     * Generated from protobuf field <code>uint64 sendRecordThreshold = 6 [deprecated = true];</code>
     * @param int|string $var
     * @return $this
     * @deprecated
     */
    public function setSendRecordThreshold($var)
    {
        @trigger_error('sendRecordThreshold is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkUint64($var);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     **
     * Removed prior to the first available history, and may be related
     * to an early design dead-end.<br/>
     * The new threshold amount (in tinybars) for which an account record is
     * created for any send/withdraw transaction
     *
     * Generated from protobuf field <code>.google.protobuf.UInt64Value sendRecordThresholdWrapper = 11 [deprecated = true];</code>
     * @return \Google\Protobuf\UInt64Value|null
     * @deprecated
     */
    public function getSendRecordThresholdWrapper()
    {
        if ($this->hasOneof(11)) {
            @trigger_error('sendRecordThresholdWrapper is deprecated.', E_USER_DEPRECATED);
        }
        return $this->readOneof(11);
    }

    public function hasSendRecordThresholdWrapper()
    {
        if ($this->hasOneof(11)) {
            @trigger_error('sendRecordThresholdWrapper is deprecated.', E_USER_DEPRECATED);
        }
        return $this->hasOneof(11);
    }

    /**
     * Returns the unboxed value from <code>getSendRecordThresholdWrapper()</code>

     **
     * Removed prior to the first available history, and may be related
     * to an early design dead-end.<br/>
     * The new threshold amount (in tinybars) for which an account record is
     * created for any send/withdraw transaction
     *
     * Generated from protobuf field <code>.google.protobuf.UInt64Value sendRecordThresholdWrapper = 11 [deprecated = true];</code>
     * @return int|string|null
     */
    public function getSendRecordThresholdWrapperUnwrapped()
    {
        if ($this->hasOneof(11)) {
            @trigger_error('sendRecordThresholdWrapper is deprecated.', E_USER_DEPRECATED);
        }
        return $this->readWrapperValue("sendRecordThresholdWrapper");
    }

    /**
     **
     * Removed prior to the first available history, and may be related
     * to an early design dead-end.<br/>
     * The new threshold amount (in tinybars) for which an account record is
     * created for any send/withdraw transaction
     *
     * Generated from protobuf field <code>.google.protobuf.UInt64Value sendRecordThresholdWrapper = 11 [deprecated = true];</code>
     * @param \Google\Protobuf\UInt64Value $var
     * @return $this
     * @deprecated
     */
    public function setSendRecordThresholdWrapper($var)
    {
        @trigger_error('sendRecordThresholdWrapper is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkMessage($var, \Google\Protobuf\UInt64Value::class);
        $this->writeOneof(11, $var);

        return $this;
    }

    /**
     * Sets the field by wrapping a primitive type in a Google\Protobuf\UInt64Value object.

     **
     * Removed prior to the first available history, and may be related
     * to an early design dead-end.<br/>
     * The new threshold amount (in tinybars) for which an account record is
     * created for any send/withdraw transaction
     *
     * Generated from protobuf field <code>.google.protobuf.UInt64Value sendRecordThresholdWrapper = 11 [deprecated = true];</code>
     * @param int|string|null $var
     * @return $this
     */
    public function setSendRecordThresholdWrapperUnwrapped($var)
    {
        $this->writeWrapperValue("sendRecordThresholdWrapper", $var);
        return $this;}

    /**
     **
     * Removed prior to the first available history, and may be related
     * to an early design dead-end.<br/>
     * The new threshold amount (in tinybars) for which an account record is
     * created for any receive/deposit transaction.
     *
     * Generated from protobuf field <code>uint64 receiveRecordThreshold = 7 [deprecated = true];</code>
     * @return int|string
     * @deprecated
     */
    public function getReceiveRecordThreshold()
    {
        if ($this->hasOneof(7)) {
            @trigger_error('receiveRecordThreshold is deprecated.', E_USER_DEPRECATED);
        }
        return $this->readOneof(7);
    }

    public function hasReceiveRecordThreshold()
    {
        if ($this->hasOneof(7)) {
            @trigger_error('receiveRecordThreshold is deprecated.', E_USER_DEPRECATED);
        }
        return $this->hasOneof(7);
    }

    /**
     **
     * Removed prior to the first available history, and may be related
     * to an early design dead-end.<br/>
     * The new threshold amount (in tinybars) for which an account record is
     * created for any receive/deposit transaction.
     *
     * Generated from protobuf field <code>uint64 receiveRecordThreshold = 7 [deprecated = true];</code>
     * @param int|string $var
     * @return $this
     * @deprecated
     */
    public function setReceiveRecordThreshold($var)
    {
        @trigger_error('receiveRecordThreshold is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkUint64($var);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     **
     * Removed prior to the first available history, and may be related
     * to an early design dead-end.<br/>
     * The new threshold amount (in tinybars) for which an account record is
     * created for any receive/deposit transaction.
     *
     * Generated from protobuf field <code>.google.protobuf.UInt64Value receiveRecordThresholdWrapper = 12 [deprecated = true];</code>
     * @return \Google\Protobuf\UInt64Value|null
     * @deprecated
     */
    public function getReceiveRecordThresholdWrapper()
    {
        if ($this->hasOneof(12)) {
            @trigger_error('receiveRecordThresholdWrapper is deprecated.', E_USER_DEPRECATED);
        }
        return $this->readOneof(12);
    }

    public function hasReceiveRecordThresholdWrapper()
    {
        if ($this->hasOneof(12)) {
            @trigger_error('receiveRecordThresholdWrapper is deprecated.', E_USER_DEPRECATED);
        }
        return $this->hasOneof(12);
    }

    /**
     * Returns the unboxed value from <code>getReceiveRecordThresholdWrapper()</code>

     **
     * Removed prior to the first available history, and may be related
     * to an early design dead-end.<br/>
     * The new threshold amount (in tinybars) for which an account record is
     * created for any receive/deposit transaction.
     *
     * Generated from protobuf field <code>.google.protobuf.UInt64Value receiveRecordThresholdWrapper = 12 [deprecated = true];</code>
     * @return int|string|null
     */
    public function getReceiveRecordThresholdWrapperUnwrapped()
    {
        if ($this->hasOneof(12)) {
            @trigger_error('receiveRecordThresholdWrapper is deprecated.', E_USER_DEPRECATED);
        }
        return $this->readWrapperValue("receiveRecordThresholdWrapper");
    }

    /**
     **
     * Removed prior to the first available history, and may be related
     * to an early design dead-end.<br/>
     * The new threshold amount (in tinybars) for which an account record is
     * created for any receive/deposit transaction.
     *
     * Generated from protobuf field <code>.google.protobuf.UInt64Value receiveRecordThresholdWrapper = 12 [deprecated = true];</code>
     * @param \Google\Protobuf\UInt64Value $var
     * @return $this
     * @deprecated
     */
    public function setReceiveRecordThresholdWrapper($var)
    {
        @trigger_error('receiveRecordThresholdWrapper is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkMessage($var, \Google\Protobuf\UInt64Value::class);
        $this->writeOneof(12, $var);

        return $this;
    }

    /**
     * Sets the field by wrapping a primitive type in a Google\Protobuf\UInt64Value object.

     **
     * Removed prior to the first available history, and may be related
     * to an early design dead-end.<br/>
     * The new threshold amount (in tinybars) for which an account record is
     * created for any receive/deposit transaction.
     *
     * Generated from protobuf field <code>.google.protobuf.UInt64Value receiveRecordThresholdWrapper = 12 [deprecated = true];</code>
     * @param int|string|null $var
     * @return $this
     */
    public function setReceiveRecordThresholdWrapperUnwrapped($var)
    {
        $this->writeWrapperValue("receiveRecordThresholdWrapper", $var);
        return $this;}

    /**
     **
     * A duration to extend account expiration.<br/>
     * An amount of time, in seconds, to extend the expiration date for this
     * account when _automatically_ renewed.
     * <p>
     * This duration MUST be between the current configured minimum and maximum
     * values defined for the network.<br/>
     * This duration SHALL be applied only when _automatically_ extending the
     * account expiration.
     *
     * Generated from protobuf field <code>.proto.Duration autoRenewPeriod = 8;</code>
     * @return \Proto\Duration|null
     */
    public function getAutoRenewPeriod()
    {
        return $this->autoRenewPeriod;
    }

    public function hasAutoRenewPeriod()
    {
        return isset($this->autoRenewPeriod);
    }

    public function clearAutoRenewPeriod()
    {
        unset($this->autoRenewPeriod);
    }

    /**
     **
     * A duration to extend account expiration.<br/>
     * An amount of time, in seconds, to extend the expiration date for this
     * account when _automatically_ renewed.
     * <p>
     * This duration MUST be between the current configured minimum and maximum
     * values defined for the network.<br/>
     * This duration SHALL be applied only when _automatically_ extending the
     * account expiration.
     *
     * Generated from protobuf field <code>.proto.Duration autoRenewPeriod = 8;</code>
     * @param \Proto\Duration $var
     * @return $this
     */
    public function setAutoRenewPeriod($var)
    {
        GPBUtil::checkMessage($var, \Proto\Duration::class);
        $this->autoRenewPeriod = $var;

        return $this;
    }

    /**
     **
     * A new account expiration time, in seconds since the epoch.
     * <p>
     * For this purpose, `epoch` SHALL be the UNIX epoch with 0
     * at `1970-01-01T00:00:00.000Z`.<br/>
     * If set, this value MUST be later than the current consensus time.<br/>
     * If set, this value MUST be earlier than the current consensus time
     * extended by the current maximum expiration time configured for the
     * network.
     *
     * Generated from protobuf field <code>.proto.Timestamp expirationTime = 9;</code>
     * @return \Proto\Timestamp|null
     */
    public function getExpirationTime()
    {
        return $this->expirationTime;
    }

    public function hasExpirationTime()
    {
        return isset($this->expirationTime);
    }

    public function clearExpirationTime()
    {
        unset($this->expirationTime);
    }

    /**
     **
     * A new account expiration time, in seconds since the epoch.
     * <p>
     * For this purpose, `epoch` SHALL be the UNIX epoch with 0
     * at `1970-01-01T00:00:00.000Z`.<br/>
     * If set, this value MUST be later than the current consensus time.<br/>
     * If set, this value MUST be earlier than the current consensus time
     * extended by the current maximum expiration time configured for the
     * network.
     *
     * Generated from protobuf field <code>.proto.Timestamp expirationTime = 9;</code>
     * @param \Proto\Timestamp $var
     * @return $this
     */
    public function setExpirationTime($var)
    {
        GPBUtil::checkMessage($var, \Proto\Timestamp::class);
        $this->expirationTime = $var;

        return $this;
    }

    /**
     **
     * Removed to distinguish between unset and a default value.<br/>
     * Do NOT use this field to set a false value because the server cannot
     * distinguish from the default value. Use receiverSigRequiredWrapper
     * field for this purpose.
     *
     * Generated from protobuf field <code>bool receiverSigRequired = 10 [deprecated = true];</code>
     * @return bool
     * @deprecated
     */
    public function getReceiverSigRequired()
    {
        if ($this->hasOneof(10)) {
            @trigger_error('receiverSigRequired is deprecated.', E_USER_DEPRECATED);
        }
        return $this->readOneof(10);
    }

    public function hasReceiverSigRequired()
    {
        if ($this->hasOneof(10)) {
            @trigger_error('receiverSigRequired is deprecated.', E_USER_DEPRECATED);
        }
        return $this->hasOneof(10);
    }

    /**
     **
     * Removed to distinguish between unset and a default value.<br/>
     * Do NOT use this field to set a false value because the server cannot
     * distinguish from the default value. Use receiverSigRequiredWrapper
     * field for this purpose.
     *
     * Generated from protobuf field <code>bool receiverSigRequired = 10 [deprecated = true];</code>
     * @param bool $var
     * @return $this
     * @deprecated
     */
    public function setReceiverSigRequired($var)
    {
        @trigger_error('receiverSigRequired is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkBool($var);
        $this->writeOneof(10, $var);

        return $this;
    }

    /**
     **
     * A flag indicating the account holder must authorize all incoming
     * token transfers.
     * <p>
     * If this flag is set then any transaction that would result in adding
     * hbar or other tokens to this account balance MUST be signed by the
     * identifying key of this account (that is, the `key` field).
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue receiverSigRequiredWrapper = 13;</code>
     * @return \Google\Protobuf\BoolValue|null
     */
    public function getReceiverSigRequiredWrapper()
    {
        return $this->readOneof(13);
    }

    public function hasReceiverSigRequiredWrapper()
    {
        return $this->hasOneof(13);
    }

    /**
     * Returns the unboxed value from <code>getReceiverSigRequiredWrapper()</code>

     **
     * A flag indicating the account holder must authorize all incoming
     * token transfers.
     * <p>
     * If this flag is set then any transaction that would result in adding
     * hbar or other tokens to this account balance MUST be signed by the
     * identifying key of this account (that is, the `key` field).
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue receiverSigRequiredWrapper = 13;</code>
     * @return bool|null
     */
    public function getReceiverSigRequiredWrapperUnwrapped()
    {
        return $this->readWrapperValue("receiverSigRequiredWrapper");
    }

    /**
     **
     * A flag indicating the account holder must authorize all incoming
     * token transfers.
     * <p>
     * If this flag is set then any transaction that would result in adding
     * hbar or other tokens to this account balance MUST be signed by the
     * identifying key of this account (that is, the `key` field).
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue receiverSigRequiredWrapper = 13;</code>
     * @param \Google\Protobuf\BoolValue $var
     * @return $this
     */
    public function setReceiverSigRequiredWrapper($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\BoolValue::class);
        $this->writeOneof(13, $var);

        return $this;
    }

    /**
     * Sets the field by wrapping a primitive type in a Google\Protobuf\BoolValue object.

     **
     * A flag indicating the account holder must authorize all incoming
     * token transfers.
     * <p>
     * If this flag is set then any transaction that would result in adding
     * hbar or other tokens to this account balance MUST be signed by the
     * identifying key of this account (that is, the `key` field).
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue receiverSigRequiredWrapper = 13;</code>
     * @param bool|null $var
     * @return $this
     */
    public function setReceiverSigRequiredWrapperUnwrapped($var)
    {
        $this->writeWrapperValue("receiverSigRequiredWrapper", $var);
        return $this;}

    /**
     **
     * A short description of this Account.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue memo = 14;</code>
     * @return \Google\Protobuf\StringValue|null
     */
    public function getMemo()
    {
        return $this->memo;
    }

    public function hasMemo()
    {
        return isset($this->memo);
    }

    public function clearMemo()
    {
        unset($this->memo);
    }

    /**
     * Returns the unboxed value from <code>getMemo()</code>

     **
     * A short description of this Account.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue memo = 14;</code>
     * @return string|null
     */
    public function getMemoUnwrapped()
    {
        return $this->readWrapperValue("memo");
    }

    /**
     **
     * A short description of this Account.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue memo = 14;</code>
     * @param \Google\Protobuf\StringValue $var
     * @return $this
     */
    public function setMemo($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\StringValue::class);
        $this->memo = $var;

        return $this;
    }

    /**
     * Sets the field by wrapping a primitive type in a Google\Protobuf\StringValue object.

     **
     * A short description of this Account.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue memo = 14;</code>
     * @param string|null $var
     * @return $this
     */
    public function setMemoUnwrapped($var)
    {
        $this->writeWrapperValue("memo", $var);
        return $this;}

    /**
     **
     * A maximum number of tokens that can be auto-associated
     * with this account.<br/>
     * By default this value is 0 for all accounts except for automatically
     * created accounts (i.e smart contracts) which default to -1.
     * <p>
     * If this value is `0`, then this account MUST manually associate to
     * a token before holding or transacting in that token.<br/>
     * This value MAY also be `-1` to indicate no limit.<br/>
     * If set, this value MUST NOT be less than `-1`.<br/>
     *
     * Generated from protobuf field <code>.google.protobuf.Int32Value max_automatic_token_associations = 15;</code>
     * @return \Google\Protobuf\Int32Value|null
     */
    public function getMaxAutomaticTokenAssociations()
    {
        return $this->max_automatic_token_associations;
    }

    public function hasMaxAutomaticTokenAssociations()
    {
        return isset($this->max_automatic_token_associations);
    }

    public function clearMaxAutomaticTokenAssociations()
    {
        unset($this->max_automatic_token_associations);
    }

    /**
     * Returns the unboxed value from <code>getMaxAutomaticTokenAssociations()</code>

     **
     * A maximum number of tokens that can be auto-associated
     * with this account.<br/>
     * By default this value is 0 for all accounts except for automatically
     * created accounts (i.e smart contracts) which default to -1.
     * <p>
     * If this value is `0`, then this account MUST manually associate to
     * a token before holding or transacting in that token.<br/>
     * This value MAY also be `-1` to indicate no limit.<br/>
     * If set, this value MUST NOT be less than `-1`.<br/>
     *
     * Generated from protobuf field <code>.google.protobuf.Int32Value max_automatic_token_associations = 15;</code>
     * @return int|null
     */
    public function getMaxAutomaticTokenAssociationsUnwrapped()
    {
        return $this->readWrapperValue("max_automatic_token_associations");
    }

    /**
     **
     * A maximum number of tokens that can be auto-associated
     * with this account.<br/>
     * By default this value is 0 for all accounts except for automatically
     * created accounts (i.e smart contracts) which default to -1.
     * <p>
     * If this value is `0`, then this account MUST manually associate to
     * a token before holding or transacting in that token.<br/>
     * This value MAY also be `-1` to indicate no limit.<br/>
     * If set, this value MUST NOT be less than `-1`.<br/>
     *
     * Generated from protobuf field <code>.google.protobuf.Int32Value max_automatic_token_associations = 15;</code>
     * @param \Google\Protobuf\Int32Value $var
     * @return $this
     */
    public function setMaxAutomaticTokenAssociations($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Int32Value::class);
        $this->max_automatic_token_associations = $var;

        return $this;
    }

    /**
     * Sets the field by wrapping a primitive type in a Google\Protobuf\Int32Value object.

     **
     * A maximum number of tokens that can be auto-associated
     * with this account.<br/>
     * By default this value is 0 for all accounts except for automatically
     * created accounts (i.e smart contracts) which default to -1.
     * <p>
     * If this value is `0`, then this account MUST manually associate to
     * a token before holding or transacting in that token.<br/>
     * This value MAY also be `-1` to indicate no limit.<br/>
     * If set, this value MUST NOT be less than `-1`.<br/>
     *
     * Generated from protobuf field <code>.google.protobuf.Int32Value max_automatic_token_associations = 15;</code>
     * @param int|null $var
     * @return $this
     */
    public function setMaxAutomaticTokenAssociationsUnwrapped($var)
    {
        $this->writeWrapperValue("max_automatic_token_associations", $var);
        return $this;}

    /**
     **
     * ID of the account to which this account is staking its balances.
     * <p>
     * If this account is not currently staking its balances, then this
     * field, if set, MUST be the sentinel value of `0.0.0`.
     *
     * Generated from protobuf field <code>.proto.AccountID staked_account_id = 16;</code>
     * @return \Proto\AccountID|null
     */
    public function getStakedAccountId()
    {
        return $this->readOneof(16);
    }

    public function hasStakedAccountId()
    {
        return $this->hasOneof(16);
    }

    /**
     **
     * ID of the account to which this account is staking its balances.
     * <p>
     * If this account is not currently staking its balances, then this
     * field, if set, MUST be the sentinel value of `0.0.0`.
     *
     * Generated from protobuf field <code>.proto.AccountID staked_account_id = 16;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setStakedAccountId($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->writeOneof(16, $var);

        return $this;
    }

    /**
     **
     * ID of the node this account is staked to.
     * <p>
     * If this account is not currently staking its balances, then this
     * field, if set, SHALL be the sentinel value of `-1`.<br/>
     * Wallet software SHOULD surface staking issues to users and provide a
     * simple mechanism to update staking to a new node ID in the event the
     * prior staked node ID ceases to be valid.
     *
     * Generated from protobuf field <code>int64 staked_node_id = 17;</code>
     * @return int|string
     */
    public function getStakedNodeId()
    {
        return $this->readOneof(17);
    }

    public function hasStakedNodeId()
    {
        return $this->hasOneof(17);
    }

    /**
     **
     * ID of the node this account is staked to.
     * <p>
     * If this account is not currently staking its balances, then this
     * field, if set, SHALL be the sentinel value of `-1`.<br/>
     * Wallet software SHOULD surface staking issues to users and provide a
     * simple mechanism to update staking to a new node ID in the event the
     * prior staked node ID ceases to be valid.
     *
     * Generated from protobuf field <code>int64 staked_node_id = 17;</code>
     * @param int|string $var
     * @return $this
     */
    public function setStakedNodeId($var)
    {
        GPBUtil::checkInt64($var);
        $this->writeOneof(17, $var);

        return $this;
    }

    /**
     **
     * A boolean indicating that this account has chosen to decline rewards for
     * staking its balances.
     * <p>
     * This account MAY still stake its balances, but SHALL NOT receive reward
     * payments for doing so, if this value is set, and `true`.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue decline_reward = 18;</code>
     * @return \Google\Protobuf\BoolValue|null
     */
    public function getDeclineReward()
    {
        return $this->decline_reward;
    }

    public function hasDeclineReward()
    {
        return isset($this->decline_reward);
    }

    public function clearDeclineReward()
    {
        unset($this->decline_reward);
    }

    /**
     * Returns the unboxed value from <code>getDeclineReward()</code>

     **
     * A boolean indicating that this account has chosen to decline rewards for
     * staking its balances.
     * <p>
     * This account MAY still stake its balances, but SHALL NOT receive reward
     * payments for doing so, if this value is set, and `true`.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue decline_reward = 18;</code>
     * @return bool|null
     */
    public function getDeclineRewardUnwrapped()
    {
        return $this->readWrapperValue("decline_reward");
    }

    /**
     **
     * A boolean indicating that this account has chosen to decline rewards for
     * staking its balances.
     * <p>
     * This account MAY still stake its balances, but SHALL NOT receive reward
     * payments for doing so, if this value is set, and `true`.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue decline_reward = 18;</code>
     * @param \Google\Protobuf\BoolValue $var
     * @return $this
     */
    public function setDeclineReward($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\BoolValue::class);
        $this->decline_reward = $var;

        return $this;
    }

    /**
     * Sets the field by wrapping a primitive type in a Google\Protobuf\BoolValue object.

     **
     * A boolean indicating that this account has chosen to decline rewards for
     * staking its balances.
     * <p>
     * This account MAY still stake its balances, but SHALL NOT receive reward
     * payments for doing so, if this value is set, and `true`.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue decline_reward = 18;</code>
     * @param bool|null $var
     * @return $this
     */
    public function setDeclineRewardUnwrapped($var)
    {
        $this->writeWrapperValue("decline_reward", $var);
        return $this;}

    /**
     * @return string
     */
    public function getSendRecordThresholdField()
    {
        return $this->whichOneof("sendRecordThresholdField");
    }

    /**
     * @return string
     */
    public function getReceiveRecordThresholdField()
    {
        return $this->whichOneof("receiveRecordThresholdField");
    }

    /**
     * @return string
     */
    public function getReceiverSigRequiredField()
    {
        return $this->whichOneof("receiverSigRequiredField");
    }

    /**
     * @return string
     */
    public function getStakedId()
    {
        return $this->whichOneof("staked_id");
    }

}

