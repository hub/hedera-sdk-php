<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: consensus_update_topic.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Update the fields of an existing HCS topic.
 * The topicID field is REQUIRED. All other fields are OPTIONAL.<br/>
 * Fields set on this transaction SHALL be updated.<br/>
 * Fields _not_ set on this transaction SHALL NOT be updated.
 * ### Block Stream Effects
 * None
 *
 * Generated from protobuf message <code>proto.ConsensusUpdateTopicTransactionBody</code>
 */
class ConsensusUpdateTopicTransactionBody extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * The topic ID specifying the topic to update.
     * <p>
     * A topic with this ID MUST exist and MUST NOT be deleted.<br/>
     * This value is REQUIRED.
     *
     * Generated from protobuf field <code>.proto.TopicID topicID = 1;</code>
     */
    protected $topicID = null;
    /**
     **
     * An updated memo to be associated with this topic.
     * <p>
     * If this value is set, the current `adminKey` for the topic MUST sign
     * this transaction.<br/>
     * This value, if set, SHALL be encoded UTF-8 and SHALL NOT exceed
     * 100 bytes when so encoded.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue memo = 2;</code>
     */
    protected $memo = null;
    /**
     **
     * An updated expiration time for this topic, in seconds since the epoch.
     * <p>
     * For this purpose, `epoch` SHALL be the UNIX epoch
     * with 0 at `1970-01-01T00:00:00.000Z`.<br/>
     * The expirationTime MUST NOT be greater than the sum of
     * `MAX_AUTORENEW_PERIOD` and the actual consensus timestamp of
     * this transaction.<br/>
     * If `adminKey` is <b>unset</b> for the _topic_, this transaction MUST NOT
     * modify any other field.
     *
     * Generated from protobuf field <code>.proto.Timestamp expirationTime = 4;</code>
     */
    protected $expirationTime = null;
    /**
     **
     * Updated access control for modification of the topic.
     * <p>
     * If this field is set, that key and the previously set key MUST both
     * sign this transaction.<br/>
     * If this value is an empty `KeyList`, the prior key MUST sign this
     * transaction, and the topic SHALL be immutable after this transaction
     * completes, except for expiration and renewal.
     *
     * Generated from protobuf field <code>.proto.Key adminKey = 6;</code>
     */
    protected $adminKey = null;
    /**
     **
     * Updated access control for message submission to the topic.
     * <p>
     * If this value is set, the current `adminKey` for the topic MUST sign
     * this transaction.<br/>
     * If this value is set to an empty `KeyList`, the `submitKey` for the
     * topic will be unset after this transaction completes. When the
     * `submitKey` is unset, any account may submit a message on the topic,
     * without restriction.
     *
     * Generated from protobuf field <code>.proto.Key submitKey = 7;</code>
     */
    protected $submitKey = null;
    /**
     * An updated value for the number of seconds by which the topic expiration
     * will be automatically extended upon expiration, if it has a valid
     * auto-renew account.
     * <p>
     * If this value is set, the current `adminKey` for the topic MUST sign
     * this transaction.<br/>
     * This value, if set, MUST be greater than the
     * configured MIN_AUTORENEW_PERIOD.<br/>
     * This value, if set, MUST be less than the
     * configured MAX_AUTORENEW_PERIOD.
     *
     * Generated from protobuf field <code>.proto.Duration autoRenewPeriod = 8;</code>
     */
    protected $autoRenewPeriod = null;
    /**
     **
     * An updated ID for the account to be charged renewal fees at the topic's
     * `expirationTime` to extend the lifetime of the topic.
     * <p>
     * If this value is set and not the "sentinel account", the referenced
     * account MUST sign this transaction.<br/>
     * If this value is set, the current `adminKey` for the topic MUST sign
     * this transaction.<br/>
     * If this value is set to the "sentinel account", which is `0.0.0`, the
     * `autoRenewAccount` SHALL be removed from the topic.
     *
     * Generated from protobuf field <code>.proto.AccountID autoRenewAccount = 9;</code>
     */
    protected $autoRenewAccount = null;
    /**
     **
     * Access control for update/delete of custom fees.
     * <p>
     * If set, subsequent consensus_update_topic transactions signed with this
     * key MAY update or delete the custom fees for this topic.<br/>
     * If this field is set, the admin key MUST sign this transaction.<br/>
     * If this field is set, the previous value SHALL be replaced.<br/>
     * If set to a 'Key' containing an empty 'KeyList', the previous value
     * SHALL be cleared.<br/>
     * If not set, the current key SHALL NOT change.<br/>
     * If unset in state, this field MUST NOT be set in this transaction.<br/>
     * If not set when the topic is created, this field CANNOT be set via
     * update.<br/>
     *
     * Generated from protobuf field <code>.proto.Key fee_schedule_key = 10;</code>
     */
    protected $fee_schedule_key = null;
    /**
     **
     * A set of keys<br/>
     * Keys in this list are permitted to submit messages to this topic without
     * paying custom fees associated with this topic.
     * <p>
     * If a submit transaction is signed by _any_ key included in this set,
     * custom fees SHALL NOT be charged for that transaction.<br/>
     * If this field is not set, the current set of keys SHALL NOT change.<br/>
     * If this field is set, but contains an empty list, any existing fee-exempt
     * keys SHALL be removed.<br/>
     * A `fee_exempt_key_list` MUST NOT contain more than
     * `MAX_ENTRIES_FOR_FEE_EXEMPT_KEY_LIST` keys.<br/>
     * A `fee_exempt_key_list` MUST NOT contain any duplicate keys.<br/>
     * A `fee_exempt_key_list` MAY contain keys for accounts that are inactive,
     * deleted, or non-existent.
     *
     * Generated from protobuf field <code>.proto.FeeExemptKeyList fee_exempt_key_list = 11;</code>
     */
    protected $fee_exempt_key_list = null;
    /**
     **
     * A set of custom fee definitions.<br/>
     * These are fees to be assessed for each submit to this topic.
     * <p>
     * Each fee defined in this set SHALL be evaluated for
     * each message submitted to this topic, and the resultant
     * total assessed fees SHALL be charged.<br/>
     * Custom fees defined here SHALL be assessed in addition to the base
     * network and node fees.<br/>
     * If this field is not set, the current set of custom fees
     * SHALL NOT change.<br/>
     * If this field is set, but contains an empty list, all current custom fees
     * SHALL be removed.
     * custom_fees list SHALL NOT contain more than
     * `MAX_CUSTOM_FEE_ENTRIES_FOR_TOPICS` entries.
     *
     * Generated from protobuf field <code>.proto.FixedCustomFeeList custom_fees = 12;</code>
     */
    protected $custom_fees = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\TopicID $topicID
     *          *
     *           The topic ID specifying the topic to update.
     *           <p>
     *           A topic with this ID MUST exist and MUST NOT be deleted.<br/>
     *           This value is REQUIRED.
     *     @type \Google\Protobuf\StringValue $memo
     *          *
     *           An updated memo to be associated with this topic.
     *           <p>
     *           If this value is set, the current `adminKey` for the topic MUST sign
     *           this transaction.<br/>
     *           This value, if set, SHALL be encoded UTF-8 and SHALL NOT exceed
     *           100 bytes when so encoded.
     *     @type \Proto\Timestamp $expirationTime
     *          *
     *           An updated expiration time for this topic, in seconds since the epoch.
     *           <p>
     *           For this purpose, `epoch` SHALL be the UNIX epoch
     *           with 0 at `1970-01-01T00:00:00.000Z`.<br/>
     *           The expirationTime MUST NOT be greater than the sum of
     *           `MAX_AUTORENEW_PERIOD` and the actual consensus timestamp of
     *           this transaction.<br/>
     *           If `adminKey` is <b>unset</b> for the _topic_, this transaction MUST NOT
     *           modify any other field.
     *     @type \Proto\Key $adminKey
     *          *
     *           Updated access control for modification of the topic.
     *           <p>
     *           If this field is set, that key and the previously set key MUST both
     *           sign this transaction.<br/>
     *           If this value is an empty `KeyList`, the prior key MUST sign this
     *           transaction, and the topic SHALL be immutable after this transaction
     *           completes, except for expiration and renewal.
     *     @type \Proto\Key $submitKey
     *          *
     *           Updated access control for message submission to the topic.
     *           <p>
     *           If this value is set, the current `adminKey` for the topic MUST sign
     *           this transaction.<br/>
     *           If this value is set to an empty `KeyList`, the `submitKey` for the
     *           topic will be unset after this transaction completes. When the
     *           `submitKey` is unset, any account may submit a message on the topic,
     *           without restriction.
     *     @type \Proto\Duration $autoRenewPeriod
     *           An updated value for the number of seconds by which the topic expiration
     *           will be automatically extended upon expiration, if it has a valid
     *           auto-renew account.
     *           <p>
     *           If this value is set, the current `adminKey` for the topic MUST sign
     *           this transaction.<br/>
     *           This value, if set, MUST be greater than the
     *           configured MIN_AUTORENEW_PERIOD.<br/>
     *           This value, if set, MUST be less than the
     *           configured MAX_AUTORENEW_PERIOD.
     *     @type \Proto\AccountID $autoRenewAccount
     *          *
     *           An updated ID for the account to be charged renewal fees at the topic's
     *           `expirationTime` to extend the lifetime of the topic.
     *           <p>
     *           If this value is set and not the "sentinel account", the referenced
     *           account MUST sign this transaction.<br/>
     *           If this value is set, the current `adminKey` for the topic MUST sign
     *           this transaction.<br/>
     *           If this value is set to the "sentinel account", which is `0.0.0`, the
     *           `autoRenewAccount` SHALL be removed from the topic.
     *     @type \Proto\Key $fee_schedule_key
     *          *
     *           Access control for update/delete of custom fees.
     *           <p>
     *           If set, subsequent consensus_update_topic transactions signed with this
     *           key MAY update or delete the custom fees for this topic.<br/>
     *           If this field is set, the admin key MUST sign this transaction.<br/>
     *           If this field is set, the previous value SHALL be replaced.<br/>
     *           If set to a 'Key' containing an empty 'KeyList', the previous value
     *           SHALL be cleared.<br/>
     *           If not set, the current key SHALL NOT change.<br/>
     *           If unset in state, this field MUST NOT be set in this transaction.<br/>
     *           If not set when the topic is created, this field CANNOT be set via
     *           update.<br/>
     *     @type \Proto\FeeExemptKeyList $fee_exempt_key_list
     *          *
     *           A set of keys<br/>
     *           Keys in this list are permitted to submit messages to this topic without
     *           paying custom fees associated with this topic.
     *           <p>
     *           If a submit transaction is signed by _any_ key included in this set,
     *           custom fees SHALL NOT be charged for that transaction.<br/>
     *           If this field is not set, the current set of keys SHALL NOT change.<br/>
     *           If this field is set, but contains an empty list, any existing fee-exempt
     *           keys SHALL be removed.<br/>
     *           A `fee_exempt_key_list` MUST NOT contain more than
     *           `MAX_ENTRIES_FOR_FEE_EXEMPT_KEY_LIST` keys.<br/>
     *           A `fee_exempt_key_list` MUST NOT contain any duplicate keys.<br/>
     *           A `fee_exempt_key_list` MAY contain keys for accounts that are inactive,
     *           deleted, or non-existent.
     *     @type \Proto\FixedCustomFeeList $custom_fees
     *          *
     *           A set of custom fee definitions.<br/>
     *           These are fees to be assessed for each submit to this topic.
     *           <p>
     *           Each fee defined in this set SHALL be evaluated for
     *           each message submitted to this topic, and the resultant
     *           total assessed fees SHALL be charged.<br/>
     *           Custom fees defined here SHALL be assessed in addition to the base
     *           network and node fees.<br/>
     *           If this field is not set, the current set of custom fees
     *           SHALL NOT change.<br/>
     *           If this field is set, but contains an empty list, all current custom fees
     *           SHALL be removed.
     *           custom_fees list SHALL NOT contain more than
     *           `MAX_CUSTOM_FEE_ENTRIES_FOR_TOPICS` entries.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ConsensusUpdateTopic::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * The topic ID specifying the topic to update.
     * <p>
     * A topic with this ID MUST exist and MUST NOT be deleted.<br/>
     * This value is REQUIRED.
     *
     * Generated from protobuf field <code>.proto.TopicID topicID = 1;</code>
     * @return \Proto\TopicID|null
     */
    public function getTopicID()
    {
        return $this->topicID;
    }

    public function hasTopicID()
    {
        return isset($this->topicID);
    }

    public function clearTopicID()
    {
        unset($this->topicID);
    }

    /**
     **
     * The topic ID specifying the topic to update.
     * <p>
     * A topic with this ID MUST exist and MUST NOT be deleted.<br/>
     * This value is REQUIRED.
     *
     * Generated from protobuf field <code>.proto.TopicID topicID = 1;</code>
     * @param \Proto\TopicID $var
     * @return $this
     */
    public function setTopicID($var)
    {
        GPBUtil::checkMessage($var, \Proto\TopicID::class);
        $this->topicID = $var;

        return $this;
    }

    /**
     **
     * An updated memo to be associated with this topic.
     * <p>
     * If this value is set, the current `adminKey` for the topic MUST sign
     * this transaction.<br/>
     * This value, if set, SHALL be encoded UTF-8 and SHALL NOT exceed
     * 100 bytes when so encoded.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue memo = 2;</code>
     * @return \Google\Protobuf\StringValue|null
     */
    public function getMemo()
    {
        return $this->memo;
    }

    public function hasMemo()
    {
        return isset($this->memo);
    }

    public function clearMemo()
    {
        unset($this->memo);
    }

    /**
     * Returns the unboxed value from <code>getMemo()</code>

     **
     * An updated memo to be associated with this topic.
     * <p>
     * If this value is set, the current `adminKey` for the topic MUST sign
     * this transaction.<br/>
     * This value, if set, SHALL be encoded UTF-8 and SHALL NOT exceed
     * 100 bytes when so encoded.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue memo = 2;</code>
     * @return string|null
     */
    public function getMemoUnwrapped()
    {
        return $this->readWrapperValue("memo");
    }

    /**
     **
     * An updated memo to be associated with this topic.
     * <p>
     * If this value is set, the current `adminKey` for the topic MUST sign
     * this transaction.<br/>
     * This value, if set, SHALL be encoded UTF-8 and SHALL NOT exceed
     * 100 bytes when so encoded.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue memo = 2;</code>
     * @param \Google\Protobuf\StringValue $var
     * @return $this
     */
    public function setMemo($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\StringValue::class);
        $this->memo = $var;

        return $this;
    }

    /**
     * Sets the field by wrapping a primitive type in a Google\Protobuf\StringValue object.

     **
     * An updated memo to be associated with this topic.
     * <p>
     * If this value is set, the current `adminKey` for the topic MUST sign
     * this transaction.<br/>
     * This value, if set, SHALL be encoded UTF-8 and SHALL NOT exceed
     * 100 bytes when so encoded.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue memo = 2;</code>
     * @param string|null $var
     * @return $this
     */
    public function setMemoUnwrapped($var)
    {
        $this->writeWrapperValue("memo", $var);
        return $this;}

    /**
     **
     * An updated expiration time for this topic, in seconds since the epoch.
     * <p>
     * For this purpose, `epoch` SHALL be the UNIX epoch
     * with 0 at `1970-01-01T00:00:00.000Z`.<br/>
     * The expirationTime MUST NOT be greater than the sum of
     * `MAX_AUTORENEW_PERIOD` and the actual consensus timestamp of
     * this transaction.<br/>
     * If `adminKey` is <b>unset</b> for the _topic_, this transaction MUST NOT
     * modify any other field.
     *
     * Generated from protobuf field <code>.proto.Timestamp expirationTime = 4;</code>
     * @return \Proto\Timestamp|null
     */
    public function getExpirationTime()
    {
        return $this->expirationTime;
    }

    public function hasExpirationTime()
    {
        return isset($this->expirationTime);
    }

    public function clearExpirationTime()
    {
        unset($this->expirationTime);
    }

    /**
     **
     * An updated expiration time for this topic, in seconds since the epoch.
     * <p>
     * For this purpose, `epoch` SHALL be the UNIX epoch
     * with 0 at `1970-01-01T00:00:00.000Z`.<br/>
     * The expirationTime MUST NOT be greater than the sum of
     * `MAX_AUTORENEW_PERIOD` and the actual consensus timestamp of
     * this transaction.<br/>
     * If `adminKey` is <b>unset</b> for the _topic_, this transaction MUST NOT
     * modify any other field.
     *
     * Generated from protobuf field <code>.proto.Timestamp expirationTime = 4;</code>
     * @param \Proto\Timestamp $var
     * @return $this
     */
    public function setExpirationTime($var)
    {
        GPBUtil::checkMessage($var, \Proto\Timestamp::class);
        $this->expirationTime = $var;

        return $this;
    }

    /**
     **
     * Updated access control for modification of the topic.
     * <p>
     * If this field is set, that key and the previously set key MUST both
     * sign this transaction.<br/>
     * If this value is an empty `KeyList`, the prior key MUST sign this
     * transaction, and the topic SHALL be immutable after this transaction
     * completes, except for expiration and renewal.
     *
     * Generated from protobuf field <code>.proto.Key adminKey = 6;</code>
     * @return \Proto\Key|null
     */
    public function getAdminKey()
    {
        return $this->adminKey;
    }

    public function hasAdminKey()
    {
        return isset($this->adminKey);
    }

    public function clearAdminKey()
    {
        unset($this->adminKey);
    }

    /**
     **
     * Updated access control for modification of the topic.
     * <p>
     * If this field is set, that key and the previously set key MUST both
     * sign this transaction.<br/>
     * If this value is an empty `KeyList`, the prior key MUST sign this
     * transaction, and the topic SHALL be immutable after this transaction
     * completes, except for expiration and renewal.
     *
     * Generated from protobuf field <code>.proto.Key adminKey = 6;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setAdminKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->adminKey = $var;

        return $this;
    }

    /**
     **
     * Updated access control for message submission to the topic.
     * <p>
     * If this value is set, the current `adminKey` for the topic MUST sign
     * this transaction.<br/>
     * If this value is set to an empty `KeyList`, the `submitKey` for the
     * topic will be unset after this transaction completes. When the
     * `submitKey` is unset, any account may submit a message on the topic,
     * without restriction.
     *
     * Generated from protobuf field <code>.proto.Key submitKey = 7;</code>
     * @return \Proto\Key|null
     */
    public function getSubmitKey()
    {
        return $this->submitKey;
    }

    public function hasSubmitKey()
    {
        return isset($this->submitKey);
    }

    public function clearSubmitKey()
    {
        unset($this->submitKey);
    }

    /**
     **
     * Updated access control for message submission to the topic.
     * <p>
     * If this value is set, the current `adminKey` for the topic MUST sign
     * this transaction.<br/>
     * If this value is set to an empty `KeyList`, the `submitKey` for the
     * topic will be unset after this transaction completes. When the
     * `submitKey` is unset, any account may submit a message on the topic,
     * without restriction.
     *
     * Generated from protobuf field <code>.proto.Key submitKey = 7;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setSubmitKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->submitKey = $var;

        return $this;
    }

    /**
     * An updated value for the number of seconds by which the topic expiration
     * will be automatically extended upon expiration, if it has a valid
     * auto-renew account.
     * <p>
     * If this value is set, the current `adminKey` for the topic MUST sign
     * this transaction.<br/>
     * This value, if set, MUST be greater than the
     * configured MIN_AUTORENEW_PERIOD.<br/>
     * This value, if set, MUST be less than the
     * configured MAX_AUTORENEW_PERIOD.
     *
     * Generated from protobuf field <code>.proto.Duration autoRenewPeriod = 8;</code>
     * @return \Proto\Duration|null
     */
    public function getAutoRenewPeriod()
    {
        return $this->autoRenewPeriod;
    }

    public function hasAutoRenewPeriod()
    {
        return isset($this->autoRenewPeriod);
    }

    public function clearAutoRenewPeriod()
    {
        unset($this->autoRenewPeriod);
    }

    /**
     * An updated value for the number of seconds by which the topic expiration
     * will be automatically extended upon expiration, if it has a valid
     * auto-renew account.
     * <p>
     * If this value is set, the current `adminKey` for the topic MUST sign
     * this transaction.<br/>
     * This value, if set, MUST be greater than the
     * configured MIN_AUTORENEW_PERIOD.<br/>
     * This value, if set, MUST be less than the
     * configured MAX_AUTORENEW_PERIOD.
     *
     * Generated from protobuf field <code>.proto.Duration autoRenewPeriod = 8;</code>
     * @param \Proto\Duration $var
     * @return $this
     */
    public function setAutoRenewPeriod($var)
    {
        GPBUtil::checkMessage($var, \Proto\Duration::class);
        $this->autoRenewPeriod = $var;

        return $this;
    }

    /**
     **
     * An updated ID for the account to be charged renewal fees at the topic's
     * `expirationTime` to extend the lifetime of the topic.
     * <p>
     * If this value is set and not the "sentinel account", the referenced
     * account MUST sign this transaction.<br/>
     * If this value is set, the current `adminKey` for the topic MUST sign
     * this transaction.<br/>
     * If this value is set to the "sentinel account", which is `0.0.0`, the
     * `autoRenewAccount` SHALL be removed from the topic.
     *
     * Generated from protobuf field <code>.proto.AccountID autoRenewAccount = 9;</code>
     * @return \Proto\AccountID|null
     */
    public function getAutoRenewAccount()
    {
        return $this->autoRenewAccount;
    }

    public function hasAutoRenewAccount()
    {
        return isset($this->autoRenewAccount);
    }

    public function clearAutoRenewAccount()
    {
        unset($this->autoRenewAccount);
    }

    /**
     **
     * An updated ID for the account to be charged renewal fees at the topic's
     * `expirationTime` to extend the lifetime of the topic.
     * <p>
     * If this value is set and not the "sentinel account", the referenced
     * account MUST sign this transaction.<br/>
     * If this value is set, the current `adminKey` for the topic MUST sign
     * this transaction.<br/>
     * If this value is set to the "sentinel account", which is `0.0.0`, the
     * `autoRenewAccount` SHALL be removed from the topic.
     *
     * Generated from protobuf field <code>.proto.AccountID autoRenewAccount = 9;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setAutoRenewAccount($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->autoRenewAccount = $var;

        return $this;
    }

    /**
     **
     * Access control for update/delete of custom fees.
     * <p>
     * If set, subsequent consensus_update_topic transactions signed with this
     * key MAY update or delete the custom fees for this topic.<br/>
     * If this field is set, the admin key MUST sign this transaction.<br/>
     * If this field is set, the previous value SHALL be replaced.<br/>
     * If set to a 'Key' containing an empty 'KeyList', the previous value
     * SHALL be cleared.<br/>
     * If not set, the current key SHALL NOT change.<br/>
     * If unset in state, this field MUST NOT be set in this transaction.<br/>
     * If not set when the topic is created, this field CANNOT be set via
     * update.<br/>
     *
     * Generated from protobuf field <code>.proto.Key fee_schedule_key = 10;</code>
     * @return \Proto\Key|null
     */
    public function getFeeScheduleKey()
    {
        return $this->fee_schedule_key;
    }

    public function hasFeeScheduleKey()
    {
        return isset($this->fee_schedule_key);
    }

    public function clearFeeScheduleKey()
    {
        unset($this->fee_schedule_key);
    }

    /**
     **
     * Access control for update/delete of custom fees.
     * <p>
     * If set, subsequent consensus_update_topic transactions signed with this
     * key MAY update or delete the custom fees for this topic.<br/>
     * If this field is set, the admin key MUST sign this transaction.<br/>
     * If this field is set, the previous value SHALL be replaced.<br/>
     * If set to a 'Key' containing an empty 'KeyList', the previous value
     * SHALL be cleared.<br/>
     * If not set, the current key SHALL NOT change.<br/>
     * If unset in state, this field MUST NOT be set in this transaction.<br/>
     * If not set when the topic is created, this field CANNOT be set via
     * update.<br/>
     *
     * Generated from protobuf field <code>.proto.Key fee_schedule_key = 10;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setFeeScheduleKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->fee_schedule_key = $var;

        return $this;
    }

    /**
     **
     * A set of keys<br/>
     * Keys in this list are permitted to submit messages to this topic without
     * paying custom fees associated with this topic.
     * <p>
     * If a submit transaction is signed by _any_ key included in this set,
     * custom fees SHALL NOT be charged for that transaction.<br/>
     * If this field is not set, the current set of keys SHALL NOT change.<br/>
     * If this field is set, but contains an empty list, any existing fee-exempt
     * keys SHALL be removed.<br/>
     * A `fee_exempt_key_list` MUST NOT contain more than
     * `MAX_ENTRIES_FOR_FEE_EXEMPT_KEY_LIST` keys.<br/>
     * A `fee_exempt_key_list` MUST NOT contain any duplicate keys.<br/>
     * A `fee_exempt_key_list` MAY contain keys for accounts that are inactive,
     * deleted, or non-existent.
     *
     * Generated from protobuf field <code>.proto.FeeExemptKeyList fee_exempt_key_list = 11;</code>
     * @return \Proto\FeeExemptKeyList|null
     */
    public function getFeeExemptKeyList()
    {
        return $this->fee_exempt_key_list;
    }

    public function hasFeeExemptKeyList()
    {
        return isset($this->fee_exempt_key_list);
    }

    public function clearFeeExemptKeyList()
    {
        unset($this->fee_exempt_key_list);
    }

    /**
     **
     * A set of keys<br/>
     * Keys in this list are permitted to submit messages to this topic without
     * paying custom fees associated with this topic.
     * <p>
     * If a submit transaction is signed by _any_ key included in this set,
     * custom fees SHALL NOT be charged for that transaction.<br/>
     * If this field is not set, the current set of keys SHALL NOT change.<br/>
     * If this field is set, but contains an empty list, any existing fee-exempt
     * keys SHALL be removed.<br/>
     * A `fee_exempt_key_list` MUST NOT contain more than
     * `MAX_ENTRIES_FOR_FEE_EXEMPT_KEY_LIST` keys.<br/>
     * A `fee_exempt_key_list` MUST NOT contain any duplicate keys.<br/>
     * A `fee_exempt_key_list` MAY contain keys for accounts that are inactive,
     * deleted, or non-existent.
     *
     * Generated from protobuf field <code>.proto.FeeExemptKeyList fee_exempt_key_list = 11;</code>
     * @param \Proto\FeeExemptKeyList $var
     * @return $this
     */
    public function setFeeExemptKeyList($var)
    {
        GPBUtil::checkMessage($var, \Proto\FeeExemptKeyList::class);
        $this->fee_exempt_key_list = $var;

        return $this;
    }

    /**
     **
     * A set of custom fee definitions.<br/>
     * These are fees to be assessed for each submit to this topic.
     * <p>
     * Each fee defined in this set SHALL be evaluated for
     * each message submitted to this topic, and the resultant
     * total assessed fees SHALL be charged.<br/>
     * Custom fees defined here SHALL be assessed in addition to the base
     * network and node fees.<br/>
     * If this field is not set, the current set of custom fees
     * SHALL NOT change.<br/>
     * If this field is set, but contains an empty list, all current custom fees
     * SHALL be removed.
     * custom_fees list SHALL NOT contain more than
     * `MAX_CUSTOM_FEE_ENTRIES_FOR_TOPICS` entries.
     *
     * Generated from protobuf field <code>.proto.FixedCustomFeeList custom_fees = 12;</code>
     * @return \Proto\FixedCustomFeeList|null
     */
    public function getCustomFees()
    {
        return $this->custom_fees;
    }

    public function hasCustomFees()
    {
        return isset($this->custom_fees);
    }

    public function clearCustomFees()
    {
        unset($this->custom_fees);
    }

    /**
     **
     * A set of custom fee definitions.<br/>
     * These are fees to be assessed for each submit to this topic.
     * <p>
     * Each fee defined in this set SHALL be evaluated for
     * each message submitted to this topic, and the resultant
     * total assessed fees SHALL be charged.<br/>
     * Custom fees defined here SHALL be assessed in addition to the base
     * network and node fees.<br/>
     * If this field is not set, the current set of custom fees
     * SHALL NOT change.<br/>
     * If this field is set, but contains an empty list, all current custom fees
     * SHALL be removed.
     * custom_fees list SHALL NOT contain more than
     * `MAX_CUSTOM_FEE_ENTRIES_FOR_TOPICS` entries.
     *
     * Generated from protobuf field <code>.proto.FixedCustomFeeList custom_fees = 12;</code>
     * @param \Proto\FixedCustomFeeList $var
     * @return $this
     */
    public function setCustomFees($var)
    {
        GPBUtil::checkMessage($var, \Proto\FixedCustomFeeList::class);
        $this->custom_fees = $var;

        return $this;
    }

}

