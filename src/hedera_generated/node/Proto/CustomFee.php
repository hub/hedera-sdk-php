<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: custom_fees.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * A transfer fee to assess during a CryptoTransfer.<br/>
 * This fee applies to transactions that transfer units of the token to
 * which the fee is attached. A custom fee may be either fixed or fractional,
 * and must specify a fee collector account to receive the assessed fees.
 * Custom fees MUST be greater than zero (0).
 *
 * Generated from protobuf message <code>proto.CustomFee</code>
 */
class CustomFee extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * The account to receive the custom fee.
     *
     * Generated from protobuf field <code>.proto.AccountID fee_collector_account_id = 3;</code>
     */
    protected $fee_collector_account_id = null;
    /**
     **
     * Flag indicating to exempt all custom fee collector accounts for this
     * token type from paying this custom fee when sending tokens.
     * <p>
     * The treasury account for a token, and the account identified by the
     * `fee_collector_account_id` field of this `CustomFee` are always exempt
     * from this custom fee to avoid redundant and unnecessary transfers.
     * If this value is `true` then the account(s) identified in
     * `fee_collector_account_id` for _all_ custom fee definitions for this
     * token type SHALL also be exempt from this custom fee.
     * This behavior is specified in HIP-573.
     *
     * Generated from protobuf field <code>bool all_collectors_are_exempt = 5;</code>
     */
    protected $all_collectors_are_exempt = false;
    protected $fee;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\FixedFee $fixed_fee
     *          *
     *           A fixed fee to be charged to the `sender` for every token transfer.
     *           <p>
     *           This type of fee MAY be defined for any token type.<br/>
     *           This type of fee MAY be more consistent and reliable than
     *           other types.
     *     @type \Proto\FractionalFee $fractional_fee
     *          *
     *           A fee defined as a fraction of the tokens transferred.
     *           <p>
     *           This type of fee MUST NOT be defined for a non-fungible/unique
     *           token type.<br/>
     *           This fee MAY be charged to either sender, as an increase to the
     *           amount sent, or receiver, as a reduction to the amount received.
     *     @type \Proto\RoyaltyFee $royalty_fee
     *          *
     *           A fee charged as royalty for any transfer of a
     *           non-fungible/unique token.
     *           <p>
     *           This type of fee MUST NOT be defined for a
     *           fungible/common token type.
     *     @type \Proto\AccountID $fee_collector_account_id
     *          *
     *           The account to receive the custom fee.
     *     @type bool $all_collectors_are_exempt
     *          *
     *           Flag indicating to exempt all custom fee collector accounts for this
     *           token type from paying this custom fee when sending tokens.
     *           <p>
     *           The treasury account for a token, and the account identified by the
     *           `fee_collector_account_id` field of this `CustomFee` are always exempt
     *           from this custom fee to avoid redundant and unnecessary transfers.
     *           If this value is `true` then the account(s) identified in
     *           `fee_collector_account_id` for _all_ custom fee definitions for this
     *           token type SHALL also be exempt from this custom fee.
     *           This behavior is specified in HIP-573.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\CustomFees::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A fixed fee to be charged to the `sender` for every token transfer.
     * <p>
     * This type of fee MAY be defined for any token type.<br/>
     * This type of fee MAY be more consistent and reliable than
     * other types.
     *
     * Generated from protobuf field <code>.proto.FixedFee fixed_fee = 1;</code>
     * @return \Proto\FixedFee|null
     */
    public function getFixedFee()
    {
        return $this->readOneof(1);
    }

    public function hasFixedFee()
    {
        return $this->hasOneof(1);
    }

    /**
     **
     * A fixed fee to be charged to the `sender` for every token transfer.
     * <p>
     * This type of fee MAY be defined for any token type.<br/>
     * This type of fee MAY be more consistent and reliable than
     * other types.
     *
     * Generated from protobuf field <code>.proto.FixedFee fixed_fee = 1;</code>
     * @param \Proto\FixedFee $var
     * @return $this
     */
    public function setFixedFee($var)
    {
        GPBUtil::checkMessage($var, \Proto\FixedFee::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     **
     * A fee defined as a fraction of the tokens transferred.
     * <p>
     * This type of fee MUST NOT be defined for a non-fungible/unique
     * token type.<br/>
     * This fee MAY be charged to either sender, as an increase to the
     * amount sent, or receiver, as a reduction to the amount received.
     *
     * Generated from protobuf field <code>.proto.FractionalFee fractional_fee = 2;</code>
     * @return \Proto\FractionalFee|null
     */
    public function getFractionalFee()
    {
        return $this->readOneof(2);
    }

    public function hasFractionalFee()
    {
        return $this->hasOneof(2);
    }

    /**
     **
     * A fee defined as a fraction of the tokens transferred.
     * <p>
     * This type of fee MUST NOT be defined for a non-fungible/unique
     * token type.<br/>
     * This fee MAY be charged to either sender, as an increase to the
     * amount sent, or receiver, as a reduction to the amount received.
     *
     * Generated from protobuf field <code>.proto.FractionalFee fractional_fee = 2;</code>
     * @param \Proto\FractionalFee $var
     * @return $this
     */
    public function setFractionalFee($var)
    {
        GPBUtil::checkMessage($var, \Proto\FractionalFee::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     **
     * A fee charged as royalty for any transfer of a
     * non-fungible/unique token.
     * <p>
     * This type of fee MUST NOT be defined for a
     * fungible/common token type.
     *
     * Generated from protobuf field <code>.proto.RoyaltyFee royalty_fee = 4;</code>
     * @return \Proto\RoyaltyFee|null
     */
    public function getRoyaltyFee()
    {
        return $this->readOneof(4);
    }

    public function hasRoyaltyFee()
    {
        return $this->hasOneof(4);
    }

    /**
     **
     * A fee charged as royalty for any transfer of a
     * non-fungible/unique token.
     * <p>
     * This type of fee MUST NOT be defined for a
     * fungible/common token type.
     *
     * Generated from protobuf field <code>.proto.RoyaltyFee royalty_fee = 4;</code>
     * @param \Proto\RoyaltyFee $var
     * @return $this
     */
    public function setRoyaltyFee($var)
    {
        GPBUtil::checkMessage($var, \Proto\RoyaltyFee::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     **
     * The account to receive the custom fee.
     *
     * Generated from protobuf field <code>.proto.AccountID fee_collector_account_id = 3;</code>
     * @return \Proto\AccountID|null
     */
    public function getFeeCollectorAccountId()
    {
        return $this->fee_collector_account_id;
    }

    public function hasFeeCollectorAccountId()
    {
        return isset($this->fee_collector_account_id);
    }

    public function clearFeeCollectorAccountId()
    {
        unset($this->fee_collector_account_id);
    }

    /**
     **
     * The account to receive the custom fee.
     *
     * Generated from protobuf field <code>.proto.AccountID fee_collector_account_id = 3;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setFeeCollectorAccountId($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->fee_collector_account_id = $var;

        return $this;
    }

    /**
     **
     * Flag indicating to exempt all custom fee collector accounts for this
     * token type from paying this custom fee when sending tokens.
     * <p>
     * The treasury account for a token, and the account identified by the
     * `fee_collector_account_id` field of this `CustomFee` are always exempt
     * from this custom fee to avoid redundant and unnecessary transfers.
     * If this value is `true` then the account(s) identified in
     * `fee_collector_account_id` for _all_ custom fee definitions for this
     * token type SHALL also be exempt from this custom fee.
     * This behavior is specified in HIP-573.
     *
     * Generated from protobuf field <code>bool all_collectors_are_exempt = 5;</code>
     * @return bool
     */
    public function getAllCollectorsAreExempt()
    {
        return $this->all_collectors_are_exempt;
    }

    /**
     **
     * Flag indicating to exempt all custom fee collector accounts for this
     * token type from paying this custom fee when sending tokens.
     * <p>
     * The treasury account for a token, and the account identified by the
     * `fee_collector_account_id` field of this `CustomFee` are always exempt
     * from this custom fee to avoid redundant and unnecessary transfers.
     * If this value is `true` then the account(s) identified in
     * `fee_collector_account_id` for _all_ custom fee definitions for this
     * token type SHALL also be exempt from this custom fee.
     * This behavior is specified in HIP-573.
     *
     * Generated from protobuf field <code>bool all_collectors_are_exempt = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setAllCollectorsAreExempt($var)
    {
        GPBUtil::checkBool($var);
        $this->all_collectors_are_exempt = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getFee()
    {
        return $this->whichOneof("fee");
    }

}

