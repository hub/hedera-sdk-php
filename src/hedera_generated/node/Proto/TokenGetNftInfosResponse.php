<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: token_get_nft_infos.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Deleted and unsupported.
 *
 * Generated from protobuf message <code>proto.TokenGetNftInfosResponse</code>
 */
class TokenGetNftInfosResponse extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * The standard response information for queries.<br/>
     * This includes the values requested in the `QueryHeader`
     * (cost, state proof, both, or neither).
     *
     * Generated from protobuf field <code>.proto.ResponseHeader header = 1;</code>
     */
    protected $header = null;
    /**
     **
     * A token identifier.
     * <p>
     * This SHALL identify the token type to query.<br/>
     * The identified token MUST exist, and MUST NOT be deleted.
     * The identified token MUST be a non-fungible/unique type.
     *
     * Generated from protobuf field <code>.proto.TokenID tokenID = 2;</code>
     */
    protected $tokenID = null;
    /**
     **
     * A list of messages, each of which describes one NFT.
     *
     * Generated from protobuf field <code>repeated .proto.TokenNftInfo nfts = 3;</code>
     */
    private $nfts;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\ResponseHeader $header
     *          *
     *           The standard response information for queries.<br/>
     *           This includes the values requested in the `QueryHeader`
     *           (cost, state proof, both, or neither).
     *     @type \Proto\TokenID $tokenID
     *          *
     *           A token identifier.
     *           <p>
     *           This SHALL identify the token type to query.<br/>
     *           The identified token MUST exist, and MUST NOT be deleted.
     *           The identified token MUST be a non-fungible/unique type.
     *     @type \Proto\TokenNftInfo[] $nfts
     *          *
     *           A list of messages, each of which describes one NFT.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\TokenGetNftInfos::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * The standard response information for queries.<br/>
     * This includes the values requested in the `QueryHeader`
     * (cost, state proof, both, or neither).
     *
     * Generated from protobuf field <code>.proto.ResponseHeader header = 1;</code>
     * @return \Proto\ResponseHeader|null
     */
    public function getHeader()
    {
        return $this->header;
    }

    public function hasHeader()
    {
        return isset($this->header);
    }

    public function clearHeader()
    {
        unset($this->header);
    }

    /**
     **
     * The standard response information for queries.<br/>
     * This includes the values requested in the `QueryHeader`
     * (cost, state proof, both, or neither).
     *
     * Generated from protobuf field <code>.proto.ResponseHeader header = 1;</code>
     * @param \Proto\ResponseHeader $var
     * @return $this
     */
    public function setHeader($var)
    {
        GPBUtil::checkMessage($var, \Proto\ResponseHeader::class);
        $this->header = $var;

        return $this;
    }

    /**
     **
     * A token identifier.
     * <p>
     * This SHALL identify the token type to query.<br/>
     * The identified token MUST exist, and MUST NOT be deleted.
     * The identified token MUST be a non-fungible/unique type.
     *
     * Generated from protobuf field <code>.proto.TokenID tokenID = 2;</code>
     * @return \Proto\TokenID|null
     */
    public function getTokenID()
    {
        return $this->tokenID;
    }

    public function hasTokenID()
    {
        return isset($this->tokenID);
    }

    public function clearTokenID()
    {
        unset($this->tokenID);
    }

    /**
     **
     * A token identifier.
     * <p>
     * This SHALL identify the token type to query.<br/>
     * The identified token MUST exist, and MUST NOT be deleted.
     * The identified token MUST be a non-fungible/unique type.
     *
     * Generated from protobuf field <code>.proto.TokenID tokenID = 2;</code>
     * @param \Proto\TokenID $var
     * @return $this
     */
    public function setTokenID($var)
    {
        GPBUtil::checkMessage($var, \Proto\TokenID::class);
        $this->tokenID = $var;

        return $this;
    }

    /**
     **
     * A list of messages, each of which describes one NFT.
     *
     * Generated from protobuf field <code>repeated .proto.TokenNftInfo nfts = 3;</code>
     * @return RepeatedField<\Proto\TokenNftInfo>
     */
    public function getNfts()
    {
        return $this->nfts;
    }

    /**
     **
     * A list of messages, each of which describes one NFT.
     *
     * Generated from protobuf field <code>repeated .proto.TokenNftInfo nfts = 3;</code>
     * @param \Proto\TokenNftInfo[] $var
     * @return $this
     */
    public function setNfts($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Proto\TokenNftInfo::class);
        $this->nfts = $arr;

        return $this;
    }

}

