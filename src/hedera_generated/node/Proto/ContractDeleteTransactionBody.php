<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: contract_delete.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Delete a smart contract, and transfer any remaining HBAR balance to a
 * designated account.
 * If this call succeeds then all subsequent calls to that smart contract
 * SHALL execute the `0x0` opcode, as required for EVM equivalence.
 * ### Requirements
 *  - An account or smart contract MUST be designated to receive all remaining
 *    account balances.
 *  - The smart contract MUST have an admin key set. If the contract does not
 *    have `admin_key` set, then this transaction SHALL fail and response code
 *    `MODIFYING_IMMUTABLE_CONTRACT` SHALL be set.
 *  - If `admin_key` is, or contains, an empty `KeyList` key, it SHALL be
 *    treated the same as an admin key that is not set.
 *  - The `Key` set for `admin_key` on the smart contract MUST have a valid
 *    signature set on this transaction.
 *  - The designated receiving account MAY have `receiver_sig_required` set. If
 *    that field is set, the receiver account MUST also sign this transaction.
 *  - The field `permanent_removal` MUST NOT be set. That field is reserved for
 *    internal system use when purging the smart contract from state. Any user
 *    transaction with that field set SHALL be rejected and a response code
 *    `PERMANENT_REMOVAL_REQUIRES_SYSTEM_INITIATION` SHALL be set.
 * ### Block Stream Effects
 * None
 *
 * Generated from protobuf message <code>proto.ContractDeleteTransactionBody</code>
 */
class ContractDeleteTransactionBody extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * The id of the contract to be deleted.
     * <p>
     * This field is REQUIRED.
     *
     * Generated from protobuf field <code>.proto.ContractID contractID = 1;</code>
     */
    protected $contractID = null;
    /**
     **
     * A flag indicating that this transaction is "synthetic"; initiated by the
     * node software.
     * <p>
     * The consensus nodes create such "synthetic" transactions to both to
     * properly manage state changes and to communicate those changes to other
     * systems via the Block Stream.<br/>
     * A user-initiated transaction MUST NOT set this flag.
     *
     * Generated from protobuf field <code>bool permanent_removal = 4;</code>
     */
    protected $permanent_removal = false;
    protected $obtainers;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\ContractID $contractID
     *          *
     *           The id of the contract to be deleted.
     *           <p>
     *           This field is REQUIRED.
     *     @type \Proto\AccountID $transferAccountID
     *          *
     *           An Account ID recipient.
     *           <p>
     *           This account SHALL receive all HBAR and other tokens still owned by
     *           the contract that is removed.
     *     @type \Proto\ContractID $transferContractID
     *          *
     *           A contract ID recipient.
     *           <p>
     *           This contract SHALL receive all HBAR and other tokens still owned by
     *           the contract that is removed.
     *     @type bool $permanent_removal
     *          *
     *           A flag indicating that this transaction is "synthetic"; initiated by the
     *           node software.
     *           <p>
     *           The consensus nodes create such "synthetic" transactions to both to
     *           properly manage state changes and to communicate those changes to other
     *           systems via the Block Stream.<br/>
     *           A user-initiated transaction MUST NOT set this flag.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ContractDelete::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * The id of the contract to be deleted.
     * <p>
     * This field is REQUIRED.
     *
     * Generated from protobuf field <code>.proto.ContractID contractID = 1;</code>
     * @return \Proto\ContractID|null
     */
    public function getContractID()
    {
        return $this->contractID;
    }

    public function hasContractID()
    {
        return isset($this->contractID);
    }

    public function clearContractID()
    {
        unset($this->contractID);
    }

    /**
     **
     * The id of the contract to be deleted.
     * <p>
     * This field is REQUIRED.
     *
     * Generated from protobuf field <code>.proto.ContractID contractID = 1;</code>
     * @param \Proto\ContractID $var
     * @return $this
     */
    public function setContractID($var)
    {
        GPBUtil::checkMessage($var, \Proto\ContractID::class);
        $this->contractID = $var;

        return $this;
    }

    /**
     **
     * An Account ID recipient.
     * <p>
     * This account SHALL receive all HBAR and other tokens still owned by
     * the contract that is removed.
     *
     * Generated from protobuf field <code>.proto.AccountID transferAccountID = 2;</code>
     * @return \Proto\AccountID|null
     */
    public function getTransferAccountID()
    {
        return $this->readOneof(2);
    }

    public function hasTransferAccountID()
    {
        return $this->hasOneof(2);
    }

    /**
     **
     * An Account ID recipient.
     * <p>
     * This account SHALL receive all HBAR and other tokens still owned by
     * the contract that is removed.
     *
     * Generated from protobuf field <code>.proto.AccountID transferAccountID = 2;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setTransferAccountID($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     **
     * A contract ID recipient.
     * <p>
     * This contract SHALL receive all HBAR and other tokens still owned by
     * the contract that is removed.
     *
     * Generated from protobuf field <code>.proto.ContractID transferContractID = 3;</code>
     * @return \Proto\ContractID|null
     */
    public function getTransferContractID()
    {
        return $this->readOneof(3);
    }

    public function hasTransferContractID()
    {
        return $this->hasOneof(3);
    }

    /**
     **
     * A contract ID recipient.
     * <p>
     * This contract SHALL receive all HBAR and other tokens still owned by
     * the contract that is removed.
     *
     * Generated from protobuf field <code>.proto.ContractID transferContractID = 3;</code>
     * @param \Proto\ContractID $var
     * @return $this
     */
    public function setTransferContractID($var)
    {
        GPBUtil::checkMessage($var, \Proto\ContractID::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     **
     * A flag indicating that this transaction is "synthetic"; initiated by the
     * node software.
     * <p>
     * The consensus nodes create such "synthetic" transactions to both to
     * properly manage state changes and to communicate those changes to other
     * systems via the Block Stream.<br/>
     * A user-initiated transaction MUST NOT set this flag.
     *
     * Generated from protobuf field <code>bool permanent_removal = 4;</code>
     * @return bool
     */
    public function getPermanentRemoval()
    {
        return $this->permanent_removal;
    }

    /**
     **
     * A flag indicating that this transaction is "synthetic"; initiated by the
     * node software.
     * <p>
     * The consensus nodes create such "synthetic" transactions to both to
     * properly manage state changes and to communicate those changes to other
     * systems via the Block Stream.<br/>
     * A user-initiated transaction MUST NOT set this flag.
     *
     * Generated from protobuf field <code>bool permanent_removal = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setPermanentRemoval($var)
    {
        GPBUtil::checkBool($var);
        $this->permanent_removal = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getObtainers()
    {
        return $this->whichOneof("obtainers");
    }

}

