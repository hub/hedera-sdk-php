<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: token_get_nft_info.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Information for one non-fungible/unique token (NFT).
 *
 * Generated from protobuf message <code>proto.TokenNftInfo</code>
 */
class TokenNftInfo extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A non-fungible/unique token (NFT) identifier.
     * <p>
     * This SHALL match the NFT requested.<br/>
     *
     * Generated from protobuf field <code>.proto.NftID nftID = 1;</code>
     */
    protected $nftID = null;
    /**
     **
     * The current owner of the NFT
     *
     * Generated from protobuf field <code>.proto.AccountID accountID = 2;</code>
     */
    protected $accountID = null;
    /**
     **
     * The effective consensus timestamp at which the NFT was minted
     *
     * Generated from protobuf field <code>.proto.Timestamp creationTime = 3;</code>
     */
    protected $creationTime = null;
    /**
     **
     * Represents the unique metadata of the NFT
     *
     * Generated from protobuf field <code>bytes metadata = 4;</code>
     */
    protected $metadata = '';
    /**
     **
     * The ledger ID of the network that generated this response.
     * <p>
     * This value SHALL identify the distributed ledger that responded to
     * this query.
     *
     * Generated from protobuf field <code>bytes ledger_id = 5;</code>
     */
    protected $ledger_id = '';
    /**
     **
     * If an allowance is granted for the NFT, its corresponding spender account
     *
     * Generated from protobuf field <code>.proto.AccountID spender_id = 6;</code>
     */
    protected $spender_id = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\NftID $nftID
     *          *
     *           A non-fungible/unique token (NFT) identifier.
     *           <p>
     *           This SHALL match the NFT requested.<br/>
     *     @type \Proto\AccountID $accountID
     *          *
     *           The current owner of the NFT
     *     @type \Proto\Timestamp $creationTime
     *          *
     *           The effective consensus timestamp at which the NFT was minted
     *     @type string $metadata
     *          *
     *           Represents the unique metadata of the NFT
     *     @type string $ledger_id
     *          *
     *           The ledger ID of the network that generated this response.
     *           <p>
     *           This value SHALL identify the distributed ledger that responded to
     *           this query.
     *     @type \Proto\AccountID $spender_id
     *          *
     *           If an allowance is granted for the NFT, its corresponding spender account
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\TokenGetNftInfo::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A non-fungible/unique token (NFT) identifier.
     * <p>
     * This SHALL match the NFT requested.<br/>
     *
     * Generated from protobuf field <code>.proto.NftID nftID = 1;</code>
     * @return \Proto\NftID|null
     */
    public function getNftID()
    {
        return $this->nftID;
    }

    public function hasNftID()
    {
        return isset($this->nftID);
    }

    public function clearNftID()
    {
        unset($this->nftID);
    }

    /**
     **
     * A non-fungible/unique token (NFT) identifier.
     * <p>
     * This SHALL match the NFT requested.<br/>
     *
     * Generated from protobuf field <code>.proto.NftID nftID = 1;</code>
     * @param \Proto\NftID $var
     * @return $this
     */
    public function setNftID($var)
    {
        GPBUtil::checkMessage($var, \Proto\NftID::class);
        $this->nftID = $var;

        return $this;
    }

    /**
     **
     * The current owner of the NFT
     *
     * Generated from protobuf field <code>.proto.AccountID accountID = 2;</code>
     * @return \Proto\AccountID|null
     */
    public function getAccountID()
    {
        return $this->accountID;
    }

    public function hasAccountID()
    {
        return isset($this->accountID);
    }

    public function clearAccountID()
    {
        unset($this->accountID);
    }

    /**
     **
     * The current owner of the NFT
     *
     * Generated from protobuf field <code>.proto.AccountID accountID = 2;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setAccountID($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->accountID = $var;

        return $this;
    }

    /**
     **
     * The effective consensus timestamp at which the NFT was minted
     *
     * Generated from protobuf field <code>.proto.Timestamp creationTime = 3;</code>
     * @return \Proto\Timestamp|null
     */
    public function getCreationTime()
    {
        return $this->creationTime;
    }

    public function hasCreationTime()
    {
        return isset($this->creationTime);
    }

    public function clearCreationTime()
    {
        unset($this->creationTime);
    }

    /**
     **
     * The effective consensus timestamp at which the NFT was minted
     *
     * Generated from protobuf field <code>.proto.Timestamp creationTime = 3;</code>
     * @param \Proto\Timestamp $var
     * @return $this
     */
    public function setCreationTime($var)
    {
        GPBUtil::checkMessage($var, \Proto\Timestamp::class);
        $this->creationTime = $var;

        return $this;
    }

    /**
     **
     * Represents the unique metadata of the NFT
     *
     * Generated from protobuf field <code>bytes metadata = 4;</code>
     * @return string
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     **
     * Represents the unique metadata of the NFT
     *
     * Generated from protobuf field <code>bytes metadata = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setMetadata($var)
    {
        GPBUtil::checkString($var, False);
        $this->metadata = $var;

        return $this;
    }

    /**
     **
     * The ledger ID of the network that generated this response.
     * <p>
     * This value SHALL identify the distributed ledger that responded to
     * this query.
     *
     * Generated from protobuf field <code>bytes ledger_id = 5;</code>
     * @return string
     */
    public function getLedgerId()
    {
        return $this->ledger_id;
    }

    /**
     **
     * The ledger ID of the network that generated this response.
     * <p>
     * This value SHALL identify the distributed ledger that responded to
     * this query.
     *
     * Generated from protobuf field <code>bytes ledger_id = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setLedgerId($var)
    {
        GPBUtil::checkString($var, False);
        $this->ledger_id = $var;

        return $this;
    }

    /**
     **
     * If an allowance is granted for the NFT, its corresponding spender account
     *
     * Generated from protobuf field <code>.proto.AccountID spender_id = 6;</code>
     * @return \Proto\AccountID|null
     */
    public function getSpenderId()
    {
        return $this->spender_id;
    }

    public function hasSpenderId()
    {
        return isset($this->spender_id);
    }

    public function clearSpenderId()
    {
        unset($this->spender_id);
    }

    /**
     **
     * If an allowance is granted for the NFT, its corresponding spender account
     *
     * Generated from protobuf field <code>.proto.AccountID spender_id = 6;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setSpenderId($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->spender_id = $var;

        return $this;
    }

}

