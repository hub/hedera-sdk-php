<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: consensus_create_topic.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Create a topic to accept and group consensus messages.
 * If `autoRenewAccount` is specified, that account Key MUST also sign this
 * transaction.<br/>
 * If `adminKey` is set, that Key MUST sign the transaction.<br/>
 * On success, the resulting `TransactionReceipt` SHALL contain the newly
 * created `TopicId`.
 * The `autoRenewPeriod` on a topic MUST be set to a value between
 * `autoRenewPeriod.minDuration` and `autoRenewPeriod.maxDuration`. These
 * values are configurable, typically 30 and 92 days.<br/>
 * This also sets the initial expirationTime of the topic.
 * If no `adminKey` is set on a topic
 *   -`autoRenewAccount` SHALL NOT be set on the topic.
 *   - A `deleteTopic` transaction SHALL fail.
 *   - An `updateTopic` transaction that only extends the expirationTime MAY
 *     succeed.
 *   - Any other `updateTopic` transaction SHALL fail.
 * If the topic expires and is not automatically renewed, the topic SHALL enter
 * the `EXPIRED` state.
 *   - All transactions on the topic SHALL fail with TOPIC_EXPIRED
 *      - Except an updateTopic() call that only extends the expirationTime.
 *   - getTopicInfo() SHALL succeed, and show the topic is expired.
 * The topic SHALL remain in the `EXPIRED` state for a time determined by the
 * `autorenew.gracePeriod` (configurable, originally 7 days).<br/>
 * After the grace period, if the topic's expirationTime is not extended, the
 * topic SHALL be automatically deleted from state entirely, and cannot be
 * recovered or recreated.
 * ### Block Stream Effects
 * None
 *
 * Generated from protobuf message <code>proto.ConsensusCreateTopicTransactionBody</code>
 */
class ConsensusCreateTopicTransactionBody extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A short memo for this topic.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>string memo = 1;</code>
     */
    protected $memo = '';
    /**
     **
     * Access control for modification of the topic after it is created.
     * <p>
     * If this field is set, that key MUST sign this transaction.<br/>
     * If this field is set, that key MUST sign each future transaction to
     * update or delete the topic.<br/>
     * An updateTopic transaction that _only_ extends the topic expirationTime
     * (a "manual renewal" transaction) SHALL NOT require admin key
     * signature.<br/>
     * A topic without an admin key SHALL be immutable, except for expiration
     * and renewal.<br/>
     * If adminKey is not set, then `autoRenewAccount` SHALL NOT be set.
     *
     * Generated from protobuf field <code>.proto.Key adminKey = 2;</code>
     */
    protected $adminKey = null;
    /**
     **
     * Access control for message submission to the topic.
     * <p>
     * If this field is set, that key MUST sign each consensus submit message
     * for this topic.<br/>
     * If this field is not set then any account may submit a message on the
     * topic, without restriction.
     *
     * Generated from protobuf field <code>.proto.Key submitKey = 3;</code>
     */
    protected $submitKey = null;
    /**
     **
     * The initial lifetime, in seconds, for the topic.<br/>
     * This is also the number of seconds for which the topic SHALL be
     * automatically renewed upon expiring, if it has a valid auto-renew
     * account.
     * <p>
     * This value MUST be set.<br/>
     * This value MUST be greater than the configured
     * MIN_AUTORENEW_PERIOD.<br/>
     * This value MUST be less than the configured MAX_AUTORENEW_PERIOD.
     *
     * Generated from protobuf field <code>.proto.Duration autoRenewPeriod = 6;</code>
     */
    protected $autoRenewPeriod = null;
    /**
     **
     * The ID of the account to be charged renewal fees at the topic's
     * expirationTime to extend the lifetime of the topic.
     * <p>
     * The topic lifetime SHALL be extended by the smallest of the following:
     * <ul>
     *   <li>The current `autoRenewPeriod` duration.</li>
     *   <li>The maximum duration that this account has funds to purchase.</li>
     *   <li>The configured MAX_AUTORENEW_PERIOD at the time of automatic
     *       renewal.</li>
     * </ul>
     * If this value is set, the referenced account MUST sign this
     * transaction.<br/>
     * If this value is set, the `adminKey` field MUST also be set (though that
     * key MAY not have any correlation to this account).
     *
     * Generated from protobuf field <code>.proto.AccountID autoRenewAccount = 7;</code>
     */
    protected $autoRenewAccount = null;
    /**
     **
     * Access control for update or delete of custom fees.
     * <p>
     * If set, subsequent `consensus_update_topic` transactions signed with this
     * key MAY update or delete the custom fees for this topic.<br/>
     * If not set, the custom fees for this topic SHALL BE immutable.<br/>
     * If not set when the topic is created, this field CANNOT be set via
     * update.<br/>
     * If set when the topic is created, this field MAY be changed via update.
     *
     * Generated from protobuf field <code>.proto.Key fee_schedule_key = 8;</code>
     */
    protected $fee_schedule_key = null;
    /**
     **
     * A set of keys.<br/>
     * Keys in this list are permitted to submit messages to this topic without
     * paying custom fees associated with this topic.
     * <p>
     * If a submit transaction is signed by _any_ key included in this set,
     * custom fees SHALL NOT be charged for that transaction.<br/>
     * This field MUST NOT contain more than 10 keys.<br/>
     * fee_exempt_key_list SHALL NOT contain any duplicate keys.<br/>
     * fee_exempt_key_list MAY contain keys for accounts that are inactive,
     * deleted, or non-existent.<br/>
     * If fee_exempt_key_list is unset in this transaction, there SHALL NOT be
     * any fee-exempt keys.  In particular, the following keys SHALL NOT be
     * implicitly or automatically added to this list:
     * `adminKey`, `submitKey`, `fee_schedule_key`.
     *
     * Generated from protobuf field <code>repeated .proto.Key fee_exempt_key_list = 9;</code>
     */
    private $fee_exempt_key_list;
    /**
     **
     * A set of custom fee definitions.<br/>
     * These are fees to be assessed for each submit to this topic.
     * <p>
     * Each fee defined in this set SHALL be evaluated for
     * each message submitted to this topic, and the resultant
     * total assessed fees SHALL be charged.<br/>
     * Custom fees defined here SHALL be assessed in addition to the base
     * network and node fees.<br/>
     * custom_fees list SHALL NOT contain more than
     * `MAX_CUSTOM_FEE_ENTRIES_FOR_TOPICS` entries.
     *
     * Generated from protobuf field <code>repeated .proto.FixedCustomFee custom_fees = 10;</code>
     */
    private $custom_fees;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $memo
     *          *
     *           A short memo for this topic.
     *           <p>
     *           This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     *           (default 100) bytes when encoded as UTF-8.
     *     @type \Proto\Key $adminKey
     *          *
     *           Access control for modification of the topic after it is created.
     *           <p>
     *           If this field is set, that key MUST sign this transaction.<br/>
     *           If this field is set, that key MUST sign each future transaction to
     *           update or delete the topic.<br/>
     *           An updateTopic transaction that _only_ extends the topic expirationTime
     *           (a "manual renewal" transaction) SHALL NOT require admin key
     *           signature.<br/>
     *           A topic without an admin key SHALL be immutable, except for expiration
     *           and renewal.<br/>
     *           If adminKey is not set, then `autoRenewAccount` SHALL NOT be set.
     *     @type \Proto\Key $submitKey
     *          *
     *           Access control for message submission to the topic.
     *           <p>
     *           If this field is set, that key MUST sign each consensus submit message
     *           for this topic.<br/>
     *           If this field is not set then any account may submit a message on the
     *           topic, without restriction.
     *     @type \Proto\Duration $autoRenewPeriod
     *          *
     *           The initial lifetime, in seconds, for the topic.<br/>
     *           This is also the number of seconds for which the topic SHALL be
     *           automatically renewed upon expiring, if it has a valid auto-renew
     *           account.
     *           <p>
     *           This value MUST be set.<br/>
     *           This value MUST be greater than the configured
     *           MIN_AUTORENEW_PERIOD.<br/>
     *           This value MUST be less than the configured MAX_AUTORENEW_PERIOD.
     *     @type \Proto\AccountID $autoRenewAccount
     *          *
     *           The ID of the account to be charged renewal fees at the topic's
     *           expirationTime to extend the lifetime of the topic.
     *           <p>
     *           The topic lifetime SHALL be extended by the smallest of the following:
     *           <ul>
     *             <li>The current `autoRenewPeriod` duration.</li>
     *             <li>The maximum duration that this account has funds to purchase.</li>
     *             <li>The configured MAX_AUTORENEW_PERIOD at the time of automatic
     *                 renewal.</li>
     *           </ul>
     *           If this value is set, the referenced account MUST sign this
     *           transaction.<br/>
     *           If this value is set, the `adminKey` field MUST also be set (though that
     *           key MAY not have any correlation to this account).
     *     @type \Proto\Key $fee_schedule_key
     *          *
     *           Access control for update or delete of custom fees.
     *           <p>
     *           If set, subsequent `consensus_update_topic` transactions signed with this
     *           key MAY update or delete the custom fees for this topic.<br/>
     *           If not set, the custom fees for this topic SHALL BE immutable.<br/>
     *           If not set when the topic is created, this field CANNOT be set via
     *           update.<br/>
     *           If set when the topic is created, this field MAY be changed via update.
     *     @type \Proto\Key[] $fee_exempt_key_list
     *          *
     *           A set of keys.<br/>
     *           Keys in this list are permitted to submit messages to this topic without
     *           paying custom fees associated with this topic.
     *           <p>
     *           If a submit transaction is signed by _any_ key included in this set,
     *           custom fees SHALL NOT be charged for that transaction.<br/>
     *           This field MUST NOT contain more than 10 keys.<br/>
     *           fee_exempt_key_list SHALL NOT contain any duplicate keys.<br/>
     *           fee_exempt_key_list MAY contain keys for accounts that are inactive,
     *           deleted, or non-existent.<br/>
     *           If fee_exempt_key_list is unset in this transaction, there SHALL NOT be
     *           any fee-exempt keys.  In particular, the following keys SHALL NOT be
     *           implicitly or automatically added to this list:
     *           `adminKey`, `submitKey`, `fee_schedule_key`.
     *     @type \Proto\FixedCustomFee[] $custom_fees
     *          *
     *           A set of custom fee definitions.<br/>
     *           These are fees to be assessed for each submit to this topic.
     *           <p>
     *           Each fee defined in this set SHALL be evaluated for
     *           each message submitted to this topic, and the resultant
     *           total assessed fees SHALL be charged.<br/>
     *           Custom fees defined here SHALL be assessed in addition to the base
     *           network and node fees.<br/>
     *           custom_fees list SHALL NOT contain more than
     *           `MAX_CUSTOM_FEE_ENTRIES_FOR_TOPICS` entries.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ConsensusCreateTopic::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A short memo for this topic.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>string memo = 1;</code>
     * @return string
     */
    public function getMemo()
    {
        return $this->memo;
    }

    /**
     **
     * A short memo for this topic.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>string memo = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setMemo($var)
    {
        GPBUtil::checkString($var, True);
        $this->memo = $var;

        return $this;
    }

    /**
     **
     * Access control for modification of the topic after it is created.
     * <p>
     * If this field is set, that key MUST sign this transaction.<br/>
     * If this field is set, that key MUST sign each future transaction to
     * update or delete the topic.<br/>
     * An updateTopic transaction that _only_ extends the topic expirationTime
     * (a "manual renewal" transaction) SHALL NOT require admin key
     * signature.<br/>
     * A topic without an admin key SHALL be immutable, except for expiration
     * and renewal.<br/>
     * If adminKey is not set, then `autoRenewAccount` SHALL NOT be set.
     *
     * Generated from protobuf field <code>.proto.Key adminKey = 2;</code>
     * @return \Proto\Key|null
     */
    public function getAdminKey()
    {
        return $this->adminKey;
    }

    public function hasAdminKey()
    {
        return isset($this->adminKey);
    }

    public function clearAdminKey()
    {
        unset($this->adminKey);
    }

    /**
     **
     * Access control for modification of the topic after it is created.
     * <p>
     * If this field is set, that key MUST sign this transaction.<br/>
     * If this field is set, that key MUST sign each future transaction to
     * update or delete the topic.<br/>
     * An updateTopic transaction that _only_ extends the topic expirationTime
     * (a "manual renewal" transaction) SHALL NOT require admin key
     * signature.<br/>
     * A topic without an admin key SHALL be immutable, except for expiration
     * and renewal.<br/>
     * If adminKey is not set, then `autoRenewAccount` SHALL NOT be set.
     *
     * Generated from protobuf field <code>.proto.Key adminKey = 2;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setAdminKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->adminKey = $var;

        return $this;
    }

    /**
     **
     * Access control for message submission to the topic.
     * <p>
     * If this field is set, that key MUST sign each consensus submit message
     * for this topic.<br/>
     * If this field is not set then any account may submit a message on the
     * topic, without restriction.
     *
     * Generated from protobuf field <code>.proto.Key submitKey = 3;</code>
     * @return \Proto\Key|null
     */
    public function getSubmitKey()
    {
        return $this->submitKey;
    }

    public function hasSubmitKey()
    {
        return isset($this->submitKey);
    }

    public function clearSubmitKey()
    {
        unset($this->submitKey);
    }

    /**
     **
     * Access control for message submission to the topic.
     * <p>
     * If this field is set, that key MUST sign each consensus submit message
     * for this topic.<br/>
     * If this field is not set then any account may submit a message on the
     * topic, without restriction.
     *
     * Generated from protobuf field <code>.proto.Key submitKey = 3;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setSubmitKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->submitKey = $var;

        return $this;
    }

    /**
     **
     * The initial lifetime, in seconds, for the topic.<br/>
     * This is also the number of seconds for which the topic SHALL be
     * automatically renewed upon expiring, if it has a valid auto-renew
     * account.
     * <p>
     * This value MUST be set.<br/>
     * This value MUST be greater than the configured
     * MIN_AUTORENEW_PERIOD.<br/>
     * This value MUST be less than the configured MAX_AUTORENEW_PERIOD.
     *
     * Generated from protobuf field <code>.proto.Duration autoRenewPeriod = 6;</code>
     * @return \Proto\Duration|null
     */
    public function getAutoRenewPeriod()
    {
        return $this->autoRenewPeriod;
    }

    public function hasAutoRenewPeriod()
    {
        return isset($this->autoRenewPeriod);
    }

    public function clearAutoRenewPeriod()
    {
        unset($this->autoRenewPeriod);
    }

    /**
     **
     * The initial lifetime, in seconds, for the topic.<br/>
     * This is also the number of seconds for which the topic SHALL be
     * automatically renewed upon expiring, if it has a valid auto-renew
     * account.
     * <p>
     * This value MUST be set.<br/>
     * This value MUST be greater than the configured
     * MIN_AUTORENEW_PERIOD.<br/>
     * This value MUST be less than the configured MAX_AUTORENEW_PERIOD.
     *
     * Generated from protobuf field <code>.proto.Duration autoRenewPeriod = 6;</code>
     * @param \Proto\Duration $var
     * @return $this
     */
    public function setAutoRenewPeriod($var)
    {
        GPBUtil::checkMessage($var, \Proto\Duration::class);
        $this->autoRenewPeriod = $var;

        return $this;
    }

    /**
     **
     * The ID of the account to be charged renewal fees at the topic's
     * expirationTime to extend the lifetime of the topic.
     * <p>
     * The topic lifetime SHALL be extended by the smallest of the following:
     * <ul>
     *   <li>The current `autoRenewPeriod` duration.</li>
     *   <li>The maximum duration that this account has funds to purchase.</li>
     *   <li>The configured MAX_AUTORENEW_PERIOD at the time of automatic
     *       renewal.</li>
     * </ul>
     * If this value is set, the referenced account MUST sign this
     * transaction.<br/>
     * If this value is set, the `adminKey` field MUST also be set (though that
     * key MAY not have any correlation to this account).
     *
     * Generated from protobuf field <code>.proto.AccountID autoRenewAccount = 7;</code>
     * @return \Proto\AccountID|null
     */
    public function getAutoRenewAccount()
    {
        return $this->autoRenewAccount;
    }

    public function hasAutoRenewAccount()
    {
        return isset($this->autoRenewAccount);
    }

    public function clearAutoRenewAccount()
    {
        unset($this->autoRenewAccount);
    }

    /**
     **
     * The ID of the account to be charged renewal fees at the topic's
     * expirationTime to extend the lifetime of the topic.
     * <p>
     * The topic lifetime SHALL be extended by the smallest of the following:
     * <ul>
     *   <li>The current `autoRenewPeriod` duration.</li>
     *   <li>The maximum duration that this account has funds to purchase.</li>
     *   <li>The configured MAX_AUTORENEW_PERIOD at the time of automatic
     *       renewal.</li>
     * </ul>
     * If this value is set, the referenced account MUST sign this
     * transaction.<br/>
     * If this value is set, the `adminKey` field MUST also be set (though that
     * key MAY not have any correlation to this account).
     *
     * Generated from protobuf field <code>.proto.AccountID autoRenewAccount = 7;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setAutoRenewAccount($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->autoRenewAccount = $var;

        return $this;
    }

    /**
     **
     * Access control for update or delete of custom fees.
     * <p>
     * If set, subsequent `consensus_update_topic` transactions signed with this
     * key MAY update or delete the custom fees for this topic.<br/>
     * If not set, the custom fees for this topic SHALL BE immutable.<br/>
     * If not set when the topic is created, this field CANNOT be set via
     * update.<br/>
     * If set when the topic is created, this field MAY be changed via update.
     *
     * Generated from protobuf field <code>.proto.Key fee_schedule_key = 8;</code>
     * @return \Proto\Key|null
     */
    public function getFeeScheduleKey()
    {
        return $this->fee_schedule_key;
    }

    public function hasFeeScheduleKey()
    {
        return isset($this->fee_schedule_key);
    }

    public function clearFeeScheduleKey()
    {
        unset($this->fee_schedule_key);
    }

    /**
     **
     * Access control for update or delete of custom fees.
     * <p>
     * If set, subsequent `consensus_update_topic` transactions signed with this
     * key MAY update or delete the custom fees for this topic.<br/>
     * If not set, the custom fees for this topic SHALL BE immutable.<br/>
     * If not set when the topic is created, this field CANNOT be set via
     * update.<br/>
     * If set when the topic is created, this field MAY be changed via update.
     *
     * Generated from protobuf field <code>.proto.Key fee_schedule_key = 8;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setFeeScheduleKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->fee_schedule_key = $var;

        return $this;
    }

    /**
     **
     * A set of keys.<br/>
     * Keys in this list are permitted to submit messages to this topic without
     * paying custom fees associated with this topic.
     * <p>
     * If a submit transaction is signed by _any_ key included in this set,
     * custom fees SHALL NOT be charged for that transaction.<br/>
     * This field MUST NOT contain more than 10 keys.<br/>
     * fee_exempt_key_list SHALL NOT contain any duplicate keys.<br/>
     * fee_exempt_key_list MAY contain keys for accounts that are inactive,
     * deleted, or non-existent.<br/>
     * If fee_exempt_key_list is unset in this transaction, there SHALL NOT be
     * any fee-exempt keys.  In particular, the following keys SHALL NOT be
     * implicitly or automatically added to this list:
     * `adminKey`, `submitKey`, `fee_schedule_key`.
     *
     * Generated from protobuf field <code>repeated .proto.Key fee_exempt_key_list = 9;</code>
     * @return RepeatedField<\Proto\Key>
     */
    public function getFeeExemptKeyList()
    {
        return $this->fee_exempt_key_list;
    }

    /**
     **
     * A set of keys.<br/>
     * Keys in this list are permitted to submit messages to this topic without
     * paying custom fees associated with this topic.
     * <p>
     * If a submit transaction is signed by _any_ key included in this set,
     * custom fees SHALL NOT be charged for that transaction.<br/>
     * This field MUST NOT contain more than 10 keys.<br/>
     * fee_exempt_key_list SHALL NOT contain any duplicate keys.<br/>
     * fee_exempt_key_list MAY contain keys for accounts that are inactive,
     * deleted, or non-existent.<br/>
     * If fee_exempt_key_list is unset in this transaction, there SHALL NOT be
     * any fee-exempt keys.  In particular, the following keys SHALL NOT be
     * implicitly or automatically added to this list:
     * `adminKey`, `submitKey`, `fee_schedule_key`.
     *
     * Generated from protobuf field <code>repeated .proto.Key fee_exempt_key_list = 9;</code>
     * @param \Proto\Key[] $var
     * @return $this
     */
    public function setFeeExemptKeyList($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Proto\Key::class);
        $this->fee_exempt_key_list = $arr;

        return $this;
    }

    /**
     **
     * A set of custom fee definitions.<br/>
     * These are fees to be assessed for each submit to this topic.
     * <p>
     * Each fee defined in this set SHALL be evaluated for
     * each message submitted to this topic, and the resultant
     * total assessed fees SHALL be charged.<br/>
     * Custom fees defined here SHALL be assessed in addition to the base
     * network and node fees.<br/>
     * custom_fees list SHALL NOT contain more than
     * `MAX_CUSTOM_FEE_ENTRIES_FOR_TOPICS` entries.
     *
     * Generated from protobuf field <code>repeated .proto.FixedCustomFee custom_fees = 10;</code>
     * @return RepeatedField<\Proto\FixedCustomFee>
     */
    public function getCustomFees()
    {
        return $this->custom_fees;
    }

    /**
     **
     * A set of custom fee definitions.<br/>
     * These are fees to be assessed for each submit to this topic.
     * <p>
     * Each fee defined in this set SHALL be evaluated for
     * each message submitted to this topic, and the resultant
     * total assessed fees SHALL be charged.<br/>
     * Custom fees defined here SHALL be assessed in addition to the base
     * network and node fees.<br/>
     * custom_fees list SHALL NOT contain more than
     * `MAX_CUSTOM_FEE_ENTRIES_FOR_TOPICS` entries.
     *
     * Generated from protobuf field <code>repeated .proto.FixedCustomFee custom_fees = 10;</code>
     * @param \Proto\FixedCustomFee[] $var
     * @return $this
     */
    public function setCustomFees($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Proto\FixedCustomFee::class);
        $this->custom_fees = $arr;

        return $this;
    }

}

