<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: node_stake_update.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * A system initiated transaction to update staking information.
 * This transaction SHALL be issued at the end of each staking period to update
 * node stakes and reward limits.<br/>
 * This transaction SHALL be a child of the first transaction to reach
 * consensus following the end of the previous staking period.<br/>
 * This transaction MUST NOT be sent by a client and SHALL be rejected if
 * received by any node.<br/>
 * This transaction SHALL be present in the record stream or block stream.
 * ### Block Stream Effects
 * None
 *
 * Generated from protobuf message <code>proto.NodeStakeUpdateTransactionBody</code>
 */
class NodeStakeUpdateTransactionBody extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A timestamp indicating the end of the staking period.
     * <p>
     * This value SHALL be one nanosecond prior to midnight prior to the
     * consensus time of the parent transaction.
     *
     * Generated from protobuf field <code>.proto.Timestamp end_of_staking_period = 1;</code>
     */
    protected $end_of_staking_period = null;
    /**
     **
     * A list of `NodeStake` entries for each node at the beginning of the new
     * staking period.
     * <p>
     * This list SHALL have one entry for each node participating in network
     * consensus.
     *
     * Generated from protobuf field <code>repeated .proto.NodeStake node_stake = 2;</code>
     */
    private $node_stake;
    /**
     **
     * A maximum reward rate for this staking period.
     * <p>
     * This SHALL be a ratio of tinybar to HBAR.<br/>
     * An account SHALL NOT receive a reward greater than the product of this
     * ratio and the total number of HBAR staked by that account.
     *
     * Generated from protobuf field <code>int64 max_staking_reward_rate_per_hbar = 3;</code>
     */
    protected $max_staking_reward_rate_per_hbar = 0;
    /**
     **
     * A fraction of network and service fees paid to
     * the "node" reward account.<br/>
     * The node staking rewards are paid from the designated reward account
     * `0.0.801`, which receives a fraction of network and service fees for
     * each transaction. This field is the value of that fraction for the
     * last staking period.
     *
     * Generated from protobuf field <code>.proto.Fraction node_reward_fee_fraction = 4;</code>
     */
    protected $node_reward_fee_fraction = null;
    /**
     **
     * A limit to the number of staking periods held for inactive accounts.<br/>
     * This is the maximum number of trailing staking periods for which an
     * account can collect staking rewards.<br/>
     * #### Example
     * If this value is 365 with a calendar day period, then each account must
     * collect rewards at least once per calendar year to receive the full
     * amount of staking rewards earned.
     * <p>
     * Staking rewards SHALL be stored in network state for no more than
     * `staking_periods_stored` staking periods.<br/>
     * Each account MUST participate in at least one transaction that affects
     * its balance, staking, or staking metadata within this time limit
     * to receive all available staking rewards.
     *
     * Generated from protobuf field <code>int64 staking_periods_stored = 5;</code>
     */
    protected $staking_periods_stored = 0;
    /**
     **
     * A number of minutes representing a staking period.<br/>
     * <blockquote>Note<blockquote>
     * For the special case of `1440` minutes, periods are treated as
     * calendar days aligned to midnight UTC, rather than repeating `1440`
     * minute periods left-aligned at the epoch.</blockquote></blockquote>
     *
     * Generated from protobuf field <code>int64 staking_period = 6;</code>
     */
    protected $staking_period = 0;
    /**
     **
     * A fraction of network and service fees paid to
     * the "general" reward account.<br/>
     * The general staking rewards are paid from the designated reward account
     * `0.0.800`, which receives a fraction of network and service fees for
     * each transaction. This field is the value of that fraction for the
     * last staking period.
     *
     * Generated from protobuf field <code>.proto.Fraction staking_reward_fee_fraction = 7;</code>
     */
    protected $staking_reward_fee_fraction = null;
    /**
     **
     * A minimum balance required to pay general staking rewards.
     * <p>
     * If the balance of the staking reward account `0.0.800` is below this
     * threshold, staking rewards SHALL NOT be paid in full.
     *
     * Generated from protobuf field <code>int64 staking_start_threshold = 8;</code>
     */
    protected $staking_start_threshold = 0;
    /**
     **
     * HIP-786 replaced this field with `max_total_reward`.<br/>
     * This was a maximum total number of tinybars to be distributed as staking
     * rewards in the staking period that just ended.
     *
     * Generated from protobuf field <code>int64 staking_reward_rate = 9 [deprecated = true];</code>
     * @deprecated
     */
    protected $staking_reward_rate = 0;
    /**
     **
     * An amount reserved in the staking reward account.<br/>
     * This is an amount "reserved" in the balance of account `0.0.800` that
     * is already owed for pending rewards that were previously earned but
     * have not yet been collected.<br/>
     * This value is further detailed in HIP-786.
     *
     * Generated from protobuf field <code>int64 reserved_staking_rewards = 10;</code>
     */
    protected $reserved_staking_rewards = 0;
    /**
     **
     * An available, unreserved, amount in the staking reward account.<br/>
     * This is the balance of the staking reward account `0.0.800` at the close
     * of the staking period that just ended, after reduction for all "reserved"
     * funds necessary to pay previously earned rewards.<br/>
     * This value is further detailed in HIP-786.
     * <p>
     * This value SHALL be used to calculate the reward ratio according to
     * the formula detailed in HIP-782.
     *
     * Generated from protobuf field <code>int64 unreserved_staking_reward_balance = 11;</code>
     */
    protected $unreserved_staking_reward_balance = 0;
    /**
     **
     * A minimum balance required for maximum staking rewards.<br/>
     * This value is further detailed in HIP-786.
     * The formula to calculate staking rewards is detailed in HIP-782.
     * <p>
     * The value of `unreserved_staking_reward_balance` MUST match or exceed the
     * value of this field to support the maximum staking reward ratio.<br/>
     *
     * Generated from protobuf field <code>int64 reward_balance_threshold = 12;</code>
     */
    protected $reward_balance_threshold = 0;
    /**
     **
     * A maximum network-wide stake that can earn full rewards.<br/>
     * If the network-wide stake, in tinybar, exceeds this value, then staking
     * rewards must be reduced to maintain "smooth" reward adjustments as
     * defined in HIP-782.<br/>
     * This value is further detailed in HIP-786.
     * <p>
     * If the total network-wide stake exceeds this value, the effective
     * staking reward ratio MUST be reduced to maintain solvency of the
     * staking reward account.
     *
     * Generated from protobuf field <code>int64 max_stake_rewarded = 13;</code>
     */
    protected $max_stake_rewarded = 0;
    /**
     **
     * A limit amount that could be paid as staking rewards.<br/>
     * In the limit case, the network could pay at most this amount, in tinybar
     * as staking rewards for the staking period that just ended, if all other
     * conditions were met to perfection.<br/>
     * <p>
     * This value SHALL reflect the result of a maximum reward calculation that
     * takes into account the balance thresholds and maximum stake thresholds
     * as defined in HIP-782 and HIP-786.<br/>
     * This value is a convenience. The actual defined calculation SHALL be
     * authoritative in the unlikely event this value differs.
     *
     * Generated from protobuf field <code>int64 max_total_reward = 14;</code>
     */
    protected $max_total_reward = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\Timestamp $end_of_staking_period
     *          *
     *           A timestamp indicating the end of the staking period.
     *           <p>
     *           This value SHALL be one nanosecond prior to midnight prior to the
     *           consensus time of the parent transaction.
     *     @type \Proto\NodeStake[] $node_stake
     *          *
     *           A list of `NodeStake` entries for each node at the beginning of the new
     *           staking period.
     *           <p>
     *           This list SHALL have one entry for each node participating in network
     *           consensus.
     *     @type int|string $max_staking_reward_rate_per_hbar
     *          *
     *           A maximum reward rate for this staking period.
     *           <p>
     *           This SHALL be a ratio of tinybar to HBAR.<br/>
     *           An account SHALL NOT receive a reward greater than the product of this
     *           ratio and the total number of HBAR staked by that account.
     *     @type \Proto\Fraction $node_reward_fee_fraction
     *          *
     *           A fraction of network and service fees paid to
     *           the "node" reward account.<br/>
     *           The node staking rewards are paid from the designated reward account
     *           `0.0.801`, which receives a fraction of network and service fees for
     *           each transaction. This field is the value of that fraction for the
     *           last staking period.
     *     @type int|string $staking_periods_stored
     *          *
     *           A limit to the number of staking periods held for inactive accounts.<br/>
     *           This is the maximum number of trailing staking periods for which an
     *           account can collect staking rewards.<br/>
     *           #### Example
     *           If this value is 365 with a calendar day period, then each account must
     *           collect rewards at least once per calendar year to receive the full
     *           amount of staking rewards earned.
     *           <p>
     *           Staking rewards SHALL be stored in network state for no more than
     *           `staking_periods_stored` staking periods.<br/>
     *           Each account MUST participate in at least one transaction that affects
     *           its balance, staking, or staking metadata within this time limit
     *           to receive all available staking rewards.
     *     @type int|string $staking_period
     *          *
     *           A number of minutes representing a staking period.<br/>
     *           <blockquote>Note<blockquote>
     *           For the special case of `1440` minutes, periods are treated as
     *           calendar days aligned to midnight UTC, rather than repeating `1440`
     *           minute periods left-aligned at the epoch.</blockquote></blockquote>
     *     @type \Proto\Fraction $staking_reward_fee_fraction
     *          *
     *           A fraction of network and service fees paid to
     *           the "general" reward account.<br/>
     *           The general staking rewards are paid from the designated reward account
     *           `0.0.800`, which receives a fraction of network and service fees for
     *           each transaction. This field is the value of that fraction for the
     *           last staking period.
     *     @type int|string $staking_start_threshold
     *          *
     *           A minimum balance required to pay general staking rewards.
     *           <p>
     *           If the balance of the staking reward account `0.0.800` is below this
     *           threshold, staking rewards SHALL NOT be paid in full.
     *     @type int|string $staking_reward_rate
     *          *
     *           HIP-786 replaced this field with `max_total_reward`.<br/>
     *           This was a maximum total number of tinybars to be distributed as staking
     *           rewards in the staking period that just ended.
     *     @type int|string $reserved_staking_rewards
     *          *
     *           An amount reserved in the staking reward account.<br/>
     *           This is an amount "reserved" in the balance of account `0.0.800` that
     *           is already owed for pending rewards that were previously earned but
     *           have not yet been collected.<br/>
     *           This value is further detailed in HIP-786.
     *     @type int|string $unreserved_staking_reward_balance
     *          *
     *           An available, unreserved, amount in the staking reward account.<br/>
     *           This is the balance of the staking reward account `0.0.800` at the close
     *           of the staking period that just ended, after reduction for all "reserved"
     *           funds necessary to pay previously earned rewards.<br/>
     *           This value is further detailed in HIP-786.
     *           <p>
     *           This value SHALL be used to calculate the reward ratio according to
     *           the formula detailed in HIP-782.
     *     @type int|string $reward_balance_threshold
     *          *
     *           A minimum balance required for maximum staking rewards.<br/>
     *           This value is further detailed in HIP-786.
     *           The formula to calculate staking rewards is detailed in HIP-782.
     *           <p>
     *           The value of `unreserved_staking_reward_balance` MUST match or exceed the
     *           value of this field to support the maximum staking reward ratio.<br/>
     *     @type int|string $max_stake_rewarded
     *          *
     *           A maximum network-wide stake that can earn full rewards.<br/>
     *           If the network-wide stake, in tinybar, exceeds this value, then staking
     *           rewards must be reduced to maintain "smooth" reward adjustments as
     *           defined in HIP-782.<br/>
     *           This value is further detailed in HIP-786.
     *           <p>
     *           If the total network-wide stake exceeds this value, the effective
     *           staking reward ratio MUST be reduced to maintain solvency of the
     *           staking reward account.
     *     @type int|string $max_total_reward
     *          *
     *           A limit amount that could be paid as staking rewards.<br/>
     *           In the limit case, the network could pay at most this amount, in tinybar
     *           as staking rewards for the staking period that just ended, if all other
     *           conditions were met to perfection.<br/>
     *           <p>
     *           This value SHALL reflect the result of a maximum reward calculation that
     *           takes into account the balance thresholds and maximum stake thresholds
     *           as defined in HIP-782 and HIP-786.<br/>
     *           This value is a convenience. The actual defined calculation SHALL be
     *           authoritative in the unlikely event this value differs.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\NodeStakeUpdate::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A timestamp indicating the end of the staking period.
     * <p>
     * This value SHALL be one nanosecond prior to midnight prior to the
     * consensus time of the parent transaction.
     *
     * Generated from protobuf field <code>.proto.Timestamp end_of_staking_period = 1;</code>
     * @return \Proto\Timestamp|null
     */
    public function getEndOfStakingPeriod()
    {
        return $this->end_of_staking_period;
    }

    public function hasEndOfStakingPeriod()
    {
        return isset($this->end_of_staking_period);
    }

    public function clearEndOfStakingPeriod()
    {
        unset($this->end_of_staking_period);
    }

    /**
     **
     * A timestamp indicating the end of the staking period.
     * <p>
     * This value SHALL be one nanosecond prior to midnight prior to the
     * consensus time of the parent transaction.
     *
     * Generated from protobuf field <code>.proto.Timestamp end_of_staking_period = 1;</code>
     * @param \Proto\Timestamp $var
     * @return $this
     */
    public function setEndOfStakingPeriod($var)
    {
        GPBUtil::checkMessage($var, \Proto\Timestamp::class);
        $this->end_of_staking_period = $var;

        return $this;
    }

    /**
     **
     * A list of `NodeStake` entries for each node at the beginning of the new
     * staking period.
     * <p>
     * This list SHALL have one entry for each node participating in network
     * consensus.
     *
     * Generated from protobuf field <code>repeated .proto.NodeStake node_stake = 2;</code>
     * @return RepeatedField<\Proto\NodeStake>
     */
    public function getNodeStake()
    {
        return $this->node_stake;
    }

    /**
     **
     * A list of `NodeStake` entries for each node at the beginning of the new
     * staking period.
     * <p>
     * This list SHALL have one entry for each node participating in network
     * consensus.
     *
     * Generated from protobuf field <code>repeated .proto.NodeStake node_stake = 2;</code>
     * @param \Proto\NodeStake[] $var
     * @return $this
     */
    public function setNodeStake($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Proto\NodeStake::class);
        $this->node_stake = $arr;

        return $this;
    }

    /**
     **
     * A maximum reward rate for this staking period.
     * <p>
     * This SHALL be a ratio of tinybar to HBAR.<br/>
     * An account SHALL NOT receive a reward greater than the product of this
     * ratio and the total number of HBAR staked by that account.
     *
     * Generated from protobuf field <code>int64 max_staking_reward_rate_per_hbar = 3;</code>
     * @return int|string
     */
    public function getMaxStakingRewardRatePerHbar()
    {
        return $this->max_staking_reward_rate_per_hbar;
    }

    /**
     **
     * A maximum reward rate for this staking period.
     * <p>
     * This SHALL be a ratio of tinybar to HBAR.<br/>
     * An account SHALL NOT receive a reward greater than the product of this
     * ratio and the total number of HBAR staked by that account.
     *
     * Generated from protobuf field <code>int64 max_staking_reward_rate_per_hbar = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMaxStakingRewardRatePerHbar($var)
    {
        GPBUtil::checkInt64($var);
        $this->max_staking_reward_rate_per_hbar = $var;

        return $this;
    }

    /**
     **
     * A fraction of network and service fees paid to
     * the "node" reward account.<br/>
     * The node staking rewards are paid from the designated reward account
     * `0.0.801`, which receives a fraction of network and service fees for
     * each transaction. This field is the value of that fraction for the
     * last staking period.
     *
     * Generated from protobuf field <code>.proto.Fraction node_reward_fee_fraction = 4;</code>
     * @return \Proto\Fraction|null
     */
    public function getNodeRewardFeeFraction()
    {
        return $this->node_reward_fee_fraction;
    }

    public function hasNodeRewardFeeFraction()
    {
        return isset($this->node_reward_fee_fraction);
    }

    public function clearNodeRewardFeeFraction()
    {
        unset($this->node_reward_fee_fraction);
    }

    /**
     **
     * A fraction of network and service fees paid to
     * the "node" reward account.<br/>
     * The node staking rewards are paid from the designated reward account
     * `0.0.801`, which receives a fraction of network and service fees for
     * each transaction. This field is the value of that fraction for the
     * last staking period.
     *
     * Generated from protobuf field <code>.proto.Fraction node_reward_fee_fraction = 4;</code>
     * @param \Proto\Fraction $var
     * @return $this
     */
    public function setNodeRewardFeeFraction($var)
    {
        GPBUtil::checkMessage($var, \Proto\Fraction::class);
        $this->node_reward_fee_fraction = $var;

        return $this;
    }

    /**
     **
     * A limit to the number of staking periods held for inactive accounts.<br/>
     * This is the maximum number of trailing staking periods for which an
     * account can collect staking rewards.<br/>
     * #### Example
     * If this value is 365 with a calendar day period, then each account must
     * collect rewards at least once per calendar year to receive the full
     * amount of staking rewards earned.
     * <p>
     * Staking rewards SHALL be stored in network state for no more than
     * `staking_periods_stored` staking periods.<br/>
     * Each account MUST participate in at least one transaction that affects
     * its balance, staking, or staking metadata within this time limit
     * to receive all available staking rewards.
     *
     * Generated from protobuf field <code>int64 staking_periods_stored = 5;</code>
     * @return int|string
     */
    public function getStakingPeriodsStored()
    {
        return $this->staking_periods_stored;
    }

    /**
     **
     * A limit to the number of staking periods held for inactive accounts.<br/>
     * This is the maximum number of trailing staking periods for which an
     * account can collect staking rewards.<br/>
     * #### Example
     * If this value is 365 with a calendar day period, then each account must
     * collect rewards at least once per calendar year to receive the full
     * amount of staking rewards earned.
     * <p>
     * Staking rewards SHALL be stored in network state for no more than
     * `staking_periods_stored` staking periods.<br/>
     * Each account MUST participate in at least one transaction that affects
     * its balance, staking, or staking metadata within this time limit
     * to receive all available staking rewards.
     *
     * Generated from protobuf field <code>int64 staking_periods_stored = 5;</code>
     * @param int|string $var
     * @return $this
     */
    public function setStakingPeriodsStored($var)
    {
        GPBUtil::checkInt64($var);
        $this->staking_periods_stored = $var;

        return $this;
    }

    /**
     **
     * A number of minutes representing a staking period.<br/>
     * <blockquote>Note<blockquote>
     * For the special case of `1440` minutes, periods are treated as
     * calendar days aligned to midnight UTC, rather than repeating `1440`
     * minute periods left-aligned at the epoch.</blockquote></blockquote>
     *
     * Generated from protobuf field <code>int64 staking_period = 6;</code>
     * @return int|string
     */
    public function getStakingPeriod()
    {
        return $this->staking_period;
    }

    /**
     **
     * A number of minutes representing a staking period.<br/>
     * <blockquote>Note<blockquote>
     * For the special case of `1440` minutes, periods are treated as
     * calendar days aligned to midnight UTC, rather than repeating `1440`
     * minute periods left-aligned at the epoch.</blockquote></blockquote>
     *
     * Generated from protobuf field <code>int64 staking_period = 6;</code>
     * @param int|string $var
     * @return $this
     */
    public function setStakingPeriod($var)
    {
        GPBUtil::checkInt64($var);
        $this->staking_period = $var;

        return $this;
    }

    /**
     **
     * A fraction of network and service fees paid to
     * the "general" reward account.<br/>
     * The general staking rewards are paid from the designated reward account
     * `0.0.800`, which receives a fraction of network and service fees for
     * each transaction. This field is the value of that fraction for the
     * last staking period.
     *
     * Generated from protobuf field <code>.proto.Fraction staking_reward_fee_fraction = 7;</code>
     * @return \Proto\Fraction|null
     */
    public function getStakingRewardFeeFraction()
    {
        return $this->staking_reward_fee_fraction;
    }

    public function hasStakingRewardFeeFraction()
    {
        return isset($this->staking_reward_fee_fraction);
    }

    public function clearStakingRewardFeeFraction()
    {
        unset($this->staking_reward_fee_fraction);
    }

    /**
     **
     * A fraction of network and service fees paid to
     * the "general" reward account.<br/>
     * The general staking rewards are paid from the designated reward account
     * `0.0.800`, which receives a fraction of network and service fees for
     * each transaction. This field is the value of that fraction for the
     * last staking period.
     *
     * Generated from protobuf field <code>.proto.Fraction staking_reward_fee_fraction = 7;</code>
     * @param \Proto\Fraction $var
     * @return $this
     */
    public function setStakingRewardFeeFraction($var)
    {
        GPBUtil::checkMessage($var, \Proto\Fraction::class);
        $this->staking_reward_fee_fraction = $var;

        return $this;
    }

    /**
     **
     * A minimum balance required to pay general staking rewards.
     * <p>
     * If the balance of the staking reward account `0.0.800` is below this
     * threshold, staking rewards SHALL NOT be paid in full.
     *
     * Generated from protobuf field <code>int64 staking_start_threshold = 8;</code>
     * @return int|string
     */
    public function getStakingStartThreshold()
    {
        return $this->staking_start_threshold;
    }

    /**
     **
     * A minimum balance required to pay general staking rewards.
     * <p>
     * If the balance of the staking reward account `0.0.800` is below this
     * threshold, staking rewards SHALL NOT be paid in full.
     *
     * Generated from protobuf field <code>int64 staking_start_threshold = 8;</code>
     * @param int|string $var
     * @return $this
     */
    public function setStakingStartThreshold($var)
    {
        GPBUtil::checkInt64($var);
        $this->staking_start_threshold = $var;

        return $this;
    }

    /**
     **
     * HIP-786 replaced this field with `max_total_reward`.<br/>
     * This was a maximum total number of tinybars to be distributed as staking
     * rewards in the staking period that just ended.
     *
     * Generated from protobuf field <code>int64 staking_reward_rate = 9 [deprecated = true];</code>
     * @return int|string
     * @deprecated
     */
    public function getStakingRewardRate()
    {
        if ($this->staking_reward_rate !== 0) {
            @trigger_error('staking_reward_rate is deprecated.', E_USER_DEPRECATED);
        }
        return $this->staking_reward_rate;
    }

    /**
     **
     * HIP-786 replaced this field with `max_total_reward`.<br/>
     * This was a maximum total number of tinybars to be distributed as staking
     * rewards in the staking period that just ended.
     *
     * Generated from protobuf field <code>int64 staking_reward_rate = 9 [deprecated = true];</code>
     * @param int|string $var
     * @return $this
     * @deprecated
     */
    public function setStakingRewardRate($var)
    {
        @trigger_error('staking_reward_rate is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkInt64($var);
        $this->staking_reward_rate = $var;

        return $this;
    }

    /**
     **
     * An amount reserved in the staking reward account.<br/>
     * This is an amount "reserved" in the balance of account `0.0.800` that
     * is already owed for pending rewards that were previously earned but
     * have not yet been collected.<br/>
     * This value is further detailed in HIP-786.
     *
     * Generated from protobuf field <code>int64 reserved_staking_rewards = 10;</code>
     * @return int|string
     */
    public function getReservedStakingRewards()
    {
        return $this->reserved_staking_rewards;
    }

    /**
     **
     * An amount reserved in the staking reward account.<br/>
     * This is an amount "reserved" in the balance of account `0.0.800` that
     * is already owed for pending rewards that were previously earned but
     * have not yet been collected.<br/>
     * This value is further detailed in HIP-786.
     *
     * Generated from protobuf field <code>int64 reserved_staking_rewards = 10;</code>
     * @param int|string $var
     * @return $this
     */
    public function setReservedStakingRewards($var)
    {
        GPBUtil::checkInt64($var);
        $this->reserved_staking_rewards = $var;

        return $this;
    }

    /**
     **
     * An available, unreserved, amount in the staking reward account.<br/>
     * This is the balance of the staking reward account `0.0.800` at the close
     * of the staking period that just ended, after reduction for all "reserved"
     * funds necessary to pay previously earned rewards.<br/>
     * This value is further detailed in HIP-786.
     * <p>
     * This value SHALL be used to calculate the reward ratio according to
     * the formula detailed in HIP-782.
     *
     * Generated from protobuf field <code>int64 unreserved_staking_reward_balance = 11;</code>
     * @return int|string
     */
    public function getUnreservedStakingRewardBalance()
    {
        return $this->unreserved_staking_reward_balance;
    }

    /**
     **
     * An available, unreserved, amount in the staking reward account.<br/>
     * This is the balance of the staking reward account `0.0.800` at the close
     * of the staking period that just ended, after reduction for all "reserved"
     * funds necessary to pay previously earned rewards.<br/>
     * This value is further detailed in HIP-786.
     * <p>
     * This value SHALL be used to calculate the reward ratio according to
     * the formula detailed in HIP-782.
     *
     * Generated from protobuf field <code>int64 unreserved_staking_reward_balance = 11;</code>
     * @param int|string $var
     * @return $this
     */
    public function setUnreservedStakingRewardBalance($var)
    {
        GPBUtil::checkInt64($var);
        $this->unreserved_staking_reward_balance = $var;

        return $this;
    }

    /**
     **
     * A minimum balance required for maximum staking rewards.<br/>
     * This value is further detailed in HIP-786.
     * The formula to calculate staking rewards is detailed in HIP-782.
     * <p>
     * The value of `unreserved_staking_reward_balance` MUST match or exceed the
     * value of this field to support the maximum staking reward ratio.<br/>
     *
     * Generated from protobuf field <code>int64 reward_balance_threshold = 12;</code>
     * @return int|string
     */
    public function getRewardBalanceThreshold()
    {
        return $this->reward_balance_threshold;
    }

    /**
     **
     * A minimum balance required for maximum staking rewards.<br/>
     * This value is further detailed in HIP-786.
     * The formula to calculate staking rewards is detailed in HIP-782.
     * <p>
     * The value of `unreserved_staking_reward_balance` MUST match or exceed the
     * value of this field to support the maximum staking reward ratio.<br/>
     *
     * Generated from protobuf field <code>int64 reward_balance_threshold = 12;</code>
     * @param int|string $var
     * @return $this
     */
    public function setRewardBalanceThreshold($var)
    {
        GPBUtil::checkInt64($var);
        $this->reward_balance_threshold = $var;

        return $this;
    }

    /**
     **
     * A maximum network-wide stake that can earn full rewards.<br/>
     * If the network-wide stake, in tinybar, exceeds this value, then staking
     * rewards must be reduced to maintain "smooth" reward adjustments as
     * defined in HIP-782.<br/>
     * This value is further detailed in HIP-786.
     * <p>
     * If the total network-wide stake exceeds this value, the effective
     * staking reward ratio MUST be reduced to maintain solvency of the
     * staking reward account.
     *
     * Generated from protobuf field <code>int64 max_stake_rewarded = 13;</code>
     * @return int|string
     */
    public function getMaxStakeRewarded()
    {
        return $this->max_stake_rewarded;
    }

    /**
     **
     * A maximum network-wide stake that can earn full rewards.<br/>
     * If the network-wide stake, in tinybar, exceeds this value, then staking
     * rewards must be reduced to maintain "smooth" reward adjustments as
     * defined in HIP-782.<br/>
     * This value is further detailed in HIP-786.
     * <p>
     * If the total network-wide stake exceeds this value, the effective
     * staking reward ratio MUST be reduced to maintain solvency of the
     * staking reward account.
     *
     * Generated from protobuf field <code>int64 max_stake_rewarded = 13;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMaxStakeRewarded($var)
    {
        GPBUtil::checkInt64($var);
        $this->max_stake_rewarded = $var;

        return $this;
    }

    /**
     **
     * A limit amount that could be paid as staking rewards.<br/>
     * In the limit case, the network could pay at most this amount, in tinybar
     * as staking rewards for the staking period that just ended, if all other
     * conditions were met to perfection.<br/>
     * <p>
     * This value SHALL reflect the result of a maximum reward calculation that
     * takes into account the balance thresholds and maximum stake thresholds
     * as defined in HIP-782 and HIP-786.<br/>
     * This value is a convenience. The actual defined calculation SHALL be
     * authoritative in the unlikely event this value differs.
     *
     * Generated from protobuf field <code>int64 max_total_reward = 14;</code>
     * @return int|string
     */
    public function getMaxTotalReward()
    {
        return $this->max_total_reward;
    }

    /**
     **
     * A limit amount that could be paid as staking rewards.<br/>
     * In the limit case, the network could pay at most this amount, in tinybar
     * as staking rewards for the staking period that just ended, if all other
     * conditions were met to perfection.<br/>
     * <p>
     * This value SHALL reflect the result of a maximum reward calculation that
     * takes into account the balance thresholds and maximum stake thresholds
     * as defined in HIP-782 and HIP-786.<br/>
     * This value is a convenience. The actual defined calculation SHALL be
     * authoritative in the unlikely event this value differs.
     *
     * Generated from protobuf field <code>int64 max_total_reward = 14;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMaxTotalReward($var)
    {
        GPBUtil::checkInt64($var);
        $this->max_total_reward = $var;

        return $this;
    }

}

