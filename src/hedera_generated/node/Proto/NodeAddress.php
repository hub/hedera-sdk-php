<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: basic_types.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * The data about a node, including its service endpoints and the Hedera account
 * to be paid for services provided by the node (that is, queries answered and
 * transactions submitted).
 * All active fields are populated in the `0.0.102` address book file.<br/>
 * Only fields documented with "`0.0.101` field" are populated in the 0.0.101
 * address book file.
 * This message MAY be superseded by messages in state/addressbook/node.proto
 * and node_get_info.proto.
 *
 * Generated from protobuf message <code>proto.NodeAddress</code>
 */
class NodeAddress extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * ServiceEndpoint is now used to retrieve a node's list of IP
     * addresses and ports.<br/>
     * The IP address of the Node, as a string, encoded in UTF-8.<br/>
     * This value SHALL NOT be populated.
     *
     * Generated from protobuf field <code>bytes ipAddress = 1 [deprecated = true];</code>
     * @deprecated
     */
    protected $ipAddress = '';
    /**
     **
     * ServiceEndpoint is now used to retrieve a node's list of IP
     * addresses and ports.<br/>
     * The port number of the grpc server for the node.<br/>
     * This value SHALL NOT be populated.
     *
     * Generated from protobuf field <code>int32 portno = 2 [deprecated = true];</code>
     * @deprecated
     */
    protected $portno = 0;
    /**
     **
     * Description provides short text functionality.<br/>
     * A short description of the node.
     * <p>
     * This field SHALL NOT be populated.
     *
     * Generated from protobuf field <code>bytes memo = 3 [deprecated = true];</code>
     * @deprecated
     */
    protected $memo = '';
    /**
     **
     * A hexadecimal String encoding of an X509 public key.
     * <p>
     * This X509 RSA _public_ key SHALL be used to verify record stream files
     * (e.g., record stream files).<br/>
     * This field SHALL be a string of hexadecimal characters, encoded UTF-8,
     * which, translated to binary, form the public key DER encoding.
     *
     * Generated from protobuf field <code>string RSA_PubKey = 4;</code>
     */
    protected $RSA_PubKey = '';
    /**
     **
     * A numeric identifier for the node.
     * <p>
     * This value SHALL NOT be sequential.
     * <p>
     * A `0.0.101` field
     *
     * Generated from protobuf field <code>int64 nodeId = 5;</code>
     */
    protected $nodeId = 0;
    /**
     **
     * An account to be paid the "node" portion of transaction fees.<br/>
     * The "node" fees are paid to the node that submitted the transaction.
     * <p>
     * A `0.0.101` field
     *
     * Generated from protobuf field <code>.proto.AccountID nodeAccountId = 6;</code>
     */
    protected $nodeAccountId = null;
    /**
     **
     * A hash of the node's TLS certificate.
     * <p>
     * This field SHALL be a string of hexadecimal characters, encoded UTF-8,
     * which, translated to binary, form a SHA-384 hash of the node's TLS
     * certificate in PEM format.
     * This TLS certificate MUST be encoded UTF-8 and normalized according to
     * the NFKD form prior to computing the hash value.<br/>
     * The value of this field SHALL be used to verify the node TLS
     * certificate when presented during protocol negotiation.
     * <p>
     * A `0.0.101` field
     *
     * Generated from protobuf field <code>bytes nodeCertHash = 7;</code>
     */
    protected $nodeCertHash = '';
    /**
     **
     * A node's service IP addresses and TCP ports.<br/>
     * Nodes require multiple endpoints to ensure that inter-node communication
     * (e.g. gossip) is properly separated from client communication to
     * API endpoints.
     * <p>
     * A `0.0.101` field
     *
     * Generated from protobuf field <code>repeated .proto.ServiceEndpoint serviceEndpoint = 8;</code>
     */
    private $serviceEndpoint;
    /**
     **
     * A short description of the node.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>string description = 9;</code>
     */
    protected $description = '';
    /**
     **
     * This is replaced by per-account stake tracking and dynamic
     * calculation.<br/>
     * The amount of tinybar staked to the node.<br/>
     * This value SHOULD NOT be populated, and SHALL be ignored.
     *
     * Generated from protobuf field <code>int64 stake = 10 [deprecated = true];</code>
     * @deprecated
     */
    protected $stake = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $ipAddress
     *          *
     *           ServiceEndpoint is now used to retrieve a node's list of IP
     *           addresses and ports.<br/>
     *           The IP address of the Node, as a string, encoded in UTF-8.<br/>
     *           This value SHALL NOT be populated.
     *     @type int $portno
     *          *
     *           ServiceEndpoint is now used to retrieve a node's list of IP
     *           addresses and ports.<br/>
     *           The port number of the grpc server for the node.<br/>
     *           This value SHALL NOT be populated.
     *     @type string $memo
     *          *
     *           Description provides short text functionality.<br/>
     *           A short description of the node.
     *           <p>
     *           This field SHALL NOT be populated.
     *     @type string $RSA_PubKey
     *          *
     *           A hexadecimal String encoding of an X509 public key.
     *           <p>
     *           This X509 RSA _public_ key SHALL be used to verify record stream files
     *           (e.g., record stream files).<br/>
     *           This field SHALL be a string of hexadecimal characters, encoded UTF-8,
     *           which, translated to binary, form the public key DER encoding.
     *     @type int|string $nodeId
     *          *
     *           A numeric identifier for the node.
     *           <p>
     *           This value SHALL NOT be sequential.
     *           <p>
     *           A `0.0.101` field
     *     @type \Proto\AccountID $nodeAccountId
     *          *
     *           An account to be paid the "node" portion of transaction fees.<br/>
     *           The "node" fees are paid to the node that submitted the transaction.
     *           <p>
     *           A `0.0.101` field
     *     @type string $nodeCertHash
     *          *
     *           A hash of the node's TLS certificate.
     *           <p>
     *           This field SHALL be a string of hexadecimal characters, encoded UTF-8,
     *           which, translated to binary, form a SHA-384 hash of the node's TLS
     *           certificate in PEM format.
     *           This TLS certificate MUST be encoded UTF-8 and normalized according to
     *           the NFKD form prior to computing the hash value.<br/>
     *           The value of this field SHALL be used to verify the node TLS
     *           certificate when presented during protocol negotiation.
     *           <p>
     *           A `0.0.101` field
     *     @type \Proto\ServiceEndpoint[] $serviceEndpoint
     *          *
     *           A node's service IP addresses and TCP ports.<br/>
     *           Nodes require multiple endpoints to ensure that inter-node communication
     *           (e.g. gossip) is properly separated from client communication to
     *           API endpoints.
     *           <p>
     *           A `0.0.101` field
     *     @type string $description
     *          *
     *           A short description of the node.
     *           <p>
     *           This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     *           (default 100) bytes when encoded as UTF-8.
     *     @type int|string $stake
     *          *
     *           This is replaced by per-account stake tracking and dynamic
     *           calculation.<br/>
     *           The amount of tinybar staked to the node.<br/>
     *           This value SHOULD NOT be populated, and SHALL be ignored.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\BasicTypes::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * ServiceEndpoint is now used to retrieve a node's list of IP
     * addresses and ports.<br/>
     * The IP address of the Node, as a string, encoded in UTF-8.<br/>
     * This value SHALL NOT be populated.
     *
     * Generated from protobuf field <code>bytes ipAddress = 1 [deprecated = true];</code>
     * @return string
     * @deprecated
     */
    public function getIpAddress()
    {
        if ($this->ipAddress !== '') {
            @trigger_error('ipAddress is deprecated.', E_USER_DEPRECATED);
        }
        return $this->ipAddress;
    }

    /**
     **
     * ServiceEndpoint is now used to retrieve a node's list of IP
     * addresses and ports.<br/>
     * The IP address of the Node, as a string, encoded in UTF-8.<br/>
     * This value SHALL NOT be populated.
     *
     * Generated from protobuf field <code>bytes ipAddress = 1 [deprecated = true];</code>
     * @param string $var
     * @return $this
     * @deprecated
     */
    public function setIpAddress($var)
    {
        @trigger_error('ipAddress is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkString($var, False);
        $this->ipAddress = $var;

        return $this;
    }

    /**
     **
     * ServiceEndpoint is now used to retrieve a node's list of IP
     * addresses and ports.<br/>
     * The port number of the grpc server for the node.<br/>
     * This value SHALL NOT be populated.
     *
     * Generated from protobuf field <code>int32 portno = 2 [deprecated = true];</code>
     * @return int
     * @deprecated
     */
    public function getPortno()
    {
        if ($this->portno !== 0) {
            @trigger_error('portno is deprecated.', E_USER_DEPRECATED);
        }
        return $this->portno;
    }

    /**
     **
     * ServiceEndpoint is now used to retrieve a node's list of IP
     * addresses and ports.<br/>
     * The port number of the grpc server for the node.<br/>
     * This value SHALL NOT be populated.
     *
     * Generated from protobuf field <code>int32 portno = 2 [deprecated = true];</code>
     * @param int $var
     * @return $this
     * @deprecated
     */
    public function setPortno($var)
    {
        @trigger_error('portno is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkInt32($var);
        $this->portno = $var;

        return $this;
    }

    /**
     **
     * Description provides short text functionality.<br/>
     * A short description of the node.
     * <p>
     * This field SHALL NOT be populated.
     *
     * Generated from protobuf field <code>bytes memo = 3 [deprecated = true];</code>
     * @return string
     * @deprecated
     */
    public function getMemo()
    {
        if ($this->memo !== '') {
            @trigger_error('memo is deprecated.', E_USER_DEPRECATED);
        }
        return $this->memo;
    }

    /**
     **
     * Description provides short text functionality.<br/>
     * A short description of the node.
     * <p>
     * This field SHALL NOT be populated.
     *
     * Generated from protobuf field <code>bytes memo = 3 [deprecated = true];</code>
     * @param string $var
     * @return $this
     * @deprecated
     */
    public function setMemo($var)
    {
        @trigger_error('memo is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkString($var, False);
        $this->memo = $var;

        return $this;
    }

    /**
     **
     * A hexadecimal String encoding of an X509 public key.
     * <p>
     * This X509 RSA _public_ key SHALL be used to verify record stream files
     * (e.g., record stream files).<br/>
     * This field SHALL be a string of hexadecimal characters, encoded UTF-8,
     * which, translated to binary, form the public key DER encoding.
     *
     * Generated from protobuf field <code>string RSA_PubKey = 4;</code>
     * @return string
     */
    public function getRSAPubKey()
    {
        return $this->RSA_PubKey;
    }

    /**
     **
     * A hexadecimal String encoding of an X509 public key.
     * <p>
     * This X509 RSA _public_ key SHALL be used to verify record stream files
     * (e.g., record stream files).<br/>
     * This field SHALL be a string of hexadecimal characters, encoded UTF-8,
     * which, translated to binary, form the public key DER encoding.
     *
     * Generated from protobuf field <code>string RSA_PubKey = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setRSAPubKey($var)
    {
        GPBUtil::checkString($var, True);
        $this->RSA_PubKey = $var;

        return $this;
    }

    /**
     **
     * A numeric identifier for the node.
     * <p>
     * This value SHALL NOT be sequential.
     * <p>
     * A `0.0.101` field
     *
     * Generated from protobuf field <code>int64 nodeId = 5;</code>
     * @return int|string
     */
    public function getNodeId()
    {
        return $this->nodeId;
    }

    /**
     **
     * A numeric identifier for the node.
     * <p>
     * This value SHALL NOT be sequential.
     * <p>
     * A `0.0.101` field
     *
     * Generated from protobuf field <code>int64 nodeId = 5;</code>
     * @param int|string $var
     * @return $this
     */
    public function setNodeId($var)
    {
        GPBUtil::checkInt64($var);
        $this->nodeId = $var;

        return $this;
    }

    /**
     **
     * An account to be paid the "node" portion of transaction fees.<br/>
     * The "node" fees are paid to the node that submitted the transaction.
     * <p>
     * A `0.0.101` field
     *
     * Generated from protobuf field <code>.proto.AccountID nodeAccountId = 6;</code>
     * @return \Proto\AccountID|null
     */
    public function getNodeAccountId()
    {
        return $this->nodeAccountId;
    }

    public function hasNodeAccountId()
    {
        return isset($this->nodeAccountId);
    }

    public function clearNodeAccountId()
    {
        unset($this->nodeAccountId);
    }

    /**
     **
     * An account to be paid the "node" portion of transaction fees.<br/>
     * The "node" fees are paid to the node that submitted the transaction.
     * <p>
     * A `0.0.101` field
     *
     * Generated from protobuf field <code>.proto.AccountID nodeAccountId = 6;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setNodeAccountId($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->nodeAccountId = $var;

        return $this;
    }

    /**
     **
     * A hash of the node's TLS certificate.
     * <p>
     * This field SHALL be a string of hexadecimal characters, encoded UTF-8,
     * which, translated to binary, form a SHA-384 hash of the node's TLS
     * certificate in PEM format.
     * This TLS certificate MUST be encoded UTF-8 and normalized according to
     * the NFKD form prior to computing the hash value.<br/>
     * The value of this field SHALL be used to verify the node TLS
     * certificate when presented during protocol negotiation.
     * <p>
     * A `0.0.101` field
     *
     * Generated from protobuf field <code>bytes nodeCertHash = 7;</code>
     * @return string
     */
    public function getNodeCertHash()
    {
        return $this->nodeCertHash;
    }

    /**
     **
     * A hash of the node's TLS certificate.
     * <p>
     * This field SHALL be a string of hexadecimal characters, encoded UTF-8,
     * which, translated to binary, form a SHA-384 hash of the node's TLS
     * certificate in PEM format.
     * This TLS certificate MUST be encoded UTF-8 and normalized according to
     * the NFKD form prior to computing the hash value.<br/>
     * The value of this field SHALL be used to verify the node TLS
     * certificate when presented during protocol negotiation.
     * <p>
     * A `0.0.101` field
     *
     * Generated from protobuf field <code>bytes nodeCertHash = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setNodeCertHash($var)
    {
        GPBUtil::checkString($var, False);
        $this->nodeCertHash = $var;

        return $this;
    }

    /**
     **
     * A node's service IP addresses and TCP ports.<br/>
     * Nodes require multiple endpoints to ensure that inter-node communication
     * (e.g. gossip) is properly separated from client communication to
     * API endpoints.
     * <p>
     * A `0.0.101` field
     *
     * Generated from protobuf field <code>repeated .proto.ServiceEndpoint serviceEndpoint = 8;</code>
     * @return RepeatedField<\Proto\ServiceEndpoint>
     */
    public function getServiceEndpoint()
    {
        return $this->serviceEndpoint;
    }

    /**
     **
     * A node's service IP addresses and TCP ports.<br/>
     * Nodes require multiple endpoints to ensure that inter-node communication
     * (e.g. gossip) is properly separated from client communication to
     * API endpoints.
     * <p>
     * A `0.0.101` field
     *
     * Generated from protobuf field <code>repeated .proto.ServiceEndpoint serviceEndpoint = 8;</code>
     * @param \Proto\ServiceEndpoint[] $var
     * @return $this
     */
    public function setServiceEndpoint($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Proto\ServiceEndpoint::class);
        $this->serviceEndpoint = $arr;

        return $this;
    }

    /**
     **
     * A short description of the node.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>string description = 9;</code>
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     **
     * A short description of the node.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>string description = 9;</code>
     * @param string $var
     * @return $this
     */
    public function setDescription($var)
    {
        GPBUtil::checkString($var, True);
        $this->description = $var;

        return $this;
    }

    /**
     **
     * This is replaced by per-account stake tracking and dynamic
     * calculation.<br/>
     * The amount of tinybar staked to the node.<br/>
     * This value SHOULD NOT be populated, and SHALL be ignored.
     *
     * Generated from protobuf field <code>int64 stake = 10 [deprecated = true];</code>
     * @return int|string
     * @deprecated
     */
    public function getStake()
    {
        if ($this->stake !== 0) {
            @trigger_error('stake is deprecated.', E_USER_DEPRECATED);
        }
        return $this->stake;
    }

    /**
     **
     * This is replaced by per-account stake tracking and dynamic
     * calculation.<br/>
     * The amount of tinybar staked to the node.<br/>
     * This value SHOULD NOT be populated, and SHALL be ignored.
     *
     * Generated from protobuf field <code>int64 stake = 10 [deprecated = true];</code>
     * @param int|string $var
     * @return $this
     * @deprecated
     */
    public function setStake($var)
    {
        @trigger_error('stake is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkInt64($var);
        $this->stake = $var;

        return $this;
    }

}

