<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: custom_fees.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * A descriptor for a fee based on a portion of the tokens transferred.
 * This fee option describes fees as a fraction of the amount of
 * fungible/common token(s) transferred.  The fee also describes a minimum
 * and maximum amount, both of which are OPTIONAL.
 * This type of fee SHALL be assessed only for fungible/common tokens.<br/>
 * This type of fee MUST NOT be defined for a non-fungible/unique
 * token type.<br/>
 * This fee SHALL be paid with the same type of tokens as those
 * transferred.<br/>
 * The fee MAY be subtracted from the transferred tokens, or MAY be assessed
 * to the sender in addition to the tokens actually transferred, based on
 * the `net_of_transfers` field.
 * When a single transaction sends tokens from one sender to multiple
 * recipients, and the `net_of_transfers` flag is false, the network
 * SHALL attempt to evenly assess the total fee across all recipients
 * proportionally. This may be inexact and, particularly when there are
 * large differences between recipients, MAY result in small deviations
 * from an ideal "fair" distribution.<br/>
 * If the sender lacks sufficient tokens to pay fees, or the assessment
 * of custom fees reduces the net amount transferred to or below zero,
 * the transaction MAY fail due to insufficient funds to pay all fees.
 *
 * Generated from protobuf message <code>proto.FractionalFee</code>
 */
class FractionalFee extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A Fraction of the transferred tokens to assess as a fee.<br/>
     * This value MUST be less than or equal to one.<br/>
     * This value MUST be greater than zero.
     *
     * Generated from protobuf field <code>.proto.Fraction fractional_amount = 1;</code>
     */
    protected $fractional_amount = null;
    /**
     **
     * A minimum fee to charge, in units of 10<sup>-decimals</sup> tokens.
     * <p>
     * This value is OPTIONAL, with a default of `0` indicating no minimum.<br/>
     * If set, this value MUST be greater than zero.<br/>
     * If set, all transfers SHALL pay at least this amount.
     *
     * Generated from protobuf field <code>int64 minimum_amount = 2;</code>
     */
    protected $minimum_amount = 0;
    /**
     **
     * A maximum fee to charge, in units of 10<sup>-decimals</sup> tokens.
     * <p>
     * This value is OPTIONAL, with a default of `0` indicating no maximum.<br/>
     * If set, this value MUST be greater than zero.<br/>
     * If set, any fee charged SHALL NOT exceed this value.<br/>
     * This value SHOULD be strictly greater than `minimum_amount`.
     * If this amount is less than or equal to `minimum_amount`, then
     * the fee charged SHALL always be equal to this value and
     * `fractional_amount` SHALL NOT have any effect.
     *
     * Generated from protobuf field <code>int64 maximum_amount = 3;</code>
     */
    protected $maximum_amount = 0;
    /**
     **
     * Flag requesting to assess the calculated fee against the sender,
     * without reducing the amount transferred.<br/>
     * #### Effects of this flag
     * <ol>
     *   <li>If this value is true
     *     <ul>
     *       <li>The receiver of a transfer SHALL receive the entire
     *           amount sent.</li>
     *       <li>The fee SHALL be charged to the sender as an additional
     *           amount, increasing the token transfer debit.</li>
     *     </ul>
     *   </li>
     *   <li>If this value is false
     *     <ul>
     *       <li>The receiver of a transfer SHALL receive the amount sent
     *           _after_ deduction of the calculated fee.</li>
     *     </ul>
     *   </li>
     * </ol>
     *
     * Generated from protobuf field <code>bool net_of_transfers = 4;</code>
     */
    protected $net_of_transfers = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\Fraction $fractional_amount
     *          *
     *           A Fraction of the transferred tokens to assess as a fee.<br/>
     *           This value MUST be less than or equal to one.<br/>
     *           This value MUST be greater than zero.
     *     @type int|string $minimum_amount
     *          *
     *           A minimum fee to charge, in units of 10<sup>-decimals</sup> tokens.
     *           <p>
     *           This value is OPTIONAL, with a default of `0` indicating no minimum.<br/>
     *           If set, this value MUST be greater than zero.<br/>
     *           If set, all transfers SHALL pay at least this amount.
     *     @type int|string $maximum_amount
     *          *
     *           A maximum fee to charge, in units of 10<sup>-decimals</sup> tokens.
     *           <p>
     *           This value is OPTIONAL, with a default of `0` indicating no maximum.<br/>
     *           If set, this value MUST be greater than zero.<br/>
     *           If set, any fee charged SHALL NOT exceed this value.<br/>
     *           This value SHOULD be strictly greater than `minimum_amount`.
     *           If this amount is less than or equal to `minimum_amount`, then
     *           the fee charged SHALL always be equal to this value and
     *           `fractional_amount` SHALL NOT have any effect.
     *     @type bool $net_of_transfers
     *          *
     *           Flag requesting to assess the calculated fee against the sender,
     *           without reducing the amount transferred.<br/>
     *           #### Effects of this flag
     *           <ol>
     *             <li>If this value is true
     *               <ul>
     *                 <li>The receiver of a transfer SHALL receive the entire
     *                     amount sent.</li>
     *                 <li>The fee SHALL be charged to the sender as an additional
     *                     amount, increasing the token transfer debit.</li>
     *               </ul>
     *             </li>
     *             <li>If this value is false
     *               <ul>
     *                 <li>The receiver of a transfer SHALL receive the amount sent
     *                     _after_ deduction of the calculated fee.</li>
     *               </ul>
     *             </li>
     *           </ol>
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\CustomFees::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A Fraction of the transferred tokens to assess as a fee.<br/>
     * This value MUST be less than or equal to one.<br/>
     * This value MUST be greater than zero.
     *
     * Generated from protobuf field <code>.proto.Fraction fractional_amount = 1;</code>
     * @return \Proto\Fraction|null
     */
    public function getFractionalAmount()
    {
        return $this->fractional_amount;
    }

    public function hasFractionalAmount()
    {
        return isset($this->fractional_amount);
    }

    public function clearFractionalAmount()
    {
        unset($this->fractional_amount);
    }

    /**
     **
     * A Fraction of the transferred tokens to assess as a fee.<br/>
     * This value MUST be less than or equal to one.<br/>
     * This value MUST be greater than zero.
     *
     * Generated from protobuf field <code>.proto.Fraction fractional_amount = 1;</code>
     * @param \Proto\Fraction $var
     * @return $this
     */
    public function setFractionalAmount($var)
    {
        GPBUtil::checkMessage($var, \Proto\Fraction::class);
        $this->fractional_amount = $var;

        return $this;
    }

    /**
     **
     * A minimum fee to charge, in units of 10<sup>-decimals</sup> tokens.
     * <p>
     * This value is OPTIONAL, with a default of `0` indicating no minimum.<br/>
     * If set, this value MUST be greater than zero.<br/>
     * If set, all transfers SHALL pay at least this amount.
     *
     * Generated from protobuf field <code>int64 minimum_amount = 2;</code>
     * @return int|string
     */
    public function getMinimumAmount()
    {
        return $this->minimum_amount;
    }

    /**
     **
     * A minimum fee to charge, in units of 10<sup>-decimals</sup> tokens.
     * <p>
     * This value is OPTIONAL, with a default of `0` indicating no minimum.<br/>
     * If set, this value MUST be greater than zero.<br/>
     * If set, all transfers SHALL pay at least this amount.
     *
     * Generated from protobuf field <code>int64 minimum_amount = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMinimumAmount($var)
    {
        GPBUtil::checkInt64($var);
        $this->minimum_amount = $var;

        return $this;
    }

    /**
     **
     * A maximum fee to charge, in units of 10<sup>-decimals</sup> tokens.
     * <p>
     * This value is OPTIONAL, with a default of `0` indicating no maximum.<br/>
     * If set, this value MUST be greater than zero.<br/>
     * If set, any fee charged SHALL NOT exceed this value.<br/>
     * This value SHOULD be strictly greater than `minimum_amount`.
     * If this amount is less than or equal to `minimum_amount`, then
     * the fee charged SHALL always be equal to this value and
     * `fractional_amount` SHALL NOT have any effect.
     *
     * Generated from protobuf field <code>int64 maximum_amount = 3;</code>
     * @return int|string
     */
    public function getMaximumAmount()
    {
        return $this->maximum_amount;
    }

    /**
     **
     * A maximum fee to charge, in units of 10<sup>-decimals</sup> tokens.
     * <p>
     * This value is OPTIONAL, with a default of `0` indicating no maximum.<br/>
     * If set, this value MUST be greater than zero.<br/>
     * If set, any fee charged SHALL NOT exceed this value.<br/>
     * This value SHOULD be strictly greater than `minimum_amount`.
     * If this amount is less than or equal to `minimum_amount`, then
     * the fee charged SHALL always be equal to this value and
     * `fractional_amount` SHALL NOT have any effect.
     *
     * Generated from protobuf field <code>int64 maximum_amount = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMaximumAmount($var)
    {
        GPBUtil::checkInt64($var);
        $this->maximum_amount = $var;

        return $this;
    }

    /**
     **
     * Flag requesting to assess the calculated fee against the sender,
     * without reducing the amount transferred.<br/>
     * #### Effects of this flag
     * <ol>
     *   <li>If this value is true
     *     <ul>
     *       <li>The receiver of a transfer SHALL receive the entire
     *           amount sent.</li>
     *       <li>The fee SHALL be charged to the sender as an additional
     *           amount, increasing the token transfer debit.</li>
     *     </ul>
     *   </li>
     *   <li>If this value is false
     *     <ul>
     *       <li>The receiver of a transfer SHALL receive the amount sent
     *           _after_ deduction of the calculated fee.</li>
     *     </ul>
     *   </li>
     * </ol>
     *
     * Generated from protobuf field <code>bool net_of_transfers = 4;</code>
     * @return bool
     */
    public function getNetOfTransfers()
    {
        return $this->net_of_transfers;
    }

    /**
     **
     * Flag requesting to assess the calculated fee against the sender,
     * without reducing the amount transferred.<br/>
     * #### Effects of this flag
     * <ol>
     *   <li>If this value is true
     *     <ul>
     *       <li>The receiver of a transfer SHALL receive the entire
     *           amount sent.</li>
     *       <li>The fee SHALL be charged to the sender as an additional
     *           amount, increasing the token transfer debit.</li>
     *     </ul>
     *   </li>
     *   <li>If this value is false
     *     <ul>
     *       <li>The receiver of a transfer SHALL receive the amount sent
     *           _after_ deduction of the calculated fee.</li>
     *     </ul>
     *   </li>
     * </ol>
     *
     * Generated from protobuf field <code>bool net_of_transfers = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setNetOfTransfers($var)
    {
        GPBUtil::checkBool($var);
        $this->net_of_transfers = $var;

        return $this;
    }

}

