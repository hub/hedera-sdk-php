<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: basic_types.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * A list of transfers for a particular (non-HBAR) token type.
 * A `TokenTransferList` applies to a single token type, but may contain many
 * individual transfers.<br/>
 * Each transfer of a fungible/common token MUST specify an `accountID` and
 * `amount`. Amount SHALL be positive when the account receives tokens, and
 * SHALL be negative when the account sends tokens. The amount SHOULD NOT be
 * `0`.<br/>
 * In a transfer list containing fungible/common tokens in the `transfers`
 * list, the sum of all such transfers MUST be zero (`0`).
 * Each transfer of a unique token SHALL specify both sender and receiver, as
 * well as the serial number transferred.<br/>
 * A single `TokenTransferList` MUST contain `transfers` or `nftTransfers`,
 * but MUST NOT contain both.
 *
 * Generated from protobuf message <code>proto.TokenTransferList</code>
 */
class TokenTransferList extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A token identifier.<br/>
     * This is the token to be transferred.
     *
     * Generated from protobuf field <code>.proto.TokenID token = 1;</code>
     */
    protected $token = null;
    /**
     **
     * A list of account amounts.
     * <p>
     * Each entry SHALL have an account and amount.<br/>
     * These transfers SHALL be "double-entry" style; the credits (positive
     * amount) and debits (negative amount) MUST sum to 0, unless this
     * transfer list is part of a `mint` or `burn` operation.<br/>
     * This SHALL be be set for fungible/common tokens and MUST be
     * empty otherwise.
     *
     * Generated from protobuf field <code>repeated .proto.AccountAmount transfers = 2;</code>
     */
    private $transfers;
    /**
     **
     * A list of NftTransfers.
     * <p>
     * Each entry SHALL have a sender and receiver account, and the
     * serial number of the unique token to transfer.<br/>
     * This SHALL be be set for non-fungible/unique tokens and SHALL be
     * empty otherwise.
     *
     * Generated from protobuf field <code>repeated .proto.NftTransfer nftTransfers = 3;</code>
     */
    private $nftTransfers;
    /**
     **
     * An expected decimal precision.<br/>
     * This is the number of decimals a fungible/common token type is
     * _expected_ to have.
     * <p>
     * The transfer SHALL fail with response code `UNEXPECTED_TOKEN_DECIMALS`
     * if this is set and the actual decimals specified for the `Token` differ
     * from this value.<br/>
     * If `nftTransfers` is set, then this value SHOULD NOT be set.
     *
     * Generated from protobuf field <code>.google.protobuf.UInt32Value expected_decimals = 4;</code>
     */
    protected $expected_decimals = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\TokenID $token
     *          *
     *           A token identifier.<br/>
     *           This is the token to be transferred.
     *     @type \Proto\AccountAmount[] $transfers
     *          *
     *           A list of account amounts.
     *           <p>
     *           Each entry SHALL have an account and amount.<br/>
     *           These transfers SHALL be "double-entry" style; the credits (positive
     *           amount) and debits (negative amount) MUST sum to 0, unless this
     *           transfer list is part of a `mint` or `burn` operation.<br/>
     *           This SHALL be be set for fungible/common tokens and MUST be
     *           empty otherwise.
     *     @type \Proto\NftTransfer[] $nftTransfers
     *          *
     *           A list of NftTransfers.
     *           <p>
     *           Each entry SHALL have a sender and receiver account, and the
     *           serial number of the unique token to transfer.<br/>
     *           This SHALL be be set for non-fungible/unique tokens and SHALL be
     *           empty otherwise.
     *     @type \Google\Protobuf\UInt32Value $expected_decimals
     *          *
     *           An expected decimal precision.<br/>
     *           This is the number of decimals a fungible/common token type is
     *           _expected_ to have.
     *           <p>
     *           The transfer SHALL fail with response code `UNEXPECTED_TOKEN_DECIMALS`
     *           if this is set and the actual decimals specified for the `Token` differ
     *           from this value.<br/>
     *           If `nftTransfers` is set, then this value SHOULD NOT be set.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\BasicTypes::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A token identifier.<br/>
     * This is the token to be transferred.
     *
     * Generated from protobuf field <code>.proto.TokenID token = 1;</code>
     * @return \Proto\TokenID|null
     */
    public function getToken()
    {
        return $this->token;
    }

    public function hasToken()
    {
        return isset($this->token);
    }

    public function clearToken()
    {
        unset($this->token);
    }

    /**
     **
     * A token identifier.<br/>
     * This is the token to be transferred.
     *
     * Generated from protobuf field <code>.proto.TokenID token = 1;</code>
     * @param \Proto\TokenID $var
     * @return $this
     */
    public function setToken($var)
    {
        GPBUtil::checkMessage($var, \Proto\TokenID::class);
        $this->token = $var;

        return $this;
    }

    /**
     **
     * A list of account amounts.
     * <p>
     * Each entry SHALL have an account and amount.<br/>
     * These transfers SHALL be "double-entry" style; the credits (positive
     * amount) and debits (negative amount) MUST sum to 0, unless this
     * transfer list is part of a `mint` or `burn` operation.<br/>
     * This SHALL be be set for fungible/common tokens and MUST be
     * empty otherwise.
     *
     * Generated from protobuf field <code>repeated .proto.AccountAmount transfers = 2;</code>
     * @return RepeatedField<\Proto\AccountAmount>
     */
    public function getTransfers()
    {
        return $this->transfers;
    }

    /**
     **
     * A list of account amounts.
     * <p>
     * Each entry SHALL have an account and amount.<br/>
     * These transfers SHALL be "double-entry" style; the credits (positive
     * amount) and debits (negative amount) MUST sum to 0, unless this
     * transfer list is part of a `mint` or `burn` operation.<br/>
     * This SHALL be be set for fungible/common tokens and MUST be
     * empty otherwise.
     *
     * Generated from protobuf field <code>repeated .proto.AccountAmount transfers = 2;</code>
     * @param \Proto\AccountAmount[] $var
     * @return $this
     */
    public function setTransfers($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Proto\AccountAmount::class);
        $this->transfers = $arr;

        return $this;
    }

    /**
     **
     * A list of NftTransfers.
     * <p>
     * Each entry SHALL have a sender and receiver account, and the
     * serial number of the unique token to transfer.<br/>
     * This SHALL be be set for non-fungible/unique tokens and SHALL be
     * empty otherwise.
     *
     * Generated from protobuf field <code>repeated .proto.NftTransfer nftTransfers = 3;</code>
     * @return RepeatedField<\Proto\NftTransfer>
     */
    public function getNftTransfers()
    {
        return $this->nftTransfers;
    }

    /**
     **
     * A list of NftTransfers.
     * <p>
     * Each entry SHALL have a sender and receiver account, and the
     * serial number of the unique token to transfer.<br/>
     * This SHALL be be set for non-fungible/unique tokens and SHALL be
     * empty otherwise.
     *
     * Generated from protobuf field <code>repeated .proto.NftTransfer nftTransfers = 3;</code>
     * @param \Proto\NftTransfer[] $var
     * @return $this
     */
    public function setNftTransfers($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Proto\NftTransfer::class);
        $this->nftTransfers = $arr;

        return $this;
    }

    /**
     **
     * An expected decimal precision.<br/>
     * This is the number of decimals a fungible/common token type is
     * _expected_ to have.
     * <p>
     * The transfer SHALL fail with response code `UNEXPECTED_TOKEN_DECIMALS`
     * if this is set and the actual decimals specified for the `Token` differ
     * from this value.<br/>
     * If `nftTransfers` is set, then this value SHOULD NOT be set.
     *
     * Generated from protobuf field <code>.google.protobuf.UInt32Value expected_decimals = 4;</code>
     * @return \Google\Protobuf\UInt32Value|null
     */
    public function getExpectedDecimals()
    {
        return $this->expected_decimals;
    }

    public function hasExpectedDecimals()
    {
        return isset($this->expected_decimals);
    }

    public function clearExpectedDecimals()
    {
        unset($this->expected_decimals);
    }

    /**
     * Returns the unboxed value from <code>getExpectedDecimals()</code>

     **
     * An expected decimal precision.<br/>
     * This is the number of decimals a fungible/common token type is
     * _expected_ to have.
     * <p>
     * The transfer SHALL fail with response code `UNEXPECTED_TOKEN_DECIMALS`
     * if this is set and the actual decimals specified for the `Token` differ
     * from this value.<br/>
     * If `nftTransfers` is set, then this value SHOULD NOT be set.
     *
     * Generated from protobuf field <code>.google.protobuf.UInt32Value expected_decimals = 4;</code>
     * @return int|null
     */
    public function getExpectedDecimalsUnwrapped()
    {
        return $this->readWrapperValue("expected_decimals");
    }

    /**
     **
     * An expected decimal precision.<br/>
     * This is the number of decimals a fungible/common token type is
     * _expected_ to have.
     * <p>
     * The transfer SHALL fail with response code `UNEXPECTED_TOKEN_DECIMALS`
     * if this is set and the actual decimals specified for the `Token` differ
     * from this value.<br/>
     * If `nftTransfers` is set, then this value SHOULD NOT be set.
     *
     * Generated from protobuf field <code>.google.protobuf.UInt32Value expected_decimals = 4;</code>
     * @param \Google\Protobuf\UInt32Value $var
     * @return $this
     */
    public function setExpectedDecimals($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\UInt32Value::class);
        $this->expected_decimals = $var;

        return $this;
    }

    /**
     * Sets the field by wrapping a primitive type in a Google\Protobuf\UInt32Value object.

     **
     * An expected decimal precision.<br/>
     * This is the number of decimals a fungible/common token type is
     * _expected_ to have.
     * <p>
     * The transfer SHALL fail with response code `UNEXPECTED_TOKEN_DECIMALS`
     * if this is set and the actual decimals specified for the `Token` differ
     * from this value.<br/>
     * If `nftTransfers` is set, then this value SHOULD NOT be set.
     *
     * Generated from protobuf field <code>.google.protobuf.UInt32Value expected_decimals = 4;</code>
     * @param int|null $var
     * @return $this
     */
    public function setExpectedDecimalsUnwrapped($var)
    {
        $this->writeWrapperValue("expected_decimals", $var);
        return $this;}

}

