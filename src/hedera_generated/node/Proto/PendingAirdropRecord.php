<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: transaction_record.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * A record of a new pending airdrop.
 *
 * Generated from protobuf message <code>proto.PendingAirdropRecord</code>
 */
class PendingAirdropRecord extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A unique, composite, identifier for a pending airdrop.
     * <p>
     * This field is REQUIRED.
     *
     * Generated from protobuf field <code>.proto.PendingAirdropId pending_airdrop_id = 1;</code>
     */
    protected $pending_airdrop_id = null;
    /**
     **
     * A single pending airdrop amount.
     * <p>
     * If the pending airdrop is for a fungible/common token this field
     * is REQUIRED and SHALL be the current amount of tokens offered.<br/>
     * If the pending airdrop is for a non-fungible/unique token,
     * this field SHALL NOT be set.
     *
     * Generated from protobuf field <code>.proto.PendingAirdropValue pending_airdrop_value = 2;</code>
     */
    protected $pending_airdrop_value = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\PendingAirdropId $pending_airdrop_id
     *          *
     *           A unique, composite, identifier for a pending airdrop.
     *           <p>
     *           This field is REQUIRED.
     *     @type \Proto\PendingAirdropValue $pending_airdrop_value
     *          *
     *           A single pending airdrop amount.
     *           <p>
     *           If the pending airdrop is for a fungible/common token this field
     *           is REQUIRED and SHALL be the current amount of tokens offered.<br/>
     *           If the pending airdrop is for a non-fungible/unique token,
     *           this field SHALL NOT be set.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\TransactionRecord::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A unique, composite, identifier for a pending airdrop.
     * <p>
     * This field is REQUIRED.
     *
     * Generated from protobuf field <code>.proto.PendingAirdropId pending_airdrop_id = 1;</code>
     * @return \Proto\PendingAirdropId|null
     */
    public function getPendingAirdropId()
    {
        return $this->pending_airdrop_id;
    }

    public function hasPendingAirdropId()
    {
        return isset($this->pending_airdrop_id);
    }

    public function clearPendingAirdropId()
    {
        unset($this->pending_airdrop_id);
    }

    /**
     **
     * A unique, composite, identifier for a pending airdrop.
     * <p>
     * This field is REQUIRED.
     *
     * Generated from protobuf field <code>.proto.PendingAirdropId pending_airdrop_id = 1;</code>
     * @param \Proto\PendingAirdropId $var
     * @return $this
     */
    public function setPendingAirdropId($var)
    {
        GPBUtil::checkMessage($var, \Proto\PendingAirdropId::class);
        $this->pending_airdrop_id = $var;

        return $this;
    }

    /**
     **
     * A single pending airdrop amount.
     * <p>
     * If the pending airdrop is for a fungible/common token this field
     * is REQUIRED and SHALL be the current amount of tokens offered.<br/>
     * If the pending airdrop is for a non-fungible/unique token,
     * this field SHALL NOT be set.
     *
     * Generated from protobuf field <code>.proto.PendingAirdropValue pending_airdrop_value = 2;</code>
     * @return \Proto\PendingAirdropValue|null
     */
    public function getPendingAirdropValue()
    {
        return $this->pending_airdrop_value;
    }

    public function hasPendingAirdropValue()
    {
        return isset($this->pending_airdrop_value);
    }

    public function clearPendingAirdropValue()
    {
        unset($this->pending_airdrop_value);
    }

    /**
     **
     * A single pending airdrop amount.
     * <p>
     * If the pending airdrop is for a fungible/common token this field
     * is REQUIRED and SHALL be the current amount of tokens offered.<br/>
     * If the pending airdrop is for a non-fungible/unique token,
     * this field SHALL NOT be set.
     *
     * Generated from protobuf field <code>.proto.PendingAirdropValue pending_airdrop_value = 2;</code>
     * @param \Proto\PendingAirdropValue $var
     * @return $this
     */
    public function setPendingAirdropValue($var)
    {
        GPBUtil::checkMessage($var, \Proto\PendingAirdropValue::class);
        $this->pending_airdrop_value = $var;

        return $this;
    }

}

