<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: file_create.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Create a new file.
 * If successful, the new file SHALL contain the (possibly empty) content
 * provided in the `contents` field.<br/>
 * When the current consensus time exceeds the `expirationTime` value, the
 * network SHALL expire the file, and MAY archive the state entry.
 * #### Signature Requirements
 * The HFS manages file authorization in a manner that can be confusing.
 * The core element of file authorization is the `keys` field,
 * which is a `KeyList`; a list of individual `Key` messages, each of which
 * may represent a simple or complex key.<br/>
 * The file service transactions treat this list differently.<br/>
 * A `fileCreate`, `fileAppend`, or `fileUpdate` MUST have a valid signature
 * from _each_ key in the list.<br/>
 * A `fileDelete` MUST have a valid signature from _at least one_ key in
 * the list. This is different, and allows a file "owned" by many entities
 * to be deleted by any one of those entities. A deleted file cannot be
 * restored, so it is important to consider this when assigning keys for
 * a file.<br/>
 * If any of the keys in a `KeyList` are complex, the full requirements of
 * each complex key must be met to count as a "valid signature" for that key.
 * A complex key structure (i.e. a `ThresholdKey`, or `KeyList`, possibly
 * including additional `ThresholdKey` or `KeyList` descendants) may be
 * assigned as the sole entry in a file `keys` field to ensure all transactions
 * have the same signature requirements.
 * If the `keys` field is an empty `KeyList`, then the file SHALL be immutable
 * and the only transaction permitted to modify that file SHALL be a
 * `fileUpdate` transaction with _only_ the `expirationTime` set.
 * #### Shard and Realm
 * The current API ignores shardID and realmID. All files are created in
 * shard 0 and realm 0. Future versions of the API may support multiple
 * realms and multiple shards.
 * ### Block Stream Effects
 * After the file is created, the FileID for it SHALL be returned in the
 * transaction receipt, and SHALL be recorded in the transaction record.
 *
 * Generated from protobuf message <code>proto.FileCreateTransactionBody</code>
 */
class FileCreateTransactionBody extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * An expiration timestamp.
     * <p>
     * When the network consensus time exceeds this value, the network
     * SHALL expire the file.
     *
     * Generated from protobuf field <code>.proto.Timestamp expirationTime = 2;</code>
     */
    protected $expirationTime = null;
    /**
     **
     * A list of keys that represent file "owners".
     * <p>
     * Every `Key` in this list MUST sign this `fileCreate` transaction, as
     * well as any `fileUpdate` or `fileAppend` that modifies this file.<br/>
     * At least one `Key` in this list MUST sign any `fileDelete` transaction
     * to delete this file.<br/>
     * If this `KeyList` is empty, the file SHALL be created immutable and the
     * only field that may be changed subsequently is the `expirationTime`.
     * An immutable file cannot be deleted except with a `systemDelete`
     * transaction, or by expiration.
     *
     * Generated from protobuf field <code>.proto.KeyList keys = 3;</code>
     */
    protected $keys = null;
    /**
     **
     * A byte array of file content.
     * <p>
     * The file SHALL be created with initial content equal to this field.
     *
     * Generated from protobuf field <code>bytes contents = 4;</code>
     */
    protected $contents = '';
    /**
     **
     * A shard in which this file is created
     *
     * Generated from protobuf field <code>.proto.ShardID shardID = 5;</code>
     */
    protected $shardID = null;
    /**
     **
     * A realm in which this file is created.
     * <p>
     * The shard number for this realm MUST match the value in `shardID`.<br/>
     * Currently, this MUST be `0` for both fields.<br/>
     * If the desired realm is `0.0`, this SHOULD NOT be set.
     *
     * Generated from protobuf field <code>.proto.RealmID realmID = 6;</code>
     */
    protected $realmID = null;
    /**
     **
     * The "create realm" was never enabled, and
     * should not be possible on file creation.<br/>
     * An admin key for a new realm, if one is created.
     * Added deprecated tag 2024-05.
     *
     * Generated from protobuf field <code>.proto.Key newRealmAdminKey = 7 [deprecated = true];</code>
     * @deprecated
     */
    protected $newRealmAdminKey = null;
    /**
     **
     * A short description of this file.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>string memo = 8;</code>
     */
    protected $memo = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\Timestamp $expirationTime
     *          *
     *           An expiration timestamp.
     *           <p>
     *           When the network consensus time exceeds this value, the network
     *           SHALL expire the file.
     *     @type \Proto\KeyList $keys
     *          *
     *           A list of keys that represent file "owners".
     *           <p>
     *           Every `Key` in this list MUST sign this `fileCreate` transaction, as
     *           well as any `fileUpdate` or `fileAppend` that modifies this file.<br/>
     *           At least one `Key` in this list MUST sign any `fileDelete` transaction
     *           to delete this file.<br/>
     *           If this `KeyList` is empty, the file SHALL be created immutable and the
     *           only field that may be changed subsequently is the `expirationTime`.
     *           An immutable file cannot be deleted except with a `systemDelete`
     *           transaction, or by expiration.
     *     @type string $contents
     *          *
     *           A byte array of file content.
     *           <p>
     *           The file SHALL be created with initial content equal to this field.
     *     @type \Proto\ShardID $shardID
     *          *
     *           A shard in which this file is created
     *     @type \Proto\RealmID $realmID
     *          *
     *           A realm in which this file is created.
     *           <p>
     *           The shard number for this realm MUST match the value in `shardID`.<br/>
     *           Currently, this MUST be `0` for both fields.<br/>
     *           If the desired realm is `0.0`, this SHOULD NOT be set.
     *     @type \Proto\Key $newRealmAdminKey
     *          *
     *           The "create realm" was never enabled, and
     *           should not be possible on file creation.<br/>
     *           An admin key for a new realm, if one is created.
     *           Added deprecated tag 2024-05.
     *     @type string $memo
     *          *
     *           A short description of this file.
     *           <p>
     *           This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     *           (default 100) bytes when encoded as UTF-8.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\FileCreate::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * An expiration timestamp.
     * <p>
     * When the network consensus time exceeds this value, the network
     * SHALL expire the file.
     *
     * Generated from protobuf field <code>.proto.Timestamp expirationTime = 2;</code>
     * @return \Proto\Timestamp|null
     */
    public function getExpirationTime()
    {
        return $this->expirationTime;
    }

    public function hasExpirationTime()
    {
        return isset($this->expirationTime);
    }

    public function clearExpirationTime()
    {
        unset($this->expirationTime);
    }

    /**
     **
     * An expiration timestamp.
     * <p>
     * When the network consensus time exceeds this value, the network
     * SHALL expire the file.
     *
     * Generated from protobuf field <code>.proto.Timestamp expirationTime = 2;</code>
     * @param \Proto\Timestamp $var
     * @return $this
     */
    public function setExpirationTime($var)
    {
        GPBUtil::checkMessage($var, \Proto\Timestamp::class);
        $this->expirationTime = $var;

        return $this;
    }

    /**
     **
     * A list of keys that represent file "owners".
     * <p>
     * Every `Key` in this list MUST sign this `fileCreate` transaction, as
     * well as any `fileUpdate` or `fileAppend` that modifies this file.<br/>
     * At least one `Key` in this list MUST sign any `fileDelete` transaction
     * to delete this file.<br/>
     * If this `KeyList` is empty, the file SHALL be created immutable and the
     * only field that may be changed subsequently is the `expirationTime`.
     * An immutable file cannot be deleted except with a `systemDelete`
     * transaction, or by expiration.
     *
     * Generated from protobuf field <code>.proto.KeyList keys = 3;</code>
     * @return \Proto\KeyList|null
     */
    public function getKeys()
    {
        return $this->keys;
    }

    public function hasKeys()
    {
        return isset($this->keys);
    }

    public function clearKeys()
    {
        unset($this->keys);
    }

    /**
     **
     * A list of keys that represent file "owners".
     * <p>
     * Every `Key` in this list MUST sign this `fileCreate` transaction, as
     * well as any `fileUpdate` or `fileAppend` that modifies this file.<br/>
     * At least one `Key` in this list MUST sign any `fileDelete` transaction
     * to delete this file.<br/>
     * If this `KeyList` is empty, the file SHALL be created immutable and the
     * only field that may be changed subsequently is the `expirationTime`.
     * An immutable file cannot be deleted except with a `systemDelete`
     * transaction, or by expiration.
     *
     * Generated from protobuf field <code>.proto.KeyList keys = 3;</code>
     * @param \Proto\KeyList $var
     * @return $this
     */
    public function setKeys($var)
    {
        GPBUtil::checkMessage($var, \Proto\KeyList::class);
        $this->keys = $var;

        return $this;
    }

    /**
     **
     * A byte array of file content.
     * <p>
     * The file SHALL be created with initial content equal to this field.
     *
     * Generated from protobuf field <code>bytes contents = 4;</code>
     * @return string
     */
    public function getContents()
    {
        return $this->contents;
    }

    /**
     **
     * A byte array of file content.
     * <p>
     * The file SHALL be created with initial content equal to this field.
     *
     * Generated from protobuf field <code>bytes contents = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setContents($var)
    {
        GPBUtil::checkString($var, False);
        $this->contents = $var;

        return $this;
    }

    /**
     **
     * A shard in which this file is created
     *
     * Generated from protobuf field <code>.proto.ShardID shardID = 5;</code>
     * @return \Proto\ShardID|null
     */
    public function getShardID()
    {
        return $this->shardID;
    }

    public function hasShardID()
    {
        return isset($this->shardID);
    }

    public function clearShardID()
    {
        unset($this->shardID);
    }

    /**
     **
     * A shard in which this file is created
     *
     * Generated from protobuf field <code>.proto.ShardID shardID = 5;</code>
     * @param \Proto\ShardID $var
     * @return $this
     */
    public function setShardID($var)
    {
        GPBUtil::checkMessage($var, \Proto\ShardID::class);
        $this->shardID = $var;

        return $this;
    }

    /**
     **
     * A realm in which this file is created.
     * <p>
     * The shard number for this realm MUST match the value in `shardID`.<br/>
     * Currently, this MUST be `0` for both fields.<br/>
     * If the desired realm is `0.0`, this SHOULD NOT be set.
     *
     * Generated from protobuf field <code>.proto.RealmID realmID = 6;</code>
     * @return \Proto\RealmID|null
     */
    public function getRealmID()
    {
        return $this->realmID;
    }

    public function hasRealmID()
    {
        return isset($this->realmID);
    }

    public function clearRealmID()
    {
        unset($this->realmID);
    }

    /**
     **
     * A realm in which this file is created.
     * <p>
     * The shard number for this realm MUST match the value in `shardID`.<br/>
     * Currently, this MUST be `0` for both fields.<br/>
     * If the desired realm is `0.0`, this SHOULD NOT be set.
     *
     * Generated from protobuf field <code>.proto.RealmID realmID = 6;</code>
     * @param \Proto\RealmID $var
     * @return $this
     */
    public function setRealmID($var)
    {
        GPBUtil::checkMessage($var, \Proto\RealmID::class);
        $this->realmID = $var;

        return $this;
    }

    /**
     **
     * The "create realm" was never enabled, and
     * should not be possible on file creation.<br/>
     * An admin key for a new realm, if one is created.
     * Added deprecated tag 2024-05.
     *
     * Generated from protobuf field <code>.proto.Key newRealmAdminKey = 7 [deprecated = true];</code>
     * @return \Proto\Key|null
     * @deprecated
     */
    public function getNewRealmAdminKey()
    {
        if (isset($this->newRealmAdminKey)) {
            @trigger_error('newRealmAdminKey is deprecated.', E_USER_DEPRECATED);
        }
        return $this->newRealmAdminKey;
    }

    public function hasNewRealmAdminKey()
    {
        if (isset($this->newRealmAdminKey)) {
            @trigger_error('newRealmAdminKey is deprecated.', E_USER_DEPRECATED);
        }
        return isset($this->newRealmAdminKey);
    }

    public function clearNewRealmAdminKey()
    {
        @trigger_error('newRealmAdminKey is deprecated.', E_USER_DEPRECATED);
        unset($this->newRealmAdminKey);
    }

    /**
     **
     * The "create realm" was never enabled, and
     * should not be possible on file creation.<br/>
     * An admin key for a new realm, if one is created.
     * Added deprecated tag 2024-05.
     *
     * Generated from protobuf field <code>.proto.Key newRealmAdminKey = 7 [deprecated = true];</code>
     * @param \Proto\Key $var
     * @return $this
     * @deprecated
     */
    public function setNewRealmAdminKey($var)
    {
        @trigger_error('newRealmAdminKey is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->newRealmAdminKey = $var;

        return $this;
    }

    /**
     **
     * A short description of this file.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>string memo = 8;</code>
     * @return string
     */
    public function getMemo()
    {
        return $this->memo;
    }

    /**
     **
     * A short description of this file.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>string memo = 8;</code>
     * @param string $var
     * @return $this
     */
    public function setMemo($var)
    {
        GPBUtil::checkString($var, True);
        $this->memo = $var;

        return $this;
    }

}

