<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: basic_types.proto

namespace Proto;

use UnexpectedValueException;

/**
 **
 * Possible Token Types (IWA Compatibility).
 * Apart from fungible and non-fungible, Tokens can have either a common or
 * unique representation. Furthermore, tokens can have intrinsic or referential
 * value, and can be whole and indivisible or fractional.<br/>
 * These distinction might seem subtle, but it is important when considering
 * how tokens can be traced, used, transferred, and if they can have isolated
 * unique properties.
 * A few examples (these may not match enumerations below) using IWA taxonomy.
 * <dl>
 *   <dt>fungible, whole, intrinsic, unique</dt>
 *     <dd>Physical fiat currency</dd>
 *   <dt>fungible, fractional, intrinsic, common</dt>
 *     <dd>bank balance fiat currency</dd>
 *   <dt>non-fungible, fractional, reference, unique</dt>
 *     <dd>"mutual" collectible/art/property ownership</dd>
 *   <dt>non-fungible, whole, intrinsic, unique</dt>
 *     <dd>Physical work of fine art</dd>
 *   <dt>non-fungible, whole, reference, unique</dt>
 *     <dd>Registered property title</dd>
 * </dl>
 *
 * Protobuf type <code>proto.TokenType</code>
 */
class TokenType
{
    /**
     **
     * A fungible/common token.<br/>
     * Tokens of this type are interchangeable with one another, where any
     * quantity of tokens has the same value as another equal quantity, if
     * they are in the same class. Tokens share a single set of properties,
     * and are not distinct from one another. Ownership is represented as a
     * balance or quantity associated to a given account. Tokens may be
     * divided into fractional tokens, within reasonable limits.
     * <p>
     * IWA taxonomy _fungible, fractional, intrinsic, common_
     *
     * Generated from protobuf enum <code>FUNGIBLE_COMMON = 0;</code>
     */
    const FUNGIBLE_COMMON = 0;
    /**
     **
     * A non-fungible/unique token.<br/>
     * Tokens of this type are unique, and are not interchangeable with other
     * tokens of the same type. Each token carries a serial number which is
     * unique for that token, these tokens may have a different trade value
     * for each individual token. The tokens are individually accounted and
     * often carry additional unique properties. Tokens cannot be subdivided,
     * and value is related to what the individual token represents.
     * <p>
     * IWA taxonomy _non-fungible, whole, reference, unique_
     *
     * Generated from protobuf enum <code>NON_FUNGIBLE_UNIQUE = 1;</code>
     */
    const NON_FUNGIBLE_UNIQUE = 1;

    private static $valueToName = [
        self::FUNGIBLE_COMMON => 'FUNGIBLE_COMMON',
        self::NON_FUNGIBLE_UNIQUE => 'NON_FUNGIBLE_UNIQUE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

