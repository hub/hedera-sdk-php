<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: token_create.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Create an HTS token.
 * #### Keys
 * Each token has several keys that, separately, control different functions
 * for that token. It is *_strongly_* recommended that each key assigned to
 * a token be unique, or disabled by assigning an empty `KeyList`.
 * Keys and purpose
 * - `adminKey` is a general access and may authorize a token update
 *   transaction as well as _update the other keys_. Even the admin key
 *   cannot authorize _adding_ a key that is not present, however.<br/>
 *   The admin key may also delete the token entirely.
 * - `fee_schedule` may authorize updating the token custom fees. If this
 *   key is not present, the custom fees for the token are fixed and immutable.
 * - `freeze` may authorize a token freeze or unfreeze transaction.
 *   If this key is not present, accounts holding this token cannot have
 *   their tokens frozen or unfrozen.
 * - `kyc` may authorize a token grant KYC or revoke KYC transaction.
 *   If this key is not present, accounts holding this token cannot have
 *   KYC status granted or revoked.
 * - `metadata` may authorize token update nfts transactions.
 *   If this key is not present, the token metadata values for that
 *   non-fungible/unique token _type_ will be immutable.
 * - `pause` may authorize a token pause or token unpause transaction.
 *   If this key is not present, the token cannot be paused (preventing any
 *   account from transacting in that token) or resumed.
 * - `supply` may authorize a token mint or burn transaction.
 *   If this key is not present, the token cannot mint additional supply and
 *   existing tokens cannot be "burned" from the treasury (but _might_ still be
 *   "burned" from individual accounts, c.f. `wipeKey` and `tokenWipe`).
 * - `wipe` may authorize a token wipe account transaction.
 *   If this key is not present, accounts holding this token cannot have
 *   their balance or NFTs wiped (effectively burned).
 * #### Requirements
 * If `tokenType` is fungible/common, the `initialSupply` MUST be strictly
 * greater than zero(`0`).<br/>
 * If `tokenType` is non-fungible/unique, the `initialSupply` MUST
 * be zero(`0`).<br/>
 * If `tokenSupplyType` is "infinite", the `maxSupply` MUST be zero(`0`).<br/>
 * If `tokenSupplyType` is "finite", the `maxSupply` MUST be strictly
 * greater than zero(`0`).<br/>
 * ### Block Stream Effects
 * If the token is created, the Token Identifier SHALL be in the receipt.<br/>
 *
 * Generated from protobuf message <code>proto.TokenCreateTransactionBody</code>
 */
class TokenCreateTransactionBody extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A name for the token.<br/>
     * This is generally the "full name" displayed in wallet software.
     * <p>
     * This field is REQUIRED.<br/>
     * This value MUST NOT exceed 100 bytes when encoded as UTF-8.<br/>
     * This value MUST NOT contain the Unicode NUL codepoint.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     */
    protected $name = '';
    /**
     **
     * A symbol to use for the token.
     * <p>
     * This field is REQUIRED.<br/>
     * This value MUST NOT exceed 100 bytes when encoded as UTF-8.<br/>
     * This value MUST NOT contain the Unicode NUL codepoint.
     *
     * Generated from protobuf field <code>string symbol = 2;</code>
     */
    protected $symbol = '';
    /**
     **
     * A decimal precision of the token's smallest denomination.<br/>
     * Most values are described in terms of this smallest denomination,
     * so the token initial supply, for instance, must be divided by
     * <tt>10<sup>decimals</sup></tt> to get whole tokens.
     * <p>
     * This MUST be zero(`0`) for non-fungible/unique tokens.
     *
     * Generated from protobuf field <code>uint32 decimals = 3;</code>
     */
    protected $decimals = 0;
    /**
     **
     * An initial supply, in the smallest denomination for the token.
     * <p>
     * This amount SHALL be transferred to the treasury account as part
     * of this transaction.<br/>
     * This amount MUST be specified in the smallest denomination for the
     * token (i.e. <tt>10<sup>-decimals</sup></tt> whole tokens).<br/>
     * This MUST be zero(`0`) for a non-fungible/unique token.
     *
     * Generated from protobuf field <code>uint64 initialSupply = 4;</code>
     */
    protected $initialSupply = 0;
    /**
     **
     * A treasury account identifier.
     * <p>
     * This field is REQUIRED.<br/>
     * The identified account SHALL be designated the "treasury" for the
     * new token, and all tokens "minted" SHALL be delivered to that account,
     * including the initial supply, if any.<br/>
     * The identified account MUST exist, MUST NOT be expired, and SHOULD
     * have a non-zero HBAR balance.<br/>
     * The identified account SHALL be associated to the new token.
     *
     * Generated from protobuf field <code>.proto.AccountID treasury = 5;</code>
     */
    protected $treasury = null;
    /**
     **
     * An Hedera key for token administration.
     * <p>
     * This key, if set, SHALL have administrative authority for this token and
     * MAY authorize token update and/or token delete transactions.<br/>
     * If this key is not set, or is an empty `KeyList`, this token SHALL be
     * immutable, except for expiration and renewal.
     *
     * Generated from protobuf field <code>.proto.Key adminKey = 6;</code>
     */
    protected $adminKey = null;
    /**
     **
     * An Hedera key for managing account KYC.
     * <p>
     * This key, if set, SHALL have KYC authority for this token and
     * MAY authorize transactions to grant or revoke KYC for accounts.<br/>
     * If this key is not set, or is an empty `KeyList`, KYC status for this
     * token SHALL NOT be granted or revoked for any account.<br/>
     * If this key is removed after granting KYC, those grants SHALL remain
     * and cannot be revoked.
     *
     * Generated from protobuf field <code>.proto.Key kycKey = 7;</code>
     */
    protected $kycKey = null;
    /**
     **
     * An Hedera key for managing asset "freeze".
     * <p>
     * This key, if set, SHALL have "freeze" authority for this token and
     * MAY authorize transactions to freeze or unfreeze accounts
     * with respect to this token.<br/>
     * If this key is not set, or is an empty `KeyList`, this token
     * SHALL NOT be frozen or unfrozen for any account.<br/>
     * If this key is removed after freezing accounts, those accounts
     * SHALL remain frozen and cannot be unfrozen.
     *
     * Generated from protobuf field <code>.proto.Key freezeKey = 8;</code>
     */
    protected $freezeKey = null;
    /**
     **
     * An Hedera key for wiping tokens from accounts.
     * <p>
     * This key, if set, SHALL have "wipe" authority for this token and
     * MAY authorize transactions to "wipe" any amount of this token from
     * any account, effectively burning the tokens "wiped".<br/>
     * If this key is not set, or is an empty `KeyList`, it SHALL NOT be
     * possible to "wipe" this token from an account.
     *
     * Generated from protobuf field <code>.proto.Key wipeKey = 9;</code>
     */
    protected $wipeKey = null;
    /**
     **
     * An Hedera key for "minting" and "burning" tokens.
     * <p>
     * This key, if set, MAY authorize transactions to "mint" new tokens to
     * be delivered to the token treasury or "burn" tokens held by the
     * token treasury.<br/>
     * If this key is not set, or is an empty `KeyList`, it SHALL NOT be
     * possible to change the supply of tokens and neither "mint" nor "burn"
     * transactions SHALL be permitted.
     *
     * Generated from protobuf field <code>.proto.Key supplyKey = 10;</code>
     */
    protected $supplyKey = null;
    /**
     **
     * An initial Freeze status for accounts associated to this token.
     * <p>
     * If this value is set, an account MUST be the subject of a
     * `tokenUnfreeze` transaction after associating to the token before
     * that account can send or receive this token.<br/>
     * If this value is set, the `freezeKey` SHOULD be set.<br/>
     * If the `freezeKey` is not set, any account associated to this token
     * while this value is set SHALL be permanently frozen.
     * <p>
     * <blockquote>REVIEW NOTE<blockquote>
     * Should we prevent setting this value true for tokens with no freeze
     * key?<br/>
     * Should we set this value to false if a freeze key is removed?
     * </blockquote></blockquote>
     *
     * Generated from protobuf field <code>bool freezeDefault = 11;</code>
     */
    protected $freezeDefault = false;
    /**
     **
     * An expiration timestamp.
     * <p>
     * If the `autoRenewAccount` and `autoRenewPeriod` fields are set, this
     * value SHALL be replaced with the current consensus time extended
     * by the `autoRenewPeriod` duration.<br/>
     * If this value is set and token expiration is enabled in network
     * configuration, this token SHALL expire when consensus time exceeds
     * this value, and MAY be subsequently removed from the network state.<br/>
     * If this value is not set, and the automatic renewal account is also not
     * set, then this value SHALL default to the current consensus time
     * extended by the "default" expiration period from network configuration.
     *
     * Generated from protobuf field <code>.proto.Timestamp expiry = 13;</code>
     */
    protected $expiry = null;
    /**
     **
     * An identifier for the account to be charged renewal fees at the token's
     * expiry to extend the lifetime of the token.
     * <p>
     * If this value is set, the token lifetime SHALL be extended by the
     * _smallest_ of the following:
     * <ul>
     *   <li>The current `autoRenewPeriod` duration.</li>
     *   <li>The maximum duration that this account has funds to purchase.</li>
     *   <li>The configured MAX_AUTORENEW_PERIOD at the time of automatic
     *       renewal.</li>
     * </ul>
     * If this account's HBAR balance is `0` when the token must be
     * renewed, then the token SHALL be expired, and MAY be subsequently
     * removed from state.<br/>
     * If this value is set, the referenced account MUST sign this
     * transaction.
     *
     * Generated from protobuf field <code>.proto.AccountID autoRenewAccount = 14;</code>
     */
    protected $autoRenewAccount = null;
    /**
     **
     * A duration between token automatic renewals.<br/>
     * All entities in state may be charged "rent" occasionally (typically
     * every 90 days) to prevent unnecessary growth of the ledger. This value
     * sets the interval between such events for this token.
     * <p>
     * This value MUST be set.<br/>
     * This value MUST be greater than the configured
     * MIN_AUTORENEW_PERIOD.<br/>
     * This value MUST be less than the configured MAX_AUTORENEW_PERIOD.
     *
     * Generated from protobuf field <code>.proto.Duration autoRenewPeriod = 15;</code>
     */
    protected $autoRenewPeriod = null;
    /**
     **
     * A short description for this token.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>string memo = 16;</code>
     */
    protected $memo = '';
    /**
     **
     * A type for this token, according to IWA classification.
     * <p>
     * If this value is not set, the token SHALL have the default type of
     * fungible/common.<br/>
     * This field SHALL be immutable.
     *
     * Generated from protobuf field <code>.proto.TokenType tokenType = 17;</code>
     */
    protected $tokenType = 0;
    /**
     **
     * A supply type for this token, according to IWA classification.
     * <p>
     * If this value is not set, the token SHALL have the default supply
     * type of "infinite" (which is, as a practical matter,
     * (2<sup><i>63</i></sup>-1)/10<sup><i>decimals</i></sup>).<br/>
     * This field SHALL be immutable.
     *
     * Generated from protobuf field <code>.proto.TokenSupplyType supplyType = 18;</code>
     */
    protected $supplyType = 0;
    /**
     **
     * A maximum supply for this token.
     * <p>
     * This SHALL be interpreted in terms of the smallest fractional unit for
     * this token.<br/>
     * If `supplyType` is "infinite", this MUST be `0`.<br/>
     * This field SHALL be immutable.
     *
     * Generated from protobuf field <code>int64 maxSupply = 19;</code>
     */
    protected $maxSupply = 0;
    /**
     **
     * An Hedera key for managing the token custom fee schedule.
     * <p>
     * This key, if set, MAY authorize transactions to modify the
     * `custom_fees` for this token.<br/>
     * If this key is not set, or is an empty `KeyList`, the `custom_fees`
     * for this token SHALL NOT be modified.
     *
     * Generated from protobuf field <code>.proto.Key fee_schedule_key = 20;</code>
     */
    protected $fee_schedule_key = null;
    /**
     **
     * A list of custom fees representing a fee schedule.
     * <p>
     * This list MAY be empty, which SHALL mean that there
     * are no custom fees for this token.<br/>
     * If this token is a non-fungible/unique type, the entries
     * in this list MUST NOT declare a `fractional_fee`.<br/>
     * If this token is a fungible/common type, the entries in this
     * list MUST NOT declare a `royalty_fee`.<br/>
     * Any token type MAY include entries that declare a `fixed_fee`.
     *
     * Generated from protobuf field <code>repeated .proto.CustomFee custom_fees = 21;</code>
     */
    private $custom_fees;
    /**
     **
     * An Hedera key for managing token "pause".
     * <p>
     * This key, if set, SHALL have "pause" authority for this token and
     * MAY authorize transactions to pause or unpause this token.<br/>
     * If this key is not set, or is an empty `KeyList`, this token
     * SHALL NOT be paused or unpaused.<br/>
     * If this key is removed while the token is paused, the token cannot
     * be unpaused and SHALL remain paused.
     *
     * Generated from protobuf field <code>.proto.Key pause_key = 22;</code>
     */
    protected $pause_key = null;
    /**
     **
     * Token "Metadata".
     * <p>
     * The value, if set, MUST NOT exceed 100 bytes.<br/>
     * <dl><dt>Examples</dt>
     *   <dd>hcs://1/0.0.4896575</dd>
     *   <dd>ipfs://bafkreifd7tcjjuwxxf4qkaibkj62pj4mhfuud7plwrc3pfoygt55al6syi</dd>
     * </dl>
     *
     * Generated from protobuf field <code>bytes metadata = 23;</code>
     */
    protected $metadata = '';
    /**
     **
     * An Hedera key for managing the token `metadata`.
     * <p>
     * This key, if set, MAY authorize transactions to modify the
     * `metadata` for this token.<br/>
     * If this key is not set, or is an empty `KeyList`, the `metadata`
     * for this token SHALL NOT be modified.
     *
     * Generated from protobuf field <code>.proto.Key metadata_key = 24;</code>
     */
    protected $metadata_key = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *          *
     *           A name for the token.<br/>
     *           This is generally the "full name" displayed in wallet software.
     *           <p>
     *           This field is REQUIRED.<br/>
     *           This value MUST NOT exceed 100 bytes when encoded as UTF-8.<br/>
     *           This value MUST NOT contain the Unicode NUL codepoint.
     *     @type string $symbol
     *          *
     *           A symbol to use for the token.
     *           <p>
     *           This field is REQUIRED.<br/>
     *           This value MUST NOT exceed 100 bytes when encoded as UTF-8.<br/>
     *           This value MUST NOT contain the Unicode NUL codepoint.
     *     @type int $decimals
     *          *
     *           A decimal precision of the token's smallest denomination.<br/>
     *           Most values are described in terms of this smallest denomination,
     *           so the token initial supply, for instance, must be divided by
     *           <tt>10<sup>decimals</sup></tt> to get whole tokens.
     *           <p>
     *           This MUST be zero(`0`) for non-fungible/unique tokens.
     *     @type int|string $initialSupply
     *          *
     *           An initial supply, in the smallest denomination for the token.
     *           <p>
     *           This amount SHALL be transferred to the treasury account as part
     *           of this transaction.<br/>
     *           This amount MUST be specified in the smallest denomination for the
     *           token (i.e. <tt>10<sup>-decimals</sup></tt> whole tokens).<br/>
     *           This MUST be zero(`0`) for a non-fungible/unique token.
     *     @type \Proto\AccountID $treasury
     *          *
     *           A treasury account identifier.
     *           <p>
     *           This field is REQUIRED.<br/>
     *           The identified account SHALL be designated the "treasury" for the
     *           new token, and all tokens "minted" SHALL be delivered to that account,
     *           including the initial supply, if any.<br/>
     *           The identified account MUST exist, MUST NOT be expired, and SHOULD
     *           have a non-zero HBAR balance.<br/>
     *           The identified account SHALL be associated to the new token.
     *     @type \Proto\Key $adminKey
     *          *
     *           An Hedera key for token administration.
     *           <p>
     *           This key, if set, SHALL have administrative authority for this token and
     *           MAY authorize token update and/or token delete transactions.<br/>
     *           If this key is not set, or is an empty `KeyList`, this token SHALL be
     *           immutable, except for expiration and renewal.
     *     @type \Proto\Key $kycKey
     *          *
     *           An Hedera key for managing account KYC.
     *           <p>
     *           This key, if set, SHALL have KYC authority for this token and
     *           MAY authorize transactions to grant or revoke KYC for accounts.<br/>
     *           If this key is not set, or is an empty `KeyList`, KYC status for this
     *           token SHALL NOT be granted or revoked for any account.<br/>
     *           If this key is removed after granting KYC, those grants SHALL remain
     *           and cannot be revoked.
     *     @type \Proto\Key $freezeKey
     *          *
     *           An Hedera key for managing asset "freeze".
     *           <p>
     *           This key, if set, SHALL have "freeze" authority for this token and
     *           MAY authorize transactions to freeze or unfreeze accounts
     *           with respect to this token.<br/>
     *           If this key is not set, or is an empty `KeyList`, this token
     *           SHALL NOT be frozen or unfrozen for any account.<br/>
     *           If this key is removed after freezing accounts, those accounts
     *           SHALL remain frozen and cannot be unfrozen.
     *     @type \Proto\Key $wipeKey
     *          *
     *           An Hedera key for wiping tokens from accounts.
     *           <p>
     *           This key, if set, SHALL have "wipe" authority for this token and
     *           MAY authorize transactions to "wipe" any amount of this token from
     *           any account, effectively burning the tokens "wiped".<br/>
     *           If this key is not set, or is an empty `KeyList`, it SHALL NOT be
     *           possible to "wipe" this token from an account.
     *     @type \Proto\Key $supplyKey
     *          *
     *           An Hedera key for "minting" and "burning" tokens.
     *           <p>
     *           This key, if set, MAY authorize transactions to "mint" new tokens to
     *           be delivered to the token treasury or "burn" tokens held by the
     *           token treasury.<br/>
     *           If this key is not set, or is an empty `KeyList`, it SHALL NOT be
     *           possible to change the supply of tokens and neither "mint" nor "burn"
     *           transactions SHALL be permitted.
     *     @type bool $freezeDefault
     *          *
     *           An initial Freeze status for accounts associated to this token.
     *           <p>
     *           If this value is set, an account MUST be the subject of a
     *           `tokenUnfreeze` transaction after associating to the token before
     *           that account can send or receive this token.<br/>
     *           If this value is set, the `freezeKey` SHOULD be set.<br/>
     *           If the `freezeKey` is not set, any account associated to this token
     *           while this value is set SHALL be permanently frozen.
     *           <p>
     *           <blockquote>REVIEW NOTE<blockquote>
     *           Should we prevent setting this value true for tokens with no freeze
     *           key?<br/>
     *           Should we set this value to false if a freeze key is removed?
     *           </blockquote></blockquote>
     *     @type \Proto\Timestamp $expiry
     *          *
     *           An expiration timestamp.
     *           <p>
     *           If the `autoRenewAccount` and `autoRenewPeriod` fields are set, this
     *           value SHALL be replaced with the current consensus time extended
     *           by the `autoRenewPeriod` duration.<br/>
     *           If this value is set and token expiration is enabled in network
     *           configuration, this token SHALL expire when consensus time exceeds
     *           this value, and MAY be subsequently removed from the network state.<br/>
     *           If this value is not set, and the automatic renewal account is also not
     *           set, then this value SHALL default to the current consensus time
     *           extended by the "default" expiration period from network configuration.
     *     @type \Proto\AccountID $autoRenewAccount
     *          *
     *           An identifier for the account to be charged renewal fees at the token's
     *           expiry to extend the lifetime of the token.
     *           <p>
     *           If this value is set, the token lifetime SHALL be extended by the
     *           _smallest_ of the following:
     *           <ul>
     *             <li>The current `autoRenewPeriod` duration.</li>
     *             <li>The maximum duration that this account has funds to purchase.</li>
     *             <li>The configured MAX_AUTORENEW_PERIOD at the time of automatic
     *                 renewal.</li>
     *           </ul>
     *           If this account's HBAR balance is `0` when the token must be
     *           renewed, then the token SHALL be expired, and MAY be subsequently
     *           removed from state.<br/>
     *           If this value is set, the referenced account MUST sign this
     *           transaction.
     *     @type \Proto\Duration $autoRenewPeriod
     *          *
     *           A duration between token automatic renewals.<br/>
     *           All entities in state may be charged "rent" occasionally (typically
     *           every 90 days) to prevent unnecessary growth of the ledger. This value
     *           sets the interval between such events for this token.
     *           <p>
     *           This value MUST be set.<br/>
     *           This value MUST be greater than the configured
     *           MIN_AUTORENEW_PERIOD.<br/>
     *           This value MUST be less than the configured MAX_AUTORENEW_PERIOD.
     *     @type string $memo
     *          *
     *           A short description for this token.
     *           <p>
     *           This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     *           (default 100) bytes when encoded as UTF-8.
     *     @type int $tokenType
     *          *
     *           A type for this token, according to IWA classification.
     *           <p>
     *           If this value is not set, the token SHALL have the default type of
     *           fungible/common.<br/>
     *           This field SHALL be immutable.
     *     @type int $supplyType
     *          *
     *           A supply type for this token, according to IWA classification.
     *           <p>
     *           If this value is not set, the token SHALL have the default supply
     *           type of "infinite" (which is, as a practical matter,
     *           (2<sup><i>63</i></sup>-1)/10<sup><i>decimals</i></sup>).<br/>
     *           This field SHALL be immutable.
     *     @type int|string $maxSupply
     *          *
     *           A maximum supply for this token.
     *           <p>
     *           This SHALL be interpreted in terms of the smallest fractional unit for
     *           this token.<br/>
     *           If `supplyType` is "infinite", this MUST be `0`.<br/>
     *           This field SHALL be immutable.
     *     @type \Proto\Key $fee_schedule_key
     *          *
     *           An Hedera key for managing the token custom fee schedule.
     *           <p>
     *           This key, if set, MAY authorize transactions to modify the
     *           `custom_fees` for this token.<br/>
     *           If this key is not set, or is an empty `KeyList`, the `custom_fees`
     *           for this token SHALL NOT be modified.
     *     @type \Proto\CustomFee[] $custom_fees
     *          *
     *           A list of custom fees representing a fee schedule.
     *           <p>
     *           This list MAY be empty, which SHALL mean that there
     *           are no custom fees for this token.<br/>
     *           If this token is a non-fungible/unique type, the entries
     *           in this list MUST NOT declare a `fractional_fee`.<br/>
     *           If this token is a fungible/common type, the entries in this
     *           list MUST NOT declare a `royalty_fee`.<br/>
     *           Any token type MAY include entries that declare a `fixed_fee`.
     *     @type \Proto\Key $pause_key
     *          *
     *           An Hedera key for managing token "pause".
     *           <p>
     *           This key, if set, SHALL have "pause" authority for this token and
     *           MAY authorize transactions to pause or unpause this token.<br/>
     *           If this key is not set, or is an empty `KeyList`, this token
     *           SHALL NOT be paused or unpaused.<br/>
     *           If this key is removed while the token is paused, the token cannot
     *           be unpaused and SHALL remain paused.
     *     @type string $metadata
     *          *
     *           Token "Metadata".
     *           <p>
     *           The value, if set, MUST NOT exceed 100 bytes.<br/>
     *           <dl><dt>Examples</dt>
     *             <dd>hcs://1/0.0.4896575</dd>
     *             <dd>ipfs://bafkreifd7tcjjuwxxf4qkaibkj62pj4mhfuud7plwrc3pfoygt55al6syi</dd>
     *           </dl>
     *     @type \Proto\Key $metadata_key
     *          *
     *           An Hedera key for managing the token `metadata`.
     *           <p>
     *           This key, if set, MAY authorize transactions to modify the
     *           `metadata` for this token.<br/>
     *           If this key is not set, or is an empty `KeyList`, the `metadata`
     *           for this token SHALL NOT be modified.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\TokenCreate::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A name for the token.<br/>
     * This is generally the "full name" displayed in wallet software.
     * <p>
     * This field is REQUIRED.<br/>
     * This value MUST NOT exceed 100 bytes when encoded as UTF-8.<br/>
     * This value MUST NOT contain the Unicode NUL codepoint.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     **
     * A name for the token.<br/>
     * This is generally the "full name" displayed in wallet software.
     * <p>
     * This field is REQUIRED.<br/>
     * This value MUST NOT exceed 100 bytes when encoded as UTF-8.<br/>
     * This value MUST NOT contain the Unicode NUL codepoint.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     **
     * A symbol to use for the token.
     * <p>
     * This field is REQUIRED.<br/>
     * This value MUST NOT exceed 100 bytes when encoded as UTF-8.<br/>
     * This value MUST NOT contain the Unicode NUL codepoint.
     *
     * Generated from protobuf field <code>string symbol = 2;</code>
     * @return string
     */
    public function getSymbol()
    {
        return $this->symbol;
    }

    /**
     **
     * A symbol to use for the token.
     * <p>
     * This field is REQUIRED.<br/>
     * This value MUST NOT exceed 100 bytes when encoded as UTF-8.<br/>
     * This value MUST NOT contain the Unicode NUL codepoint.
     *
     * Generated from protobuf field <code>string symbol = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setSymbol($var)
    {
        GPBUtil::checkString($var, True);
        $this->symbol = $var;

        return $this;
    }

    /**
     **
     * A decimal precision of the token's smallest denomination.<br/>
     * Most values are described in terms of this smallest denomination,
     * so the token initial supply, for instance, must be divided by
     * <tt>10<sup>decimals</sup></tt> to get whole tokens.
     * <p>
     * This MUST be zero(`0`) for non-fungible/unique tokens.
     *
     * Generated from protobuf field <code>uint32 decimals = 3;</code>
     * @return int
     */
    public function getDecimals()
    {
        return $this->decimals;
    }

    /**
     **
     * A decimal precision of the token's smallest denomination.<br/>
     * Most values are described in terms of this smallest denomination,
     * so the token initial supply, for instance, must be divided by
     * <tt>10<sup>decimals</sup></tt> to get whole tokens.
     * <p>
     * This MUST be zero(`0`) for non-fungible/unique tokens.
     *
     * Generated from protobuf field <code>uint32 decimals = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setDecimals($var)
    {
        GPBUtil::checkUint32($var);
        $this->decimals = $var;

        return $this;
    }

    /**
     **
     * An initial supply, in the smallest denomination for the token.
     * <p>
     * This amount SHALL be transferred to the treasury account as part
     * of this transaction.<br/>
     * This amount MUST be specified in the smallest denomination for the
     * token (i.e. <tt>10<sup>-decimals</sup></tt> whole tokens).<br/>
     * This MUST be zero(`0`) for a non-fungible/unique token.
     *
     * Generated from protobuf field <code>uint64 initialSupply = 4;</code>
     * @return int|string
     */
    public function getInitialSupply()
    {
        return $this->initialSupply;
    }

    /**
     **
     * An initial supply, in the smallest denomination for the token.
     * <p>
     * This amount SHALL be transferred to the treasury account as part
     * of this transaction.<br/>
     * This amount MUST be specified in the smallest denomination for the
     * token (i.e. <tt>10<sup>-decimals</sup></tt> whole tokens).<br/>
     * This MUST be zero(`0`) for a non-fungible/unique token.
     *
     * Generated from protobuf field <code>uint64 initialSupply = 4;</code>
     * @param int|string $var
     * @return $this
     */
    public function setInitialSupply($var)
    {
        GPBUtil::checkUint64($var);
        $this->initialSupply = $var;

        return $this;
    }

    /**
     **
     * A treasury account identifier.
     * <p>
     * This field is REQUIRED.<br/>
     * The identified account SHALL be designated the "treasury" for the
     * new token, and all tokens "minted" SHALL be delivered to that account,
     * including the initial supply, if any.<br/>
     * The identified account MUST exist, MUST NOT be expired, and SHOULD
     * have a non-zero HBAR balance.<br/>
     * The identified account SHALL be associated to the new token.
     *
     * Generated from protobuf field <code>.proto.AccountID treasury = 5;</code>
     * @return \Proto\AccountID|null
     */
    public function getTreasury()
    {
        return $this->treasury;
    }

    public function hasTreasury()
    {
        return isset($this->treasury);
    }

    public function clearTreasury()
    {
        unset($this->treasury);
    }

    /**
     **
     * A treasury account identifier.
     * <p>
     * This field is REQUIRED.<br/>
     * The identified account SHALL be designated the "treasury" for the
     * new token, and all tokens "minted" SHALL be delivered to that account,
     * including the initial supply, if any.<br/>
     * The identified account MUST exist, MUST NOT be expired, and SHOULD
     * have a non-zero HBAR balance.<br/>
     * The identified account SHALL be associated to the new token.
     *
     * Generated from protobuf field <code>.proto.AccountID treasury = 5;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setTreasury($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->treasury = $var;

        return $this;
    }

    /**
     **
     * An Hedera key for token administration.
     * <p>
     * This key, if set, SHALL have administrative authority for this token and
     * MAY authorize token update and/or token delete transactions.<br/>
     * If this key is not set, or is an empty `KeyList`, this token SHALL be
     * immutable, except for expiration and renewal.
     *
     * Generated from protobuf field <code>.proto.Key adminKey = 6;</code>
     * @return \Proto\Key|null
     */
    public function getAdminKey()
    {
        return $this->adminKey;
    }

    public function hasAdminKey()
    {
        return isset($this->adminKey);
    }

    public function clearAdminKey()
    {
        unset($this->adminKey);
    }

    /**
     **
     * An Hedera key for token administration.
     * <p>
     * This key, if set, SHALL have administrative authority for this token and
     * MAY authorize token update and/or token delete transactions.<br/>
     * If this key is not set, or is an empty `KeyList`, this token SHALL be
     * immutable, except for expiration and renewal.
     *
     * Generated from protobuf field <code>.proto.Key adminKey = 6;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setAdminKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->adminKey = $var;

        return $this;
    }

    /**
     **
     * An Hedera key for managing account KYC.
     * <p>
     * This key, if set, SHALL have KYC authority for this token and
     * MAY authorize transactions to grant or revoke KYC for accounts.<br/>
     * If this key is not set, or is an empty `KeyList`, KYC status for this
     * token SHALL NOT be granted or revoked for any account.<br/>
     * If this key is removed after granting KYC, those grants SHALL remain
     * and cannot be revoked.
     *
     * Generated from protobuf field <code>.proto.Key kycKey = 7;</code>
     * @return \Proto\Key|null
     */
    public function getKycKey()
    {
        return $this->kycKey;
    }

    public function hasKycKey()
    {
        return isset($this->kycKey);
    }

    public function clearKycKey()
    {
        unset($this->kycKey);
    }

    /**
     **
     * An Hedera key for managing account KYC.
     * <p>
     * This key, if set, SHALL have KYC authority for this token and
     * MAY authorize transactions to grant or revoke KYC for accounts.<br/>
     * If this key is not set, or is an empty `KeyList`, KYC status for this
     * token SHALL NOT be granted or revoked for any account.<br/>
     * If this key is removed after granting KYC, those grants SHALL remain
     * and cannot be revoked.
     *
     * Generated from protobuf field <code>.proto.Key kycKey = 7;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setKycKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->kycKey = $var;

        return $this;
    }

    /**
     **
     * An Hedera key for managing asset "freeze".
     * <p>
     * This key, if set, SHALL have "freeze" authority for this token and
     * MAY authorize transactions to freeze or unfreeze accounts
     * with respect to this token.<br/>
     * If this key is not set, or is an empty `KeyList`, this token
     * SHALL NOT be frozen or unfrozen for any account.<br/>
     * If this key is removed after freezing accounts, those accounts
     * SHALL remain frozen and cannot be unfrozen.
     *
     * Generated from protobuf field <code>.proto.Key freezeKey = 8;</code>
     * @return \Proto\Key|null
     */
    public function getFreezeKey()
    {
        return $this->freezeKey;
    }

    public function hasFreezeKey()
    {
        return isset($this->freezeKey);
    }

    public function clearFreezeKey()
    {
        unset($this->freezeKey);
    }

    /**
     **
     * An Hedera key for managing asset "freeze".
     * <p>
     * This key, if set, SHALL have "freeze" authority for this token and
     * MAY authorize transactions to freeze or unfreeze accounts
     * with respect to this token.<br/>
     * If this key is not set, or is an empty `KeyList`, this token
     * SHALL NOT be frozen or unfrozen for any account.<br/>
     * If this key is removed after freezing accounts, those accounts
     * SHALL remain frozen and cannot be unfrozen.
     *
     * Generated from protobuf field <code>.proto.Key freezeKey = 8;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setFreezeKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->freezeKey = $var;

        return $this;
    }

    /**
     **
     * An Hedera key for wiping tokens from accounts.
     * <p>
     * This key, if set, SHALL have "wipe" authority for this token and
     * MAY authorize transactions to "wipe" any amount of this token from
     * any account, effectively burning the tokens "wiped".<br/>
     * If this key is not set, or is an empty `KeyList`, it SHALL NOT be
     * possible to "wipe" this token from an account.
     *
     * Generated from protobuf field <code>.proto.Key wipeKey = 9;</code>
     * @return \Proto\Key|null
     */
    public function getWipeKey()
    {
        return $this->wipeKey;
    }

    public function hasWipeKey()
    {
        return isset($this->wipeKey);
    }

    public function clearWipeKey()
    {
        unset($this->wipeKey);
    }

    /**
     **
     * An Hedera key for wiping tokens from accounts.
     * <p>
     * This key, if set, SHALL have "wipe" authority for this token and
     * MAY authorize transactions to "wipe" any amount of this token from
     * any account, effectively burning the tokens "wiped".<br/>
     * If this key is not set, or is an empty `KeyList`, it SHALL NOT be
     * possible to "wipe" this token from an account.
     *
     * Generated from protobuf field <code>.proto.Key wipeKey = 9;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setWipeKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->wipeKey = $var;

        return $this;
    }

    /**
     **
     * An Hedera key for "minting" and "burning" tokens.
     * <p>
     * This key, if set, MAY authorize transactions to "mint" new tokens to
     * be delivered to the token treasury or "burn" tokens held by the
     * token treasury.<br/>
     * If this key is not set, or is an empty `KeyList`, it SHALL NOT be
     * possible to change the supply of tokens and neither "mint" nor "burn"
     * transactions SHALL be permitted.
     *
     * Generated from protobuf field <code>.proto.Key supplyKey = 10;</code>
     * @return \Proto\Key|null
     */
    public function getSupplyKey()
    {
        return $this->supplyKey;
    }

    public function hasSupplyKey()
    {
        return isset($this->supplyKey);
    }

    public function clearSupplyKey()
    {
        unset($this->supplyKey);
    }

    /**
     **
     * An Hedera key for "minting" and "burning" tokens.
     * <p>
     * This key, if set, MAY authorize transactions to "mint" new tokens to
     * be delivered to the token treasury or "burn" tokens held by the
     * token treasury.<br/>
     * If this key is not set, or is an empty `KeyList`, it SHALL NOT be
     * possible to change the supply of tokens and neither "mint" nor "burn"
     * transactions SHALL be permitted.
     *
     * Generated from protobuf field <code>.proto.Key supplyKey = 10;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setSupplyKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->supplyKey = $var;

        return $this;
    }

    /**
     **
     * An initial Freeze status for accounts associated to this token.
     * <p>
     * If this value is set, an account MUST be the subject of a
     * `tokenUnfreeze` transaction after associating to the token before
     * that account can send or receive this token.<br/>
     * If this value is set, the `freezeKey` SHOULD be set.<br/>
     * If the `freezeKey` is not set, any account associated to this token
     * while this value is set SHALL be permanently frozen.
     * <p>
     * <blockquote>REVIEW NOTE<blockquote>
     * Should we prevent setting this value true for tokens with no freeze
     * key?<br/>
     * Should we set this value to false if a freeze key is removed?
     * </blockquote></blockquote>
     *
     * Generated from protobuf field <code>bool freezeDefault = 11;</code>
     * @return bool
     */
    public function getFreezeDefault()
    {
        return $this->freezeDefault;
    }

    /**
     **
     * An initial Freeze status for accounts associated to this token.
     * <p>
     * If this value is set, an account MUST be the subject of a
     * `tokenUnfreeze` transaction after associating to the token before
     * that account can send or receive this token.<br/>
     * If this value is set, the `freezeKey` SHOULD be set.<br/>
     * If the `freezeKey` is not set, any account associated to this token
     * while this value is set SHALL be permanently frozen.
     * <p>
     * <blockquote>REVIEW NOTE<blockquote>
     * Should we prevent setting this value true for tokens with no freeze
     * key?<br/>
     * Should we set this value to false if a freeze key is removed?
     * </blockquote></blockquote>
     *
     * Generated from protobuf field <code>bool freezeDefault = 11;</code>
     * @param bool $var
     * @return $this
     */
    public function setFreezeDefault($var)
    {
        GPBUtil::checkBool($var);
        $this->freezeDefault = $var;

        return $this;
    }

    /**
     **
     * An expiration timestamp.
     * <p>
     * If the `autoRenewAccount` and `autoRenewPeriod` fields are set, this
     * value SHALL be replaced with the current consensus time extended
     * by the `autoRenewPeriod` duration.<br/>
     * If this value is set and token expiration is enabled in network
     * configuration, this token SHALL expire when consensus time exceeds
     * this value, and MAY be subsequently removed from the network state.<br/>
     * If this value is not set, and the automatic renewal account is also not
     * set, then this value SHALL default to the current consensus time
     * extended by the "default" expiration period from network configuration.
     *
     * Generated from protobuf field <code>.proto.Timestamp expiry = 13;</code>
     * @return \Proto\Timestamp|null
     */
    public function getExpiry()
    {
        return $this->expiry;
    }

    public function hasExpiry()
    {
        return isset($this->expiry);
    }

    public function clearExpiry()
    {
        unset($this->expiry);
    }

    /**
     **
     * An expiration timestamp.
     * <p>
     * If the `autoRenewAccount` and `autoRenewPeriod` fields are set, this
     * value SHALL be replaced with the current consensus time extended
     * by the `autoRenewPeriod` duration.<br/>
     * If this value is set and token expiration is enabled in network
     * configuration, this token SHALL expire when consensus time exceeds
     * this value, and MAY be subsequently removed from the network state.<br/>
     * If this value is not set, and the automatic renewal account is also not
     * set, then this value SHALL default to the current consensus time
     * extended by the "default" expiration period from network configuration.
     *
     * Generated from protobuf field <code>.proto.Timestamp expiry = 13;</code>
     * @param \Proto\Timestamp $var
     * @return $this
     */
    public function setExpiry($var)
    {
        GPBUtil::checkMessage($var, \Proto\Timestamp::class);
        $this->expiry = $var;

        return $this;
    }

    /**
     **
     * An identifier for the account to be charged renewal fees at the token's
     * expiry to extend the lifetime of the token.
     * <p>
     * If this value is set, the token lifetime SHALL be extended by the
     * _smallest_ of the following:
     * <ul>
     *   <li>The current `autoRenewPeriod` duration.</li>
     *   <li>The maximum duration that this account has funds to purchase.</li>
     *   <li>The configured MAX_AUTORENEW_PERIOD at the time of automatic
     *       renewal.</li>
     * </ul>
     * If this account's HBAR balance is `0` when the token must be
     * renewed, then the token SHALL be expired, and MAY be subsequently
     * removed from state.<br/>
     * If this value is set, the referenced account MUST sign this
     * transaction.
     *
     * Generated from protobuf field <code>.proto.AccountID autoRenewAccount = 14;</code>
     * @return \Proto\AccountID|null
     */
    public function getAutoRenewAccount()
    {
        return $this->autoRenewAccount;
    }

    public function hasAutoRenewAccount()
    {
        return isset($this->autoRenewAccount);
    }

    public function clearAutoRenewAccount()
    {
        unset($this->autoRenewAccount);
    }

    /**
     **
     * An identifier for the account to be charged renewal fees at the token's
     * expiry to extend the lifetime of the token.
     * <p>
     * If this value is set, the token lifetime SHALL be extended by the
     * _smallest_ of the following:
     * <ul>
     *   <li>The current `autoRenewPeriod` duration.</li>
     *   <li>The maximum duration that this account has funds to purchase.</li>
     *   <li>The configured MAX_AUTORENEW_PERIOD at the time of automatic
     *       renewal.</li>
     * </ul>
     * If this account's HBAR balance is `0` when the token must be
     * renewed, then the token SHALL be expired, and MAY be subsequently
     * removed from state.<br/>
     * If this value is set, the referenced account MUST sign this
     * transaction.
     *
     * Generated from protobuf field <code>.proto.AccountID autoRenewAccount = 14;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setAutoRenewAccount($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->autoRenewAccount = $var;

        return $this;
    }

    /**
     **
     * A duration between token automatic renewals.<br/>
     * All entities in state may be charged "rent" occasionally (typically
     * every 90 days) to prevent unnecessary growth of the ledger. This value
     * sets the interval between such events for this token.
     * <p>
     * This value MUST be set.<br/>
     * This value MUST be greater than the configured
     * MIN_AUTORENEW_PERIOD.<br/>
     * This value MUST be less than the configured MAX_AUTORENEW_PERIOD.
     *
     * Generated from protobuf field <code>.proto.Duration autoRenewPeriod = 15;</code>
     * @return \Proto\Duration|null
     */
    public function getAutoRenewPeriod()
    {
        return $this->autoRenewPeriod;
    }

    public function hasAutoRenewPeriod()
    {
        return isset($this->autoRenewPeriod);
    }

    public function clearAutoRenewPeriod()
    {
        unset($this->autoRenewPeriod);
    }

    /**
     **
     * A duration between token automatic renewals.<br/>
     * All entities in state may be charged "rent" occasionally (typically
     * every 90 days) to prevent unnecessary growth of the ledger. This value
     * sets the interval between such events for this token.
     * <p>
     * This value MUST be set.<br/>
     * This value MUST be greater than the configured
     * MIN_AUTORENEW_PERIOD.<br/>
     * This value MUST be less than the configured MAX_AUTORENEW_PERIOD.
     *
     * Generated from protobuf field <code>.proto.Duration autoRenewPeriod = 15;</code>
     * @param \Proto\Duration $var
     * @return $this
     */
    public function setAutoRenewPeriod($var)
    {
        GPBUtil::checkMessage($var, \Proto\Duration::class);
        $this->autoRenewPeriod = $var;

        return $this;
    }

    /**
     **
     * A short description for this token.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>string memo = 16;</code>
     * @return string
     */
    public function getMemo()
    {
        return $this->memo;
    }

    /**
     **
     * A short description for this token.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>string memo = 16;</code>
     * @param string $var
     * @return $this
     */
    public function setMemo($var)
    {
        GPBUtil::checkString($var, True);
        $this->memo = $var;

        return $this;
    }

    /**
     **
     * A type for this token, according to IWA classification.
     * <p>
     * If this value is not set, the token SHALL have the default type of
     * fungible/common.<br/>
     * This field SHALL be immutable.
     *
     * Generated from protobuf field <code>.proto.TokenType tokenType = 17;</code>
     * @return int
     */
    public function getTokenType()
    {
        return $this->tokenType;
    }

    /**
     **
     * A type for this token, according to IWA classification.
     * <p>
     * If this value is not set, the token SHALL have the default type of
     * fungible/common.<br/>
     * This field SHALL be immutable.
     *
     * Generated from protobuf field <code>.proto.TokenType tokenType = 17;</code>
     * @param int $var
     * @return $this
     */
    public function setTokenType($var)
    {
        GPBUtil::checkEnum($var, \Proto\TokenType::class);
        $this->tokenType = $var;

        return $this;
    }

    /**
     **
     * A supply type for this token, according to IWA classification.
     * <p>
     * If this value is not set, the token SHALL have the default supply
     * type of "infinite" (which is, as a practical matter,
     * (2<sup><i>63</i></sup>-1)/10<sup><i>decimals</i></sup>).<br/>
     * This field SHALL be immutable.
     *
     * Generated from protobuf field <code>.proto.TokenSupplyType supplyType = 18;</code>
     * @return int
     */
    public function getSupplyType()
    {
        return $this->supplyType;
    }

    /**
     **
     * A supply type for this token, according to IWA classification.
     * <p>
     * If this value is not set, the token SHALL have the default supply
     * type of "infinite" (which is, as a practical matter,
     * (2<sup><i>63</i></sup>-1)/10<sup><i>decimals</i></sup>).<br/>
     * This field SHALL be immutable.
     *
     * Generated from protobuf field <code>.proto.TokenSupplyType supplyType = 18;</code>
     * @param int $var
     * @return $this
     */
    public function setSupplyType($var)
    {
        GPBUtil::checkEnum($var, \Proto\TokenSupplyType::class);
        $this->supplyType = $var;

        return $this;
    }

    /**
     **
     * A maximum supply for this token.
     * <p>
     * This SHALL be interpreted in terms of the smallest fractional unit for
     * this token.<br/>
     * If `supplyType` is "infinite", this MUST be `0`.<br/>
     * This field SHALL be immutable.
     *
     * Generated from protobuf field <code>int64 maxSupply = 19;</code>
     * @return int|string
     */
    public function getMaxSupply()
    {
        return $this->maxSupply;
    }

    /**
     **
     * A maximum supply for this token.
     * <p>
     * This SHALL be interpreted in terms of the smallest fractional unit for
     * this token.<br/>
     * If `supplyType` is "infinite", this MUST be `0`.<br/>
     * This field SHALL be immutable.
     *
     * Generated from protobuf field <code>int64 maxSupply = 19;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMaxSupply($var)
    {
        GPBUtil::checkInt64($var);
        $this->maxSupply = $var;

        return $this;
    }

    /**
     **
     * An Hedera key for managing the token custom fee schedule.
     * <p>
     * This key, if set, MAY authorize transactions to modify the
     * `custom_fees` for this token.<br/>
     * If this key is not set, or is an empty `KeyList`, the `custom_fees`
     * for this token SHALL NOT be modified.
     *
     * Generated from protobuf field <code>.proto.Key fee_schedule_key = 20;</code>
     * @return \Proto\Key|null
     */
    public function getFeeScheduleKey()
    {
        return $this->fee_schedule_key;
    }

    public function hasFeeScheduleKey()
    {
        return isset($this->fee_schedule_key);
    }

    public function clearFeeScheduleKey()
    {
        unset($this->fee_schedule_key);
    }

    /**
     **
     * An Hedera key for managing the token custom fee schedule.
     * <p>
     * This key, if set, MAY authorize transactions to modify the
     * `custom_fees` for this token.<br/>
     * If this key is not set, or is an empty `KeyList`, the `custom_fees`
     * for this token SHALL NOT be modified.
     *
     * Generated from protobuf field <code>.proto.Key fee_schedule_key = 20;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setFeeScheduleKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->fee_schedule_key = $var;

        return $this;
    }

    /**
     **
     * A list of custom fees representing a fee schedule.
     * <p>
     * This list MAY be empty, which SHALL mean that there
     * are no custom fees for this token.<br/>
     * If this token is a non-fungible/unique type, the entries
     * in this list MUST NOT declare a `fractional_fee`.<br/>
     * If this token is a fungible/common type, the entries in this
     * list MUST NOT declare a `royalty_fee`.<br/>
     * Any token type MAY include entries that declare a `fixed_fee`.
     *
     * Generated from protobuf field <code>repeated .proto.CustomFee custom_fees = 21;</code>
     * @return RepeatedField<\Proto\CustomFee>
     */
    public function getCustomFees()
    {
        return $this->custom_fees;
    }

    /**
     **
     * A list of custom fees representing a fee schedule.
     * <p>
     * This list MAY be empty, which SHALL mean that there
     * are no custom fees for this token.<br/>
     * If this token is a non-fungible/unique type, the entries
     * in this list MUST NOT declare a `fractional_fee`.<br/>
     * If this token is a fungible/common type, the entries in this
     * list MUST NOT declare a `royalty_fee`.<br/>
     * Any token type MAY include entries that declare a `fixed_fee`.
     *
     * Generated from protobuf field <code>repeated .proto.CustomFee custom_fees = 21;</code>
     * @param \Proto\CustomFee[] $var
     * @return $this
     */
    public function setCustomFees($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Proto\CustomFee::class);
        $this->custom_fees = $arr;

        return $this;
    }

    /**
     **
     * An Hedera key for managing token "pause".
     * <p>
     * This key, if set, SHALL have "pause" authority for this token and
     * MAY authorize transactions to pause or unpause this token.<br/>
     * If this key is not set, or is an empty `KeyList`, this token
     * SHALL NOT be paused or unpaused.<br/>
     * If this key is removed while the token is paused, the token cannot
     * be unpaused and SHALL remain paused.
     *
     * Generated from protobuf field <code>.proto.Key pause_key = 22;</code>
     * @return \Proto\Key|null
     */
    public function getPauseKey()
    {
        return $this->pause_key;
    }

    public function hasPauseKey()
    {
        return isset($this->pause_key);
    }

    public function clearPauseKey()
    {
        unset($this->pause_key);
    }

    /**
     **
     * An Hedera key for managing token "pause".
     * <p>
     * This key, if set, SHALL have "pause" authority for this token and
     * MAY authorize transactions to pause or unpause this token.<br/>
     * If this key is not set, or is an empty `KeyList`, this token
     * SHALL NOT be paused or unpaused.<br/>
     * If this key is removed while the token is paused, the token cannot
     * be unpaused and SHALL remain paused.
     *
     * Generated from protobuf field <code>.proto.Key pause_key = 22;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setPauseKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->pause_key = $var;

        return $this;
    }

    /**
     **
     * Token "Metadata".
     * <p>
     * The value, if set, MUST NOT exceed 100 bytes.<br/>
     * <dl><dt>Examples</dt>
     *   <dd>hcs://1/0.0.4896575</dd>
     *   <dd>ipfs://bafkreifd7tcjjuwxxf4qkaibkj62pj4mhfuud7plwrc3pfoygt55al6syi</dd>
     * </dl>
     *
     * Generated from protobuf field <code>bytes metadata = 23;</code>
     * @return string
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     **
     * Token "Metadata".
     * <p>
     * The value, if set, MUST NOT exceed 100 bytes.<br/>
     * <dl><dt>Examples</dt>
     *   <dd>hcs://1/0.0.4896575</dd>
     *   <dd>ipfs://bafkreifd7tcjjuwxxf4qkaibkj62pj4mhfuud7plwrc3pfoygt55al6syi</dd>
     * </dl>
     *
     * Generated from protobuf field <code>bytes metadata = 23;</code>
     * @param string $var
     * @return $this
     */
    public function setMetadata($var)
    {
        GPBUtil::checkString($var, False);
        $this->metadata = $var;

        return $this;
    }

    /**
     **
     * An Hedera key for managing the token `metadata`.
     * <p>
     * This key, if set, MAY authorize transactions to modify the
     * `metadata` for this token.<br/>
     * If this key is not set, or is an empty `KeyList`, the `metadata`
     * for this token SHALL NOT be modified.
     *
     * Generated from protobuf field <code>.proto.Key metadata_key = 24;</code>
     * @return \Proto\Key|null
     */
    public function getMetadataKey()
    {
        return $this->metadata_key;
    }

    public function hasMetadataKey()
    {
        return isset($this->metadata_key);
    }

    public function clearMetadataKey()
    {
        unset($this->metadata_key);
    }

    /**
     **
     * An Hedera key for managing the token `metadata`.
     * <p>
     * This key, if set, MAY authorize transactions to modify the
     * `metadata` for this token.<br/>
     * If this key is not set, or is an empty `KeyList`, the `metadata`
     * for this token SHALL NOT be modified.
     *
     * Generated from protobuf field <code>.proto.Key metadata_key = 24;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setMetadataKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->metadata_key = $var;

        return $this;
    }

}

