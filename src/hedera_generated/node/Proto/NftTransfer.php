<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: basic_types.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * A NFT transfer.<br/>
 * This refers to a sender account, a receiver account, and the serial number
 * of an NFT to transfer from sender to receiver.
 * Each `NftTransfer` SHALL be contained in another message (typically
 * `TokenTransferList`) that details which `Token` type applies to this NFT
 * transfer.
 *
 * Generated from protobuf message <code>proto.NftTransfer</code>
 */
class NftTransfer extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * An Account identifier for the sender.
     *
     * Generated from protobuf field <code>.proto.AccountID senderAccountID = 1;</code>
     */
    protected $senderAccountID = null;
    /**
     **
     * An Account identifier for the receiver.
     *
     * Generated from protobuf field <code>.proto.AccountID receiverAccountID = 2;</code>
     */
    protected $receiverAccountID = null;
    /**
     **
     * A serial number for the NFT to transfer.
     *
     * Generated from protobuf field <code>int64 serialNumber = 3;</code>
     */
    protected $serialNumber = 0;
    /**
     **
     * An approved allowance flag.<br/>
     * If true then the transfer is expected to be an approved allowance.
     * <p>
     * If set, `senderAccountID` SHALL be the owner that previously approved
     * the allowance.<br/>
     * If set, the `senderAccountID` MUST be the "payer" account for
     * the transaction <br/>
     * The default value SHALL be false (unset).
     *
     * Generated from protobuf field <code>bool is_approval = 4;</code>
     */
    protected $is_approval = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\AccountID $senderAccountID
     *          *
     *           An Account identifier for the sender.
     *     @type \Proto\AccountID $receiverAccountID
     *          *
     *           An Account identifier for the receiver.
     *     @type int|string $serialNumber
     *          *
     *           A serial number for the NFT to transfer.
     *     @type bool $is_approval
     *          *
     *           An approved allowance flag.<br/>
     *           If true then the transfer is expected to be an approved allowance.
     *           <p>
     *           If set, `senderAccountID` SHALL be the owner that previously approved
     *           the allowance.<br/>
     *           If set, the `senderAccountID` MUST be the "payer" account for
     *           the transaction <br/>
     *           The default value SHALL be false (unset).
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\BasicTypes::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * An Account identifier for the sender.
     *
     * Generated from protobuf field <code>.proto.AccountID senderAccountID = 1;</code>
     * @return \Proto\AccountID|null
     */
    public function getSenderAccountID()
    {
        return $this->senderAccountID;
    }

    public function hasSenderAccountID()
    {
        return isset($this->senderAccountID);
    }

    public function clearSenderAccountID()
    {
        unset($this->senderAccountID);
    }

    /**
     **
     * An Account identifier for the sender.
     *
     * Generated from protobuf field <code>.proto.AccountID senderAccountID = 1;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setSenderAccountID($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->senderAccountID = $var;

        return $this;
    }

    /**
     **
     * An Account identifier for the receiver.
     *
     * Generated from protobuf field <code>.proto.AccountID receiverAccountID = 2;</code>
     * @return \Proto\AccountID|null
     */
    public function getReceiverAccountID()
    {
        return $this->receiverAccountID;
    }

    public function hasReceiverAccountID()
    {
        return isset($this->receiverAccountID);
    }

    public function clearReceiverAccountID()
    {
        unset($this->receiverAccountID);
    }

    /**
     **
     * An Account identifier for the receiver.
     *
     * Generated from protobuf field <code>.proto.AccountID receiverAccountID = 2;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setReceiverAccountID($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->receiverAccountID = $var;

        return $this;
    }

    /**
     **
     * A serial number for the NFT to transfer.
     *
     * Generated from protobuf field <code>int64 serialNumber = 3;</code>
     * @return int|string
     */
    public function getSerialNumber()
    {
        return $this->serialNumber;
    }

    /**
     **
     * A serial number for the NFT to transfer.
     *
     * Generated from protobuf field <code>int64 serialNumber = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setSerialNumber($var)
    {
        GPBUtil::checkInt64($var);
        $this->serialNumber = $var;

        return $this;
    }

    /**
     **
     * An approved allowance flag.<br/>
     * If true then the transfer is expected to be an approved allowance.
     * <p>
     * If set, `senderAccountID` SHALL be the owner that previously approved
     * the allowance.<br/>
     * If set, the `senderAccountID` MUST be the "payer" account for
     * the transaction <br/>
     * The default value SHALL be false (unset).
     *
     * Generated from protobuf field <code>bool is_approval = 4;</code>
     * @return bool
     */
    public function getIsApproval()
    {
        return $this->is_approval;
    }

    /**
     **
     * An approved allowance flag.<br/>
     * If true then the transfer is expected to be an approved allowance.
     * <p>
     * If set, `senderAccountID` SHALL be the owner that previously approved
     * the allowance.<br/>
     * If set, the `senderAccountID` MUST be the "payer" account for
     * the transaction <br/>
     * The default value SHALL be false (unset).
     *
     * Generated from protobuf field <code>bool is_approval = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setIsApproval($var)
    {
        GPBUtil::checkBool($var);
        $this->is_approval = $var;

        return $this;
    }

}

