<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: crypto_delete_allowance.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * A single allowance for one non-fungible/unique token.
 * This is specific to removal, and the allowance is identified for that
 * specific purpose.
 * All fields in this message are REQUIRED.
 * The `serial_numbers` list MUST NOT be empty.
 * The combination of field values in this message MUST match existing
 * allowances for one or more individual non-fungible/unique tokens.
 * ### Removing an allowance that is `approve_for_all`
 * To remove an allowance that has set the `approve_for_all` flag, the
 * `owner` account must first _approve_ a **new** allowance for a specific
 * serial number using a `cryptoApproveAllowance`, and then, if desired,
 * that newly approved allowance to a specific serial number may be
 * deleted in a separate `cryptoDeleteAllowance` transaction.
 *
 * Generated from protobuf message <code>proto.NftRemoveAllowance</code>
 */
class NftRemoveAllowance extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A token identifier.
     * <p>
     * This MUST be a valid token identifier for a non-fungible/unique
     * token type.
     *
     * Generated from protobuf field <code>.proto.TokenID token_id = 1;</code>
     */
    protected $token_id = null;
    /**
     **
     * An `owner` account identifier.
     * <p>
     * This account MUST sign the transaction containing this message.
     *
     * Generated from protobuf field <code>.proto.AccountID owner = 2;</code>
     */
    protected $owner = null;
    /**
     **
     * The list of serial numbers to remove allowances from.
     * <p>
     * This list MUST NOT be empty.
     *
     * Generated from protobuf field <code>repeated int64 serial_numbers = 3;</code>
     */
    private $serial_numbers;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\TokenID $token_id
     *          *
     *           A token identifier.
     *           <p>
     *           This MUST be a valid token identifier for a non-fungible/unique
     *           token type.
     *     @type \Proto\AccountID $owner
     *          *
     *           An `owner` account identifier.
     *           <p>
     *           This account MUST sign the transaction containing this message.
     *     @type int[]|string[] $serial_numbers
     *          *
     *           The list of serial numbers to remove allowances from.
     *           <p>
     *           This list MUST NOT be empty.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\CryptoDeleteAllowance::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A token identifier.
     * <p>
     * This MUST be a valid token identifier for a non-fungible/unique
     * token type.
     *
     * Generated from protobuf field <code>.proto.TokenID token_id = 1;</code>
     * @return \Proto\TokenID|null
     */
    public function getTokenId()
    {
        return $this->token_id;
    }

    public function hasTokenId()
    {
        return isset($this->token_id);
    }

    public function clearTokenId()
    {
        unset($this->token_id);
    }

    /**
     **
     * A token identifier.
     * <p>
     * This MUST be a valid token identifier for a non-fungible/unique
     * token type.
     *
     * Generated from protobuf field <code>.proto.TokenID token_id = 1;</code>
     * @param \Proto\TokenID $var
     * @return $this
     */
    public function setTokenId($var)
    {
        GPBUtil::checkMessage($var, \Proto\TokenID::class);
        $this->token_id = $var;

        return $this;
    }

    /**
     **
     * An `owner` account identifier.
     * <p>
     * This account MUST sign the transaction containing this message.
     *
     * Generated from protobuf field <code>.proto.AccountID owner = 2;</code>
     * @return \Proto\AccountID|null
     */
    public function getOwner()
    {
        return $this->owner;
    }

    public function hasOwner()
    {
        return isset($this->owner);
    }

    public function clearOwner()
    {
        unset($this->owner);
    }

    /**
     **
     * An `owner` account identifier.
     * <p>
     * This account MUST sign the transaction containing this message.
     *
     * Generated from protobuf field <code>.proto.AccountID owner = 2;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setOwner($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->owner = $var;

        return $this;
    }

    /**
     **
     * The list of serial numbers to remove allowances from.
     * <p>
     * This list MUST NOT be empty.
     *
     * Generated from protobuf field <code>repeated int64 serial_numbers = 3;</code>
     * @return RepeatedField<int>|RepeatedField<string>
     */
    public function getSerialNumbers()
    {
        return $this->serial_numbers;
    }

    /**
     **
     * The list of serial numbers to remove allowances from.
     * <p>
     * This list MUST NOT be empty.
     *
     * Generated from protobuf field <code>repeated int64 serial_numbers = 3;</code>
     * @param int[]|string[] $var
     * @return $this
     */
    public function setSerialNumbers($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::INT64);
        $this->serial_numbers = $arr;

        return $this;
    }

}

