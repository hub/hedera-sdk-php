<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: node_stake_update.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Staking information for one node at the end of a staking period.
 * This SHALL be one entry in a list reported at the end of each
 * full staking period.
 *
 * Generated from protobuf message <code>proto.NodeStake</code>
 */
class NodeStake extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A limit to the amount of stake considered for consensus weight.
     * <p>
     * The amount of stake (whether accepting rewards or not) assigned to a
     * node that exceeds this limit SHALL NOT be considered for
     * consensus weight calculation.<br/>
     * If stake to _reward_ for a node exceeds this threshold, then all
     * accounts staking to that node SHALL receive a lower reward rate in
     * proportion to the excess stake.
     *
     * Generated from protobuf field <code>int64 max_stake = 1;</code>
     */
    protected $max_stake = 0;
    /**
     **
     * A minimum amount of HBAR staked to a node to receive rewards.
     * <p>
     * If the amount of stake (whether accepting rewards or not) assigned to
     * a node at the start of a staking period is less than this threshold,
     * then no rewards SHALL be paid to that node or to any accounts
     * staking to that node.
     *
     * Generated from protobuf field <code>int64 min_stake = 2;</code>
     */
    protected $min_stake = 0;
    /**
     **
     * A node identifier.<br/>
     * This value uniquely identifies this node within the
     * network address book.
     *
     * Generated from protobuf field <code>int64 node_id = 3;</code>
     */
    protected $node_id = 0;
    /**
     **
     * The rate of rewards, in tinybar per HBAR, for the staking reward
     * period that just ended.
     *
     * Generated from protobuf field <code>int64 reward_rate = 4;</code>
     */
    protected $reward_rate = 0;
    /**
     **
     * A consensus weight assigned to this node for the next staking period.
     *
     * Generated from protobuf field <code>int64 stake = 5;</code>
     */
    protected $stake = 0;
    /**
     **
     * The total amount staked to this node, while declining rewards.
     * <p>
     * This SHALL be the total staked amount, in tinybar, that is staked to
     * this node with the value of the `decline_reward` set.<br/>
     * This value MUST be calculated at the beginning of the staking period.
     *
     * Generated from protobuf field <code>int64 stake_not_rewarded = 6;</code>
     */
    protected $stake_not_rewarded = 0;
    /**
     **
     * The total amount staked to this node, while accepting rewards.
     * <p>
     * This SHALL be the total staked amount, in tinybar, that is staked to
     * this node with the value of the `decline_reward` not set.<br/>
     * This value MUST be calculated at the beginning of the staking period.
     *
     * Generated from protobuf field <code>int64 stake_rewarded = 7;</code>
     */
    protected $stake_rewarded = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $max_stake
     *          *
     *           A limit to the amount of stake considered for consensus weight.
     *           <p>
     *           The amount of stake (whether accepting rewards or not) assigned to a
     *           node that exceeds this limit SHALL NOT be considered for
     *           consensus weight calculation.<br/>
     *           If stake to _reward_ for a node exceeds this threshold, then all
     *           accounts staking to that node SHALL receive a lower reward rate in
     *           proportion to the excess stake.
     *     @type int|string $min_stake
     *          *
     *           A minimum amount of HBAR staked to a node to receive rewards.
     *           <p>
     *           If the amount of stake (whether accepting rewards or not) assigned to
     *           a node at the start of a staking period is less than this threshold,
     *           then no rewards SHALL be paid to that node or to any accounts
     *           staking to that node.
     *     @type int|string $node_id
     *          *
     *           A node identifier.<br/>
     *           This value uniquely identifies this node within the
     *           network address book.
     *     @type int|string $reward_rate
     *          *
     *           The rate of rewards, in tinybar per HBAR, for the staking reward
     *           period that just ended.
     *     @type int|string $stake
     *          *
     *           A consensus weight assigned to this node for the next staking period.
     *     @type int|string $stake_not_rewarded
     *          *
     *           The total amount staked to this node, while declining rewards.
     *           <p>
     *           This SHALL be the total staked amount, in tinybar, that is staked to
     *           this node with the value of the `decline_reward` set.<br/>
     *           This value MUST be calculated at the beginning of the staking period.
     *     @type int|string $stake_rewarded
     *          *
     *           The total amount staked to this node, while accepting rewards.
     *           <p>
     *           This SHALL be the total staked amount, in tinybar, that is staked to
     *           this node with the value of the `decline_reward` not set.<br/>
     *           This value MUST be calculated at the beginning of the staking period.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\NodeStakeUpdate::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A limit to the amount of stake considered for consensus weight.
     * <p>
     * The amount of stake (whether accepting rewards or not) assigned to a
     * node that exceeds this limit SHALL NOT be considered for
     * consensus weight calculation.<br/>
     * If stake to _reward_ for a node exceeds this threshold, then all
     * accounts staking to that node SHALL receive a lower reward rate in
     * proportion to the excess stake.
     *
     * Generated from protobuf field <code>int64 max_stake = 1;</code>
     * @return int|string
     */
    public function getMaxStake()
    {
        return $this->max_stake;
    }

    /**
     **
     * A limit to the amount of stake considered for consensus weight.
     * <p>
     * The amount of stake (whether accepting rewards or not) assigned to a
     * node that exceeds this limit SHALL NOT be considered for
     * consensus weight calculation.<br/>
     * If stake to _reward_ for a node exceeds this threshold, then all
     * accounts staking to that node SHALL receive a lower reward rate in
     * proportion to the excess stake.
     *
     * Generated from protobuf field <code>int64 max_stake = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMaxStake($var)
    {
        GPBUtil::checkInt64($var);
        $this->max_stake = $var;

        return $this;
    }

    /**
     **
     * A minimum amount of HBAR staked to a node to receive rewards.
     * <p>
     * If the amount of stake (whether accepting rewards or not) assigned to
     * a node at the start of a staking period is less than this threshold,
     * then no rewards SHALL be paid to that node or to any accounts
     * staking to that node.
     *
     * Generated from protobuf field <code>int64 min_stake = 2;</code>
     * @return int|string
     */
    public function getMinStake()
    {
        return $this->min_stake;
    }

    /**
     **
     * A minimum amount of HBAR staked to a node to receive rewards.
     * <p>
     * If the amount of stake (whether accepting rewards or not) assigned to
     * a node at the start of a staking period is less than this threshold,
     * then no rewards SHALL be paid to that node or to any accounts
     * staking to that node.
     *
     * Generated from protobuf field <code>int64 min_stake = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setMinStake($var)
    {
        GPBUtil::checkInt64($var);
        $this->min_stake = $var;

        return $this;
    }

    /**
     **
     * A node identifier.<br/>
     * This value uniquely identifies this node within the
     * network address book.
     *
     * Generated from protobuf field <code>int64 node_id = 3;</code>
     * @return int|string
     */
    public function getNodeId()
    {
        return $this->node_id;
    }

    /**
     **
     * A node identifier.<br/>
     * This value uniquely identifies this node within the
     * network address book.
     *
     * Generated from protobuf field <code>int64 node_id = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setNodeId($var)
    {
        GPBUtil::checkInt64($var);
        $this->node_id = $var;

        return $this;
    }

    /**
     **
     * The rate of rewards, in tinybar per HBAR, for the staking reward
     * period that just ended.
     *
     * Generated from protobuf field <code>int64 reward_rate = 4;</code>
     * @return int|string
     */
    public function getRewardRate()
    {
        return $this->reward_rate;
    }

    /**
     **
     * The rate of rewards, in tinybar per HBAR, for the staking reward
     * period that just ended.
     *
     * Generated from protobuf field <code>int64 reward_rate = 4;</code>
     * @param int|string $var
     * @return $this
     */
    public function setRewardRate($var)
    {
        GPBUtil::checkInt64($var);
        $this->reward_rate = $var;

        return $this;
    }

    /**
     **
     * A consensus weight assigned to this node for the next staking period.
     *
     * Generated from protobuf field <code>int64 stake = 5;</code>
     * @return int|string
     */
    public function getStake()
    {
        return $this->stake;
    }

    /**
     **
     * A consensus weight assigned to this node for the next staking period.
     *
     * Generated from protobuf field <code>int64 stake = 5;</code>
     * @param int|string $var
     * @return $this
     */
    public function setStake($var)
    {
        GPBUtil::checkInt64($var);
        $this->stake = $var;

        return $this;
    }

    /**
     **
     * The total amount staked to this node, while declining rewards.
     * <p>
     * This SHALL be the total staked amount, in tinybar, that is staked to
     * this node with the value of the `decline_reward` set.<br/>
     * This value MUST be calculated at the beginning of the staking period.
     *
     * Generated from protobuf field <code>int64 stake_not_rewarded = 6;</code>
     * @return int|string
     */
    public function getStakeNotRewarded()
    {
        return $this->stake_not_rewarded;
    }

    /**
     **
     * The total amount staked to this node, while declining rewards.
     * <p>
     * This SHALL be the total staked amount, in tinybar, that is staked to
     * this node with the value of the `decline_reward` set.<br/>
     * This value MUST be calculated at the beginning of the staking period.
     *
     * Generated from protobuf field <code>int64 stake_not_rewarded = 6;</code>
     * @param int|string $var
     * @return $this
     */
    public function setStakeNotRewarded($var)
    {
        GPBUtil::checkInt64($var);
        $this->stake_not_rewarded = $var;

        return $this;
    }

    /**
     **
     * The total amount staked to this node, while accepting rewards.
     * <p>
     * This SHALL be the total staked amount, in tinybar, that is staked to
     * this node with the value of the `decline_reward` not set.<br/>
     * This value MUST be calculated at the beginning of the staking period.
     *
     * Generated from protobuf field <code>int64 stake_rewarded = 7;</code>
     * @return int|string
     */
    public function getStakeRewarded()
    {
        return $this->stake_rewarded;
    }

    /**
     **
     * The total amount staked to this node, while accepting rewards.
     * <p>
     * This SHALL be the total staked amount, in tinybar, that is staked to
     * this node with the value of the `decline_reward` not set.<br/>
     * This value MUST be calculated at the beginning of the staking period.
     *
     * Generated from protobuf field <code>int64 stake_rewarded = 7;</code>
     * @param int|string $var
     * @return $this
     */
    public function setStakeRewarded($var)
    {
        GPBUtil::checkInt64($var);
        $this->stake_rewarded = $var;

        return $this;
    }

}

