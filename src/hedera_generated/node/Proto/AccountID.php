<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: basic_types.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * A unique identifier for an Hedera account.
 * An account identifier is of the form `shard.realm.[number|alias]`.<br/>
 * The identifier MAY use the alias form when transferring HBAR to a public key
 * before the account for that key is created, when only the alias value is
 * known, or in some smart contracts that use the EVM address style alias to
 * refer to Accounts.<br/>
 * When the account entry is completed, the alias SHALL be stored separately in
 * the Account record, and the identifier in the Account SHALL use the
 * `accountNum` form.
 * ---
 * ### Additional Notes
 * #### Alias
 * There is considerable complexity with `alias` (aka `evm_address`) for
 * Accounts. Much of this comes from the existence of a "hidden" alias for
 * almost all accounts, and the reuse of the alias field for both EVM reference
 * and "automatic" account creation.<br/>
 * For the purposes of this specification, we will use the following terms for
 * clarity.
 *   - `key_alias`<br/>
 *      The account public key as a protobuf serialized message and used for
 *      auto-creation and subsequent lookup. This is only valid if the account
 *      key is a single `primitive` key, either Ed25519 or ECDSA_SECP256K1.
 *   - `evm_address`<br/>
 *     Exists for every account and is one of
 *      - `contract_address`<br/>
 *        The 20 byte EVM address prescribed by `CREATE` or `CREATE2`
 *      - `evm_key_address`<br/>
 *        An arbitrary 20 byte EVM address that, for a usable externally owned
 *        account (EOA) SHALL be the rightmost 20 bytes of the Keccak-256 hash
 *        of a ECDSA_SECP256K1 key.<br/>
 *        Such accounts may be created in one of three ways:
 *        - Sending hbar or fungible tokens to an unused
 *          ECDSA_SECP256K1 key alias.
 *        - Sending hbar or fungible tokens to an unassigned 20-byte
 *          EVM address.
 *        - Submitting a `CryptoCreate` signed with the corresponding
 *          private key.
 *      - `long_zero`<br/>
 *        A synthetic 20 byte address inferred for "normally" created accounts.
 *        It is constructed from the "standard" AccountID as follows.
 *         1. 4 byte big-endian shard number
 *         1. 8 byte big-endian realm number
 *         1. 8 byte big-endian entity number<br/>
 * The `alias` field in the `Account` message SHALL contain one of four values
 * for any given account.
 *   - The `key_alias`, if the account was created by transferring HBAR to the
 *     `key_alias` public key value.
 *   - The `evm_key_address` if the account was created from an EVM public key
 *   - The `contract_address` if the account belongs to an EVM contract
 *   - Not-Set/null/Bytes.EMPTY (collectively `null`) if the account was
 *     created normally
 * If the `alias` field of an `Account` is any form of `null`, then the account
 * MAY be referred to by `alias` in an `AccountID` by using the `long_zero`
 * address for the account.<br/>
 * This "hidden default" alias SHALL NOT be stored, but is synthesized by the
 * node software as needed, and may be synthesized by an EVM contract or client
 * software as well.
 * ---
 * #### Alias forms
 * An `AccountID` in a transaction MAY reference an `Account` with
 * `shard.realm.alias`.<br/>
 * If the account `alias` field is set for an Account, that value SHALL be the
 * account alias.<br/>
 * If the account `alias` field is not set for an Account, the `long_zero` alias
 * SHALL be the account alias.
 *
 * Generated from protobuf message <code>proto.AccountID</code>
 */
class AccountID extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A whole number shard identifier.
     *
     * Generated from protobuf field <code>int64 shardNum = 1;</code>
     */
    protected $shardNum = 0;
    /**
     **
     * A whole number realm identifier.
     *
     * Generated from protobuf field <code>int64 realmNum = 2;</code>
     */
    protected $realmNum = 0;
    protected $account;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $shardNum
     *          *
     *           A whole number shard identifier.
     *     @type int|string $realmNum
     *          *
     *           A whole number realm identifier.
     *     @type int|string $accountNum
     *          *
     *           A whole number account number, unique within its realm and shard.
     *           <p>
     *           For any AccountID fields in the query response, transaction records,
     *           transaction receipts, or block stream `accountNum` MUST be used.
     *     @type string $alias
     *          *
     *           An alias value.<br/>
     *           Alias is a value used in some contexts to refer to an account when
     *           account number is not available, and may be an alias public key, or
     *           an EVM address.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\BasicTypes::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A whole number shard identifier.
     *
     * Generated from protobuf field <code>int64 shardNum = 1;</code>
     * @return int|string
     */
    public function getShardNum()
    {
        return $this->shardNum;
    }

    /**
     **
     * A whole number shard identifier.
     *
     * Generated from protobuf field <code>int64 shardNum = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setShardNum($var)
    {
        GPBUtil::checkInt64($var);
        $this->shardNum = $var;

        return $this;
    }

    /**
     **
     * A whole number realm identifier.
     *
     * Generated from protobuf field <code>int64 realmNum = 2;</code>
     * @return int|string
     */
    public function getRealmNum()
    {
        return $this->realmNum;
    }

    /**
     **
     * A whole number realm identifier.
     *
     * Generated from protobuf field <code>int64 realmNum = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setRealmNum($var)
    {
        GPBUtil::checkInt64($var);
        $this->realmNum = $var;

        return $this;
    }

    /**
     **
     * A whole number account number, unique within its realm and shard.
     * <p>
     * For any AccountID fields in the query response, transaction records,
     * transaction receipts, or block stream `accountNum` MUST be used.
     *
     * Generated from protobuf field <code>int64 accountNum = 3;</code>
     * @return int|string
     */
    public function getAccountNum()
    {
        return $this->readOneof(3);
    }

    public function hasAccountNum()
    {
        return $this->hasOneof(3);
    }

    /**
     **
     * A whole number account number, unique within its realm and shard.
     * <p>
     * For any AccountID fields in the query response, transaction records,
     * transaction receipts, or block stream `accountNum` MUST be used.
     *
     * Generated from protobuf field <code>int64 accountNum = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setAccountNum($var)
    {
        GPBUtil::checkInt64($var);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     **
     * An alias value.<br/>
     * Alias is a value used in some contexts to refer to an account when
     * account number is not available, and may be an alias public key, or
     * an EVM address.
     *
     * Generated from protobuf field <code>bytes alias = 4;</code>
     * @return string
     */
    public function getAlias()
    {
        return $this->readOneof(4);
    }

    public function hasAlias()
    {
        return $this->hasOneof(4);
    }

    /**
     **
     * An alias value.<br/>
     * Alias is a value used in some contexts to refer to an account when
     * account number is not available, and may be an alias public key, or
     * an EVM address.
     *
     * Generated from protobuf field <code>bytes alias = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setAlias($var)
    {
        GPBUtil::checkString($var, False);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getAccount()
    {
        return $this->whichOneof("account");
    }

}

