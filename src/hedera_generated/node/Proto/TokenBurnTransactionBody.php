<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: token_burn.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Burns tokens from the Token's treasury Account.
 * The token MUST have a `supply_key` set and that key MUST NOT
 * be an empty `KeyList`.<br/>
 * The token `supply_key` MUST sign this transaction.<br/>
 * This operation SHALL decrease the total supply for the token type by
 * the number of tokens "burned".<br/>
 * The total supply for the token type MUST NOT be reduced below zero (`0`)
 * by this transaction.<br/>
 * The tokens to burn SHALL be deducted from the token treasury account.<br/>
 * If the token is a fungible/common type, the amount MUST be specified.<br/>
 * If the token is a non-fungible/unique type, the specific serial numbers
 * MUST be specified.<br/>
 * The global batch size limit (`tokens.nfts.maxBatchSizeBurn`) SHALL set
 * the maximum number of individual NFT serial numbers permitted in a single
 * `tokenBurn` transaction.
 * ### Block Stream Effects
 * None
 *
 * Generated from protobuf message <code>proto.TokenBurnTransactionBody</code>
 */
class TokenBurnTransactionBody extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A token identifier.
     * <p>
     * This SHALL identify the token type to "burn".<br/>
     * The identified token MUST exist, and MUST NOT be deleted.
     *
     * Generated from protobuf field <code>.proto.TokenID token = 1;</code>
     */
    protected $token = null;
    /**
     **
     * An amount to burn from the Treasury Account.
     * <p>
     * This is interpreted as an amount in the smallest possible denomination
     * for the token (10<sup>-decimals</sup> whole tokens).<br/>
     * The balance for the token treasury account MUST contain sufficient
     * tokens to complete this transaction with a non-negative balance.<br/>
     * If this value is equal to zero (`0`), the token SHOULD be a
     * non-fungible/unique type.<br/>
     * If this value is non-zero, the token MUST be a fungible/common type.
     *
     * Generated from protobuf field <code>uint64 amount = 2;</code>
     */
    protected $amount = 0;
    /**
     **
     * A list of serial numbers to burn from the Treasury Account.
     * <p>
     * This list MUST NOT contain more entries than the current limit set by
     * the network configuration value `tokens.nfts.maxBatchSizeBurn`.<br/>
     * The treasury account for the token MUST hold each unique token
     * identified in this list.<br/>
     * If this list is not empty, the token MUST be a
     * non-fungible/unique type.<br/>
     * If this list is empty, the token MUST be a fungible/common type.
     *
     * Generated from protobuf field <code>repeated int64 serialNumbers = 3;</code>
     */
    private $serialNumbers;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\TokenID $token
     *          *
     *           A token identifier.
     *           <p>
     *           This SHALL identify the token type to "burn".<br/>
     *           The identified token MUST exist, and MUST NOT be deleted.
     *     @type int|string $amount
     *          *
     *           An amount to burn from the Treasury Account.
     *           <p>
     *           This is interpreted as an amount in the smallest possible denomination
     *           for the token (10<sup>-decimals</sup> whole tokens).<br/>
     *           The balance for the token treasury account MUST contain sufficient
     *           tokens to complete this transaction with a non-negative balance.<br/>
     *           If this value is equal to zero (`0`), the token SHOULD be a
     *           non-fungible/unique type.<br/>
     *           If this value is non-zero, the token MUST be a fungible/common type.
     *     @type int[]|string[] $serialNumbers
     *          *
     *           A list of serial numbers to burn from the Treasury Account.
     *           <p>
     *           This list MUST NOT contain more entries than the current limit set by
     *           the network configuration value `tokens.nfts.maxBatchSizeBurn`.<br/>
     *           The treasury account for the token MUST hold each unique token
     *           identified in this list.<br/>
     *           If this list is not empty, the token MUST be a
     *           non-fungible/unique type.<br/>
     *           If this list is empty, the token MUST be a fungible/common type.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\TokenBurn::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A token identifier.
     * <p>
     * This SHALL identify the token type to "burn".<br/>
     * The identified token MUST exist, and MUST NOT be deleted.
     *
     * Generated from protobuf field <code>.proto.TokenID token = 1;</code>
     * @return \Proto\TokenID|null
     */
    public function getToken()
    {
        return $this->token;
    }

    public function hasToken()
    {
        return isset($this->token);
    }

    public function clearToken()
    {
        unset($this->token);
    }

    /**
     **
     * A token identifier.
     * <p>
     * This SHALL identify the token type to "burn".<br/>
     * The identified token MUST exist, and MUST NOT be deleted.
     *
     * Generated from protobuf field <code>.proto.TokenID token = 1;</code>
     * @param \Proto\TokenID $var
     * @return $this
     */
    public function setToken($var)
    {
        GPBUtil::checkMessage($var, \Proto\TokenID::class);
        $this->token = $var;

        return $this;
    }

    /**
     **
     * An amount to burn from the Treasury Account.
     * <p>
     * This is interpreted as an amount in the smallest possible denomination
     * for the token (10<sup>-decimals</sup> whole tokens).<br/>
     * The balance for the token treasury account MUST contain sufficient
     * tokens to complete this transaction with a non-negative balance.<br/>
     * If this value is equal to zero (`0`), the token SHOULD be a
     * non-fungible/unique type.<br/>
     * If this value is non-zero, the token MUST be a fungible/common type.
     *
     * Generated from protobuf field <code>uint64 amount = 2;</code>
     * @return int|string
     */
    public function getAmount()
    {
        return $this->amount;
    }

    /**
     **
     * An amount to burn from the Treasury Account.
     * <p>
     * This is interpreted as an amount in the smallest possible denomination
     * for the token (10<sup>-decimals</sup> whole tokens).<br/>
     * The balance for the token treasury account MUST contain sufficient
     * tokens to complete this transaction with a non-negative balance.<br/>
     * If this value is equal to zero (`0`), the token SHOULD be a
     * non-fungible/unique type.<br/>
     * If this value is non-zero, the token MUST be a fungible/common type.
     *
     * Generated from protobuf field <code>uint64 amount = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setAmount($var)
    {
        GPBUtil::checkUint64($var);
        $this->amount = $var;

        return $this;
    }

    /**
     **
     * A list of serial numbers to burn from the Treasury Account.
     * <p>
     * This list MUST NOT contain more entries than the current limit set by
     * the network configuration value `tokens.nfts.maxBatchSizeBurn`.<br/>
     * The treasury account for the token MUST hold each unique token
     * identified in this list.<br/>
     * If this list is not empty, the token MUST be a
     * non-fungible/unique type.<br/>
     * If this list is empty, the token MUST be a fungible/common type.
     *
     * Generated from protobuf field <code>repeated int64 serialNumbers = 3;</code>
     * @return RepeatedField<int>|RepeatedField<string>
     */
    public function getSerialNumbers()
    {
        return $this->serialNumbers;
    }

    /**
     **
     * A list of serial numbers to burn from the Treasury Account.
     * <p>
     * This list MUST NOT contain more entries than the current limit set by
     * the network configuration value `tokens.nfts.maxBatchSizeBurn`.<br/>
     * The treasury account for the token MUST hold each unique token
     * identified in this list.<br/>
     * If this list is not empty, the token MUST be a
     * non-fungible/unique type.<br/>
     * If this list is empty, the token MUST be a fungible/common type.
     *
     * Generated from protobuf field <code>repeated int64 serialNumbers = 3;</code>
     * @param int[]|string[] $var
     * @return $this
     */
    public function setSerialNumbers($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::INT64);
        $this->serialNumbers = $arr;

        return $this;
    }

}

