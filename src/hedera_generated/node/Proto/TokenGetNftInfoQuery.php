<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: token_get_nft_info.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Applicable only to tokens of type NON_FUNGIBLE_UNIQUE. Gets info on a NFT for a given TokenID (of
 * type NON_FUNGIBLE_UNIQUE) and serial number
 *
 * Generated from protobuf message <code>proto.TokenGetNftInfoQuery</code>
 */
class TokenGetNftInfoQuery extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * Standard information sent with every query operation.<br/>
     * This includes the signed payment and what kind of response is requested
     * (cost, state proof, both, or neither).
     *
     * Generated from protobuf field <code>.proto.QueryHeader header = 1;</code>
     */
    protected $header = null;
    /**
     **
     * A non-fungible/unique token (NFT) identifier.
     * <p>
     * This SHALL identify the NFT to query.<br/>
     * The identified NFT MUST exist, and MUST NOT be deleted.
     *
     * Generated from protobuf field <code>.proto.NftID nftID = 2;</code>
     */
    protected $nftID = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\QueryHeader $header
     *          *
     *           Standard information sent with every query operation.<br/>
     *           This includes the signed payment and what kind of response is requested
     *           (cost, state proof, both, or neither).
     *     @type \Proto\NftID $nftID
     *          *
     *           A non-fungible/unique token (NFT) identifier.
     *           <p>
     *           This SHALL identify the NFT to query.<br/>
     *           The identified NFT MUST exist, and MUST NOT be deleted.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\TokenGetNftInfo::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * Standard information sent with every query operation.<br/>
     * This includes the signed payment and what kind of response is requested
     * (cost, state proof, both, or neither).
     *
     * Generated from protobuf field <code>.proto.QueryHeader header = 1;</code>
     * @return \Proto\QueryHeader|null
     */
    public function getHeader()
    {
        return $this->header;
    }

    public function hasHeader()
    {
        return isset($this->header);
    }

    public function clearHeader()
    {
        unset($this->header);
    }

    /**
     **
     * Standard information sent with every query operation.<br/>
     * This includes the signed payment and what kind of response is requested
     * (cost, state proof, both, or neither).
     *
     * Generated from protobuf field <code>.proto.QueryHeader header = 1;</code>
     * @param \Proto\QueryHeader $var
     * @return $this
     */
    public function setHeader($var)
    {
        GPBUtil::checkMessage($var, \Proto\QueryHeader::class);
        $this->header = $var;

        return $this;
    }

    /**
     **
     * A non-fungible/unique token (NFT) identifier.
     * <p>
     * This SHALL identify the NFT to query.<br/>
     * The identified NFT MUST exist, and MUST NOT be deleted.
     *
     * Generated from protobuf field <code>.proto.NftID nftID = 2;</code>
     * @return \Proto\NftID|null
     */
    public function getNftID()
    {
        return $this->nftID;
    }

    public function hasNftID()
    {
        return isset($this->nftID);
    }

    public function clearNftID()
    {
        unset($this->nftID);
    }

    /**
     **
     * A non-fungible/unique token (NFT) identifier.
     * <p>
     * This SHALL identify the NFT to query.<br/>
     * The identified NFT MUST exist, and MUST NOT be deleted.
     *
     * Generated from protobuf field <code>.proto.NftID nftID = 2;</code>
     * @param \Proto\NftID $var
     * @return $this
     */
    public function setNftID($var)
    {
        GPBUtil::checkMessage($var, \Proto\NftID::class);
        $this->nftID = $var;

        return $this;
    }

}

