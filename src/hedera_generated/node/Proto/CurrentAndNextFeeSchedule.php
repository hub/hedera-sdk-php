<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: basic_types.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * The "current" fee schedule and the "next" fee schedule.
 * The current fee schedule is the schedule that SHALL apply to the current
 * transaction.<br/>
 * The next fee schedule is the schedule that SHALL apply after the current
 * schedule expires.<br/>
 * We store both to avoid a condition where transactions are processed very
 * near the time when a fee schedule expires and it might be indeterminate
 * which fees to apply. With both current and next fee schedule the network
 * can deterministically apply the correct fee schedule based on consensus
 * timestamp for each transaction.
 *
 * Generated from protobuf message <code>proto.CurrentAndNextFeeSchedule</code>
 */
class CurrentAndNextFeeSchedule extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A current, unexpired, fee schedule.
     *
     * Generated from protobuf field <code>.proto.FeeSchedule currentFeeSchedule = 1;</code>
     */
    protected $currentFeeSchedule = null;
    /**
     **
     * A future fee schedule to use when the current schedule expires.
     *
     * Generated from protobuf field <code>.proto.FeeSchedule nextFeeSchedule = 2;</code>
     */
    protected $nextFeeSchedule = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\FeeSchedule $currentFeeSchedule
     *          *
     *           A current, unexpired, fee schedule.
     *     @type \Proto\FeeSchedule $nextFeeSchedule
     *          *
     *           A future fee schedule to use when the current schedule expires.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\BasicTypes::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A current, unexpired, fee schedule.
     *
     * Generated from protobuf field <code>.proto.FeeSchedule currentFeeSchedule = 1;</code>
     * @return \Proto\FeeSchedule|null
     */
    public function getCurrentFeeSchedule()
    {
        return $this->currentFeeSchedule;
    }

    public function hasCurrentFeeSchedule()
    {
        return isset($this->currentFeeSchedule);
    }

    public function clearCurrentFeeSchedule()
    {
        unset($this->currentFeeSchedule);
    }

    /**
     **
     * A current, unexpired, fee schedule.
     *
     * Generated from protobuf field <code>.proto.FeeSchedule currentFeeSchedule = 1;</code>
     * @param \Proto\FeeSchedule $var
     * @return $this
     */
    public function setCurrentFeeSchedule($var)
    {
        GPBUtil::checkMessage($var, \Proto\FeeSchedule::class);
        $this->currentFeeSchedule = $var;

        return $this;
    }

    /**
     **
     * A future fee schedule to use when the current schedule expires.
     *
     * Generated from protobuf field <code>.proto.FeeSchedule nextFeeSchedule = 2;</code>
     * @return \Proto\FeeSchedule|null
     */
    public function getNextFeeSchedule()
    {
        return $this->nextFeeSchedule;
    }

    public function hasNextFeeSchedule()
    {
        return isset($this->nextFeeSchedule);
    }

    public function clearNextFeeSchedule()
    {
        unset($this->nextFeeSchedule);
    }

    /**
     **
     * A future fee schedule to use when the current schedule expires.
     *
     * Generated from protobuf field <code>.proto.FeeSchedule nextFeeSchedule = 2;</code>
     * @param \Proto\FeeSchedule $var
     * @return $this
     */
    public function setNextFeeSchedule($var)
    {
        GPBUtil::checkMessage($var, \Proto\FeeSchedule::class);
        $this->nextFeeSchedule = $var;

        return $this;
    }

}

