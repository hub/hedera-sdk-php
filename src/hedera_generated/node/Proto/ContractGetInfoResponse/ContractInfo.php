<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: contract_get_info.proto

namespace Proto\ContractGetInfoResponse;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 * Generated from protobuf message <code>proto.ContractGetInfoResponse.ContractInfo</code>
 */
class ContractInfo extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * The ID of the smart contract requested in the query.
     *
     * Generated from protobuf field <code>.proto.ContractID contractID = 1;</code>
     */
    protected $contractID = null;
    /**
     **
     * The Account ID for the account entry associated with this
     * smart contract.
     *
     * Generated from protobuf field <code>.proto.AccountID accountID = 2;</code>
     */
    protected $accountID = null;
    /**
     **
     * The "Solidity" form contract ID.<br/>
     * This is a hexadecimal string form of the 20-byte EVM address
     * of the contract.
     *
     * Generated from protobuf field <code>string contractAccountID = 3;</code>
     */
    protected $contractAccountID = '';
    /**
     **
     * The key that MUST sign any transaction to update or modify this
     * smart contract.
     * <p>
     * If this value is null, or is an empty `KeyList` then the contract
     * CANNOT be deleted, modified, or updated, but MAY still expire.
     *
     * Generated from protobuf field <code>.proto.Key adminKey = 4;</code>
     */
    protected $adminKey = null;
    /**
     **
     * The point in time at which this contract will expire.
     *
     * Generated from protobuf field <code>.proto.Timestamp expirationTime = 5;</code>
     */
    protected $expirationTime = null;
    /**
     **
     * The duration, in seconds, for which the contract lifetime will be
     * automatically extended upon expiration, provide sufficient HBAR is
     * available at that time to pay the renewal fee.<br/>
     * See `auto_renew_account_id` for additional conditions.
     *
     * Generated from protobuf field <code>.proto.Duration autoRenewPeriod = 6;</code>
     */
    protected $autoRenewPeriod = null;
    /**
     **
     * The amount of storage used by this smart contract.
     *
     * Generated from protobuf field <code>int64 storage = 7;</code>
     */
    protected $storage = 0;
    /**
     **
     * A short description of this smart contract.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>string memo = 8;</code>
     */
    protected $memo = '';
    /**
     **
     * The current HBAR balance, in tinybar, of the smart contract account.
     *
     * Generated from protobuf field <code>uint64 balance = 9;</code>
     */
    protected $balance = 0;
    /**
     **
     * A flag indicating that this contract is deleted.
     *
     * Generated from protobuf field <code>bool deleted = 10;</code>
     */
    protected $deleted = false;
    /**
     **
     * Because <a href="https://hips.hedera.com/hip/hip-367">HIP-367</a>,
     * which allows an account to be associated to an unlimited number of
     * tokens, it became necessary to only provide this information from
     * a Mirror Node.<br/>
     * The list of tokens associated to this contract.
     *
     * Generated from protobuf field <code>repeated .proto.TokenRelationship tokenRelationships = 11 [deprecated = true];</code>
     * @deprecated
     */
    private $tokenRelationships;
    /**
     **
     * The ledger ID of the network that generated this response.
     * <p>
     * This value SHALL identify the distributed ledger that responded to
     * this query.
     *
     * Generated from protobuf field <code>bytes ledger_id = 12;</code>
     */
    protected $ledger_id = '';
    /**
     **
     * An account designated to pay the renewal fee upon automatic renewal
     * of this contract.
     * <p>
     * If this is not set, or is set to an account with zero HBAR
     * available, the HBAR balance of the contract, if available,
     * SHALL be used to pay the renewal fee.
     *
     * Generated from protobuf field <code>.proto.AccountID auto_renew_account_id = 13;</code>
     */
    protected $auto_renew_account_id = null;
    /**
     **
     * The maximum number of tokens that the contract can be
     * associated to automatically.
     *
     * Generated from protobuf field <code>int32 max_automatic_token_associations = 14;</code>
     */
    protected $max_automatic_token_associations = 0;
    /**
     **
     * Staking information for this contract.
     *
     * Generated from protobuf field <code>.proto.StakingInfo staking_info = 15;</code>
     */
    protected $staking_info = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\ContractID $contractID
     *          *
     *           The ID of the smart contract requested in the query.
     *     @type \Proto\AccountID $accountID
     *          *
     *           The Account ID for the account entry associated with this
     *           smart contract.
     *     @type string $contractAccountID
     *          *
     *           The "Solidity" form contract ID.<br/>
     *           This is a hexadecimal string form of the 20-byte EVM address
     *           of the contract.
     *     @type \Proto\Key $adminKey
     *          *
     *           The key that MUST sign any transaction to update or modify this
     *           smart contract.
     *           <p>
     *           If this value is null, or is an empty `KeyList` then the contract
     *           CANNOT be deleted, modified, or updated, but MAY still expire.
     *     @type \Proto\Timestamp $expirationTime
     *          *
     *           The point in time at which this contract will expire.
     *     @type \Proto\Duration $autoRenewPeriod
     *          *
     *           The duration, in seconds, for which the contract lifetime will be
     *           automatically extended upon expiration, provide sufficient HBAR is
     *           available at that time to pay the renewal fee.<br/>
     *           See `auto_renew_account_id` for additional conditions.
     *     @type int|string $storage
     *          *
     *           The amount of storage used by this smart contract.
     *     @type string $memo
     *          *
     *           A short description of this smart contract.
     *           <p>
     *           This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     *           (default 100) bytes when encoded as UTF-8.
     *     @type int|string $balance
     *          *
     *           The current HBAR balance, in tinybar, of the smart contract account.
     *     @type bool $deleted
     *          *
     *           A flag indicating that this contract is deleted.
     *     @type \Proto\TokenRelationship[] $tokenRelationships
     *          *
     *           Because <a href="https://hips.hedera.com/hip/hip-367">HIP-367</a>,
     *           which allows an account to be associated to an unlimited number of
     *           tokens, it became necessary to only provide this information from
     *           a Mirror Node.<br/>
     *           The list of tokens associated to this contract.
     *     @type string $ledger_id
     *          *
     *           The ledger ID of the network that generated this response.
     *           <p>
     *           This value SHALL identify the distributed ledger that responded to
     *           this query.
     *     @type \Proto\AccountID $auto_renew_account_id
     *          *
     *           An account designated to pay the renewal fee upon automatic renewal
     *           of this contract.
     *           <p>
     *           If this is not set, or is set to an account with zero HBAR
     *           available, the HBAR balance of the contract, if available,
     *           SHALL be used to pay the renewal fee.
     *     @type int $max_automatic_token_associations
     *          *
     *           The maximum number of tokens that the contract can be
     *           associated to automatically.
     *     @type \Proto\StakingInfo $staking_info
     *          *
     *           Staking information for this contract.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ContractGetInfo::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * The ID of the smart contract requested in the query.
     *
     * Generated from protobuf field <code>.proto.ContractID contractID = 1;</code>
     * @return \Proto\ContractID|null
     */
    public function getContractID()
    {
        return $this->contractID;
    }

    public function hasContractID()
    {
        return isset($this->contractID);
    }

    public function clearContractID()
    {
        unset($this->contractID);
    }

    /**
     **
     * The ID of the smart contract requested in the query.
     *
     * Generated from protobuf field <code>.proto.ContractID contractID = 1;</code>
     * @param \Proto\ContractID $var
     * @return $this
     */
    public function setContractID($var)
    {
        GPBUtil::checkMessage($var, \Proto\ContractID::class);
        $this->contractID = $var;

        return $this;
    }

    /**
     **
     * The Account ID for the account entry associated with this
     * smart contract.
     *
     * Generated from protobuf field <code>.proto.AccountID accountID = 2;</code>
     * @return \Proto\AccountID|null
     */
    public function getAccountID()
    {
        return $this->accountID;
    }

    public function hasAccountID()
    {
        return isset($this->accountID);
    }

    public function clearAccountID()
    {
        unset($this->accountID);
    }

    /**
     **
     * The Account ID for the account entry associated with this
     * smart contract.
     *
     * Generated from protobuf field <code>.proto.AccountID accountID = 2;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setAccountID($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->accountID = $var;

        return $this;
    }

    /**
     **
     * The "Solidity" form contract ID.<br/>
     * This is a hexadecimal string form of the 20-byte EVM address
     * of the contract.
     *
     * Generated from protobuf field <code>string contractAccountID = 3;</code>
     * @return string
     */
    public function getContractAccountID()
    {
        return $this->contractAccountID;
    }

    /**
     **
     * The "Solidity" form contract ID.<br/>
     * This is a hexadecimal string form of the 20-byte EVM address
     * of the contract.
     *
     * Generated from protobuf field <code>string contractAccountID = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setContractAccountID($var)
    {
        GPBUtil::checkString($var, True);
        $this->contractAccountID = $var;

        return $this;
    }

    /**
     **
     * The key that MUST sign any transaction to update or modify this
     * smart contract.
     * <p>
     * If this value is null, or is an empty `KeyList` then the contract
     * CANNOT be deleted, modified, or updated, but MAY still expire.
     *
     * Generated from protobuf field <code>.proto.Key adminKey = 4;</code>
     * @return \Proto\Key|null
     */
    public function getAdminKey()
    {
        return $this->adminKey;
    }

    public function hasAdminKey()
    {
        return isset($this->adminKey);
    }

    public function clearAdminKey()
    {
        unset($this->adminKey);
    }

    /**
     **
     * The key that MUST sign any transaction to update or modify this
     * smart contract.
     * <p>
     * If this value is null, or is an empty `KeyList` then the contract
     * CANNOT be deleted, modified, or updated, but MAY still expire.
     *
     * Generated from protobuf field <code>.proto.Key adminKey = 4;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setAdminKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->adminKey = $var;

        return $this;
    }

    /**
     **
     * The point in time at which this contract will expire.
     *
     * Generated from protobuf field <code>.proto.Timestamp expirationTime = 5;</code>
     * @return \Proto\Timestamp|null
     */
    public function getExpirationTime()
    {
        return $this->expirationTime;
    }

    public function hasExpirationTime()
    {
        return isset($this->expirationTime);
    }

    public function clearExpirationTime()
    {
        unset($this->expirationTime);
    }

    /**
     **
     * The point in time at which this contract will expire.
     *
     * Generated from protobuf field <code>.proto.Timestamp expirationTime = 5;</code>
     * @param \Proto\Timestamp $var
     * @return $this
     */
    public function setExpirationTime($var)
    {
        GPBUtil::checkMessage($var, \Proto\Timestamp::class);
        $this->expirationTime = $var;

        return $this;
    }

    /**
     **
     * The duration, in seconds, for which the contract lifetime will be
     * automatically extended upon expiration, provide sufficient HBAR is
     * available at that time to pay the renewal fee.<br/>
     * See `auto_renew_account_id` for additional conditions.
     *
     * Generated from protobuf field <code>.proto.Duration autoRenewPeriod = 6;</code>
     * @return \Proto\Duration|null
     */
    public function getAutoRenewPeriod()
    {
        return $this->autoRenewPeriod;
    }

    public function hasAutoRenewPeriod()
    {
        return isset($this->autoRenewPeriod);
    }

    public function clearAutoRenewPeriod()
    {
        unset($this->autoRenewPeriod);
    }

    /**
     **
     * The duration, in seconds, for which the contract lifetime will be
     * automatically extended upon expiration, provide sufficient HBAR is
     * available at that time to pay the renewal fee.<br/>
     * See `auto_renew_account_id` for additional conditions.
     *
     * Generated from protobuf field <code>.proto.Duration autoRenewPeriod = 6;</code>
     * @param \Proto\Duration $var
     * @return $this
     */
    public function setAutoRenewPeriod($var)
    {
        GPBUtil::checkMessage($var, \Proto\Duration::class);
        $this->autoRenewPeriod = $var;

        return $this;
    }

    /**
     **
     * The amount of storage used by this smart contract.
     *
     * Generated from protobuf field <code>int64 storage = 7;</code>
     * @return int|string
     */
    public function getStorage()
    {
        return $this->storage;
    }

    /**
     **
     * The amount of storage used by this smart contract.
     *
     * Generated from protobuf field <code>int64 storage = 7;</code>
     * @param int|string $var
     * @return $this
     */
    public function setStorage($var)
    {
        GPBUtil::checkInt64($var);
        $this->storage = $var;

        return $this;
    }

    /**
     **
     * A short description of this smart contract.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>string memo = 8;</code>
     * @return string
     */
    public function getMemo()
    {
        return $this->memo;
    }

    /**
     **
     * A short description of this smart contract.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>string memo = 8;</code>
     * @param string $var
     * @return $this
     */
    public function setMemo($var)
    {
        GPBUtil::checkString($var, True);
        $this->memo = $var;

        return $this;
    }

    /**
     **
     * The current HBAR balance, in tinybar, of the smart contract account.
     *
     * Generated from protobuf field <code>uint64 balance = 9;</code>
     * @return int|string
     */
    public function getBalance()
    {
        return $this->balance;
    }

    /**
     **
     * The current HBAR balance, in tinybar, of the smart contract account.
     *
     * Generated from protobuf field <code>uint64 balance = 9;</code>
     * @param int|string $var
     * @return $this
     */
    public function setBalance($var)
    {
        GPBUtil::checkUint64($var);
        $this->balance = $var;

        return $this;
    }

    /**
     **
     * A flag indicating that this contract is deleted.
     *
     * Generated from protobuf field <code>bool deleted = 10;</code>
     * @return bool
     */
    public function getDeleted()
    {
        return $this->deleted;
    }

    /**
     **
     * A flag indicating that this contract is deleted.
     *
     * Generated from protobuf field <code>bool deleted = 10;</code>
     * @param bool $var
     * @return $this
     */
    public function setDeleted($var)
    {
        GPBUtil::checkBool($var);
        $this->deleted = $var;

        return $this;
    }

    /**
     **
     * Because <a href="https://hips.hedera.com/hip/hip-367">HIP-367</a>,
     * which allows an account to be associated to an unlimited number of
     * tokens, it became necessary to only provide this information from
     * a Mirror Node.<br/>
     * The list of tokens associated to this contract.
     *
     * Generated from protobuf field <code>repeated .proto.TokenRelationship tokenRelationships = 11 [deprecated = true];</code>
     * @return RepeatedField<\Proto\TokenRelationship>
     * @deprecated
     */
    public function getTokenRelationships()
    {
        if ($this->tokenRelationships->count() !== 0) {
            @trigger_error('tokenRelationships is deprecated.', E_USER_DEPRECATED);
        }
        return $this->tokenRelationships;
    }

    /**
     **
     * Because <a href="https://hips.hedera.com/hip/hip-367">HIP-367</a>,
     * which allows an account to be associated to an unlimited number of
     * tokens, it became necessary to only provide this information from
     * a Mirror Node.<br/>
     * The list of tokens associated to this contract.
     *
     * Generated from protobuf field <code>repeated .proto.TokenRelationship tokenRelationships = 11 [deprecated = true];</code>
     * @param \Proto\TokenRelationship[] $var
     * @return $this
     * @deprecated
     */
    public function setTokenRelationships($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Proto\TokenRelationship::class);
        if ($arr->count() !== 0) {
            @trigger_error('tokenRelationships is deprecated.', E_USER_DEPRECATED);
        }
        $this->tokenRelationships = $arr;

        return $this;
    }

    /**
     **
     * The ledger ID of the network that generated this response.
     * <p>
     * This value SHALL identify the distributed ledger that responded to
     * this query.
     *
     * Generated from protobuf field <code>bytes ledger_id = 12;</code>
     * @return string
     */
    public function getLedgerId()
    {
        return $this->ledger_id;
    }

    /**
     **
     * The ledger ID of the network that generated this response.
     * <p>
     * This value SHALL identify the distributed ledger that responded to
     * this query.
     *
     * Generated from protobuf field <code>bytes ledger_id = 12;</code>
     * @param string $var
     * @return $this
     */
    public function setLedgerId($var)
    {
        GPBUtil::checkString($var, False);
        $this->ledger_id = $var;

        return $this;
    }

    /**
     **
     * An account designated to pay the renewal fee upon automatic renewal
     * of this contract.
     * <p>
     * If this is not set, or is set to an account with zero HBAR
     * available, the HBAR balance of the contract, if available,
     * SHALL be used to pay the renewal fee.
     *
     * Generated from protobuf field <code>.proto.AccountID auto_renew_account_id = 13;</code>
     * @return \Proto\AccountID|null
     */
    public function getAutoRenewAccountId()
    {
        return $this->auto_renew_account_id;
    }

    public function hasAutoRenewAccountId()
    {
        return isset($this->auto_renew_account_id);
    }

    public function clearAutoRenewAccountId()
    {
        unset($this->auto_renew_account_id);
    }

    /**
     **
     * An account designated to pay the renewal fee upon automatic renewal
     * of this contract.
     * <p>
     * If this is not set, or is set to an account with zero HBAR
     * available, the HBAR balance of the contract, if available,
     * SHALL be used to pay the renewal fee.
     *
     * Generated from protobuf field <code>.proto.AccountID auto_renew_account_id = 13;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setAutoRenewAccountId($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->auto_renew_account_id = $var;

        return $this;
    }

    /**
     **
     * The maximum number of tokens that the contract can be
     * associated to automatically.
     *
     * Generated from protobuf field <code>int32 max_automatic_token_associations = 14;</code>
     * @return int
     */
    public function getMaxAutomaticTokenAssociations()
    {
        return $this->max_automatic_token_associations;
    }

    /**
     **
     * The maximum number of tokens that the contract can be
     * associated to automatically.
     *
     * Generated from protobuf field <code>int32 max_automatic_token_associations = 14;</code>
     * @param int $var
     * @return $this
     */
    public function setMaxAutomaticTokenAssociations($var)
    {
        GPBUtil::checkInt32($var);
        $this->max_automatic_token_associations = $var;

        return $this;
    }

    /**
     **
     * Staking information for this contract.
     *
     * Generated from protobuf field <code>.proto.StakingInfo staking_info = 15;</code>
     * @return \Proto\StakingInfo|null
     */
    public function getStakingInfo()
    {
        return $this->staking_info;
    }

    public function hasStakingInfo()
    {
        return isset($this->staking_info);
    }

    public function clearStakingInfo()
    {
        unset($this->staking_info);
    }

    /**
     **
     * Staking information for this contract.
     *
     * Generated from protobuf field <code>.proto.StakingInfo staking_info = 15;</code>
     * @param \Proto\StakingInfo $var
     * @return $this
     */
    public function setStakingInfo($var)
    {
        GPBUtil::checkMessage($var, \Proto\StakingInfo::class);
        $this->staking_info = $var;

        return $this;
    }

}

