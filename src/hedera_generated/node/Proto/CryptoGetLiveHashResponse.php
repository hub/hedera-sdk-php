<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: crypto_get_live_hash.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Return the full live hash associated to an account, if it is present.
 * > Note that to generate a state proof of the _absence_ of a live hash from
 * > an account a transaction MUST retrieve a state proof of the `Account`
 * > with its list of live hashes.
 *
 * Generated from protobuf message <code>proto.CryptoGetLiveHashResponse</code>
 */
class CryptoGetLiveHashResponse extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * The standard response information for queries.<br/>
     * This includes the values requested in the `QueryHeader`
     * (cost, state proof, both, or neither).
     *
     * Generated from protobuf field <code>.proto.ResponseHeader header = 1;</code>
     */
    protected $header = null;
    /**
     **
     * The requested live hash, if found.
     *
     * Generated from protobuf field <code>.proto.LiveHash liveHash = 2;</code>
     */
    protected $liveHash = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\ResponseHeader $header
     *          *
     *           The standard response information for queries.<br/>
     *           This includes the values requested in the `QueryHeader`
     *           (cost, state proof, both, or neither).
     *     @type \Proto\LiveHash $liveHash
     *          *
     *           The requested live hash, if found.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\CryptoGetLiveHash::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * The standard response information for queries.<br/>
     * This includes the values requested in the `QueryHeader`
     * (cost, state proof, both, or neither).
     *
     * Generated from protobuf field <code>.proto.ResponseHeader header = 1;</code>
     * @return \Proto\ResponseHeader|null
     */
    public function getHeader()
    {
        return $this->header;
    }

    public function hasHeader()
    {
        return isset($this->header);
    }

    public function clearHeader()
    {
        unset($this->header);
    }

    /**
     **
     * The standard response information for queries.<br/>
     * This includes the values requested in the `QueryHeader`
     * (cost, state proof, both, or neither).
     *
     * Generated from protobuf field <code>.proto.ResponseHeader header = 1;</code>
     * @param \Proto\ResponseHeader $var
     * @return $this
     */
    public function setHeader($var)
    {
        GPBUtil::checkMessage($var, \Proto\ResponseHeader::class);
        $this->header = $var;

        return $this;
    }

    /**
     **
     * The requested live hash, if found.
     *
     * Generated from protobuf field <code>.proto.LiveHash liveHash = 2;</code>
     * @return \Proto\LiveHash|null
     */
    public function getLiveHash()
    {
        return $this->liveHash;
    }

    public function hasLiveHash()
    {
        return isset($this->liveHash);
    }

    public function clearLiveHash()
    {
        unset($this->liveHash);
    }

    /**
     **
     * The requested live hash, if found.
     *
     * Generated from protobuf field <code>.proto.LiveHash liveHash = 2;</code>
     * @param \Proto\LiveHash $var
     * @return $this
     */
    public function setLiveHash($var)
    {
        GPBUtil::checkMessage($var, \Proto\LiveHash::class);
        $this->liveHash = $var;

        return $this;
    }

}

