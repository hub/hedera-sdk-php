<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: basic_types.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * A set of fee schedules covering all transaction types and query types, along
 * with a specific time at which this fee schedule will expire.
 * Nodes SHALL use the most recent unexpired fee schedule to determine the fees
 * for all transactions based on various resource components imputed to each
 * transaction.
 *
 * Generated from protobuf message <code>proto.FeeSchedule</code>
 */
class FeeSchedule extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * Sets of fee coefficients for various transaction or query types.
     *
     * Generated from protobuf field <code>repeated .proto.TransactionFeeSchedule transactionFeeSchedule = 1;</code>
     */
    private $transactionFeeSchedule;
    /**
     **
     * A time, in seconds since the `epoch`, when this fee schedule
     * will expire.
     * <p>
     * For this purpose, `epoch` SHALL be the UNIX epoch
     * with 0 at `1970-01-01T00:00:00.000Z`.
     *
     * Generated from protobuf field <code>.proto.TimestampSeconds expiryTime = 2;</code>
     */
    protected $expiryTime = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\TransactionFeeSchedule[] $transactionFeeSchedule
     *          *
     *           Sets of fee coefficients for various transaction or query types.
     *     @type \Proto\TimestampSeconds $expiryTime
     *          *
     *           A time, in seconds since the `epoch`, when this fee schedule
     *           will expire.
     *           <p>
     *           For this purpose, `epoch` SHALL be the UNIX epoch
     *           with 0 at `1970-01-01T00:00:00.000Z`.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\BasicTypes::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * Sets of fee coefficients for various transaction or query types.
     *
     * Generated from protobuf field <code>repeated .proto.TransactionFeeSchedule transactionFeeSchedule = 1;</code>
     * @return RepeatedField<\Proto\TransactionFeeSchedule>
     */
    public function getTransactionFeeSchedule()
    {
        return $this->transactionFeeSchedule;
    }

    /**
     **
     * Sets of fee coefficients for various transaction or query types.
     *
     * Generated from protobuf field <code>repeated .proto.TransactionFeeSchedule transactionFeeSchedule = 1;</code>
     * @param \Proto\TransactionFeeSchedule[] $var
     * @return $this
     */
    public function setTransactionFeeSchedule($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Proto\TransactionFeeSchedule::class);
        $this->transactionFeeSchedule = $arr;

        return $this;
    }

    /**
     **
     * A time, in seconds since the `epoch`, when this fee schedule
     * will expire.
     * <p>
     * For this purpose, `epoch` SHALL be the UNIX epoch
     * with 0 at `1970-01-01T00:00:00.000Z`.
     *
     * Generated from protobuf field <code>.proto.TimestampSeconds expiryTime = 2;</code>
     * @return \Proto\TimestampSeconds|null
     */
    public function getExpiryTime()
    {
        return $this->expiryTime;
    }

    public function hasExpiryTime()
    {
        return isset($this->expiryTime);
    }

    public function clearExpiryTime()
    {
        unset($this->expiryTime);
    }

    /**
     **
     * A time, in seconds since the `epoch`, when this fee schedule
     * will expire.
     * <p>
     * For this purpose, `epoch` SHALL be the UNIX epoch
     * with 0 at `1970-01-01T00:00:00.000Z`.
     *
     * Generated from protobuf field <code>.proto.TimestampSeconds expiryTime = 2;</code>
     * @param \Proto\TimestampSeconds $var
     * @return $this
     */
    public function setExpiryTime($var)
    {
        GPBUtil::checkMessage($var, \Proto\TimestampSeconds::class);
        $this->expiryTime = $var;

        return $this;
    }

}

