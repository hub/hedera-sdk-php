<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: contract_call_local.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Call a view function of a given smart contract<br/>
 * The call must provide function parameter inputs as needed.<br/>
 * This is potentially useful for calling view functions that will not revert
 * when executed in a static EVM context. Many such use cases will be better
 * served by using a Mirror Node API, however.
 * This is performed locally on the particular node that the client is
 * communicating with. Executing the call locally is faster and less costly,
 * but imposes certain restrictions.<br/>
 * The call MUST NOT change the state of the contract instance. This also
 * precludes any expenditure or transfer of HBAR or other tokens.<br/>
 * The call SHALL NOT have a separate consensus timestamp.<br/>
 * The call SHALL NOT generate a record nor a receipt.<br/>
 * The response SHALL contain the output returned by the function call.<br/>
 * Any contract call that would use the `STATICCALL` opcode MAY be called via
 * contract call local with performance and cost benefits.
 * Unlike a ContractCall transaction, the node SHALL always consume the
 * _entire_ amount of offered "gas" in determining the fee for this query, so
 * accurate gas estimation is important.
 *
 * Generated from protobuf message <code>proto.ContractCallLocalQuery</code>
 */
class ContractCallLocalQuery extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * Standard information sent with every query operation.<br/>
     * This includes the signed payment and what kind of response is requested
     * (cost, state proof, both, or neither).
     * <p>
     * The payment MUST be sufficient for the base fees _and_ the full amount
     * in the `gas` field.
     *
     * Generated from protobuf field <code>.proto.QueryHeader header = 1;</code>
     */
    protected $header = null;
    /**
     **
     * The ID of a smart contract to call.
     *
     * Generated from protobuf field <code>.proto.ContractID contractID = 2;</code>
     */
    protected $contractID = null;
    /**
     **
     * The amount of "gas" to use for this call.
     * <p>
     * This transaction SHALL consume all of the gas offered and charge the
     * corresponding fee according to the current exchange rate between
     * HBAR and "gas".
     *
     * Generated from protobuf field <code>int64 gas = 3;</code>
     */
    protected $gas = 0;
    /**
     **
     * The smart contract function to call, and the parameters to pass to that
     * function.
     * <p>
     * These SHALL be presented in EVM bytecode function call format.
     *
     * Generated from protobuf field <code>bytes functionParameters = 4;</code>
     */
    protected $functionParameters = '';
    /**
     **
     * Do not use this field; it is ignored in the current software.
     * <p>
     * The maximum number of bytes that the result might include.<br/>
     * The call will fail if it would have returned more than this number
     * of bytes.
     *
     * Generated from protobuf field <code>int64 maxResultSize = 5 [deprecated = true];</code>
     * @deprecated
     */
    protected $maxResultSize = 0;
    /**
     **
     * The account that is the "sender" for this contract call.
     * <p>
     * If this is not set it SHALL be interpreted as the accountId from the
     * associated transactionId.<br/>
     * If this is set then either the associated transaction or the foreign
     * transaction data MUST be signed by the referenced account.
     *
     * Generated from protobuf field <code>.proto.AccountID sender_id = 6;</code>
     */
    protected $sender_id = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\QueryHeader $header
     *          *
     *           Standard information sent with every query operation.<br/>
     *           This includes the signed payment and what kind of response is requested
     *           (cost, state proof, both, or neither).
     *           <p>
     *           The payment MUST be sufficient for the base fees _and_ the full amount
     *           in the `gas` field.
     *     @type \Proto\ContractID $contractID
     *          *
     *           The ID of a smart contract to call.
     *     @type int|string $gas
     *          *
     *           The amount of "gas" to use for this call.
     *           <p>
     *           This transaction SHALL consume all of the gas offered and charge the
     *           corresponding fee according to the current exchange rate between
     *           HBAR and "gas".
     *     @type string $functionParameters
     *          *
     *           The smart contract function to call, and the parameters to pass to that
     *           function.
     *           <p>
     *           These SHALL be presented in EVM bytecode function call format.
     *     @type int|string $maxResultSize
     *          *
     *           Do not use this field; it is ignored in the current software.
     *           <p>
     *           The maximum number of bytes that the result might include.<br/>
     *           The call will fail if it would have returned more than this number
     *           of bytes.
     *     @type \Proto\AccountID $sender_id
     *          *
     *           The account that is the "sender" for this contract call.
     *           <p>
     *           If this is not set it SHALL be interpreted as the accountId from the
     *           associated transactionId.<br/>
     *           If this is set then either the associated transaction or the foreign
     *           transaction data MUST be signed by the referenced account.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ContractCallLocal::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * Standard information sent with every query operation.<br/>
     * This includes the signed payment and what kind of response is requested
     * (cost, state proof, both, or neither).
     * <p>
     * The payment MUST be sufficient for the base fees _and_ the full amount
     * in the `gas` field.
     *
     * Generated from protobuf field <code>.proto.QueryHeader header = 1;</code>
     * @return \Proto\QueryHeader|null
     */
    public function getHeader()
    {
        return $this->header;
    }

    public function hasHeader()
    {
        return isset($this->header);
    }

    public function clearHeader()
    {
        unset($this->header);
    }

    /**
     **
     * Standard information sent with every query operation.<br/>
     * This includes the signed payment and what kind of response is requested
     * (cost, state proof, both, or neither).
     * <p>
     * The payment MUST be sufficient for the base fees _and_ the full amount
     * in the `gas` field.
     *
     * Generated from protobuf field <code>.proto.QueryHeader header = 1;</code>
     * @param \Proto\QueryHeader $var
     * @return $this
     */
    public function setHeader($var)
    {
        GPBUtil::checkMessage($var, \Proto\QueryHeader::class);
        $this->header = $var;

        return $this;
    }

    /**
     **
     * The ID of a smart contract to call.
     *
     * Generated from protobuf field <code>.proto.ContractID contractID = 2;</code>
     * @return \Proto\ContractID|null
     */
    public function getContractID()
    {
        return $this->contractID;
    }

    public function hasContractID()
    {
        return isset($this->contractID);
    }

    public function clearContractID()
    {
        unset($this->contractID);
    }

    /**
     **
     * The ID of a smart contract to call.
     *
     * Generated from protobuf field <code>.proto.ContractID contractID = 2;</code>
     * @param \Proto\ContractID $var
     * @return $this
     */
    public function setContractID($var)
    {
        GPBUtil::checkMessage($var, \Proto\ContractID::class);
        $this->contractID = $var;

        return $this;
    }

    /**
     **
     * The amount of "gas" to use for this call.
     * <p>
     * This transaction SHALL consume all of the gas offered and charge the
     * corresponding fee according to the current exchange rate between
     * HBAR and "gas".
     *
     * Generated from protobuf field <code>int64 gas = 3;</code>
     * @return int|string
     */
    public function getGas()
    {
        return $this->gas;
    }

    /**
     **
     * The amount of "gas" to use for this call.
     * <p>
     * This transaction SHALL consume all of the gas offered and charge the
     * corresponding fee according to the current exchange rate between
     * HBAR and "gas".
     *
     * Generated from protobuf field <code>int64 gas = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setGas($var)
    {
        GPBUtil::checkInt64($var);
        $this->gas = $var;

        return $this;
    }

    /**
     **
     * The smart contract function to call, and the parameters to pass to that
     * function.
     * <p>
     * These SHALL be presented in EVM bytecode function call format.
     *
     * Generated from protobuf field <code>bytes functionParameters = 4;</code>
     * @return string
     */
    public function getFunctionParameters()
    {
        return $this->functionParameters;
    }

    /**
     **
     * The smart contract function to call, and the parameters to pass to that
     * function.
     * <p>
     * These SHALL be presented in EVM bytecode function call format.
     *
     * Generated from protobuf field <code>bytes functionParameters = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setFunctionParameters($var)
    {
        GPBUtil::checkString($var, False);
        $this->functionParameters = $var;

        return $this;
    }

    /**
     **
     * Do not use this field; it is ignored in the current software.
     * <p>
     * The maximum number of bytes that the result might include.<br/>
     * The call will fail if it would have returned more than this number
     * of bytes.
     *
     * Generated from protobuf field <code>int64 maxResultSize = 5 [deprecated = true];</code>
     * @return int|string
     * @deprecated
     */
    public function getMaxResultSize()
    {
        if ($this->maxResultSize !== 0) {
            @trigger_error('maxResultSize is deprecated.', E_USER_DEPRECATED);
        }
        return $this->maxResultSize;
    }

    /**
     **
     * Do not use this field; it is ignored in the current software.
     * <p>
     * The maximum number of bytes that the result might include.<br/>
     * The call will fail if it would have returned more than this number
     * of bytes.
     *
     * Generated from protobuf field <code>int64 maxResultSize = 5 [deprecated = true];</code>
     * @param int|string $var
     * @return $this
     * @deprecated
     */
    public function setMaxResultSize($var)
    {
        @trigger_error('maxResultSize is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkInt64($var);
        $this->maxResultSize = $var;

        return $this;
    }

    /**
     **
     * The account that is the "sender" for this contract call.
     * <p>
     * If this is not set it SHALL be interpreted as the accountId from the
     * associated transactionId.<br/>
     * If this is set then either the associated transaction or the foreign
     * transaction data MUST be signed by the referenced account.
     *
     * Generated from protobuf field <code>.proto.AccountID sender_id = 6;</code>
     * @return \Proto\AccountID|null
     */
    public function getSenderId()
    {
        return $this->sender_id;
    }

    public function hasSenderId()
    {
        return isset($this->sender_id);
    }

    public function clearSenderId()
    {
        unset($this->sender_id);
    }

    /**
     **
     * The account that is the "sender" for this contract call.
     * <p>
     * If this is not set it SHALL be interpreted as the accountId from the
     * associated transactionId.<br/>
     * If this is set then either the associated transaction or the foreign
     * transaction data MUST be signed by the referenced account.
     *
     * Generated from protobuf field <code>.proto.AccountID sender_id = 6;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setSenderId($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->sender_id = $var;

        return $this;
    }

}

