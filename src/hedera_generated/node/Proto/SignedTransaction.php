<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: transaction_contents.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * A combination transaction bytes and a map of signatures.<br/>
 * This message contains a serialized `TransactionBody` in a byte array
 * and a `SignatureMap` that contains all of the signatures offered to
 * authenticate the transaction.
 * ### Block Stream Effects
 * This content is recorded in the record stream exactly as received.
 *
 * Generated from protobuf message <code>proto.SignedTransaction</code>
 */
class SignedTransaction extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A byte array containing a serialized `TransactionBody`.
     * <p>
     * This content is what the signatures in `sigMap` MUST sign.
     *
     * Generated from protobuf field <code>bytes bodyBytes = 1;</code>
     */
    protected $bodyBytes = '';
    /**
     **
     * A set of cryptographic signatures.
     * <p>
     * This set MUST contain all signatures required to authenticate
     * and authorize the transaction.<br/>
     * This set MAY contain additional signatures.
     *
     * Generated from protobuf field <code>.proto.SignatureMap sigMap = 2;</code>
     */
    protected $sigMap = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $bodyBytes
     *          *
     *           A byte array containing a serialized `TransactionBody`.
     *           <p>
     *           This content is what the signatures in `sigMap` MUST sign.
     *     @type \Proto\SignatureMap $sigMap
     *          *
     *           A set of cryptographic signatures.
     *           <p>
     *           This set MUST contain all signatures required to authenticate
     *           and authorize the transaction.<br/>
     *           This set MAY contain additional signatures.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\TransactionContents::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A byte array containing a serialized `TransactionBody`.
     * <p>
     * This content is what the signatures in `sigMap` MUST sign.
     *
     * Generated from protobuf field <code>bytes bodyBytes = 1;</code>
     * @return string
     */
    public function getBodyBytes()
    {
        return $this->bodyBytes;
    }

    /**
     **
     * A byte array containing a serialized `TransactionBody`.
     * <p>
     * This content is what the signatures in `sigMap` MUST sign.
     *
     * Generated from protobuf field <code>bytes bodyBytes = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setBodyBytes($var)
    {
        GPBUtil::checkString($var, False);
        $this->bodyBytes = $var;

        return $this;
    }

    /**
     **
     * A set of cryptographic signatures.
     * <p>
     * This set MUST contain all signatures required to authenticate
     * and authorize the transaction.<br/>
     * This set MAY contain additional signatures.
     *
     * Generated from protobuf field <code>.proto.SignatureMap sigMap = 2;</code>
     * @return \Proto\SignatureMap|null
     */
    public function getSigMap()
    {
        return $this->sigMap;
    }

    public function hasSigMap()
    {
        return isset($this->sigMap);
    }

    public function clearSigMap()
    {
        unset($this->sigMap);
    }

    /**
     **
     * A set of cryptographic signatures.
     * <p>
     * This set MUST contain all signatures required to authenticate
     * and authorize the transaction.<br/>
     * This set MAY contain additional signatures.
     *
     * Generated from protobuf field <code>.proto.SignatureMap sigMap = 2;</code>
     * @param \Proto\SignatureMap $var
     * @return $this
     */
    public function setSigMap($var)
    {
        GPBUtil::checkMessage($var, \Proto\SignatureMap::class);
        $this->sigMap = $var;

        return $this;
    }

}

