<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: custom_fees.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * A fixed fee to assess for each token transfer, regardless of the
 * amount transferred.<br/>
 * This fee type describes a fixed fee for each transfer of a token type.
 * The fee SHALL be charged to the `sender` for the token transfer
 * transaction.<br/>
 * This fee MAY be assessed in HBAR, the token type transferred, or any
 * other token type, as determined by the `denominating_token_id` field.
 *
 * Generated from protobuf message <code>proto.FixedFee</code>
 */
class FixedFee extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * The amount to assess for each transfer.
     * <p>
     * This value MUST be greater than `0`.<br/>
     * This amount is expressed in units of 10<sup>-decimals</sup> tokens.
     *
     * Generated from protobuf field <code>int64 amount = 1;</code>
     */
    protected $amount = 0;
    /**
     **
     * The token type used to pay the assessed fee.
     * <p>
     * If this is unset, the fee SHALL be assessed in HBAR.<br/>
     * If this is set, the fee SHALL be assessed in the token identified.
     * This MAY be any token type. Custom fees assessed in other token types
     * are more likely to fail, however, and it is RECOMMENDED that token
     * creators denominate custom fees in the transferred token, HBAR, or
     * well documented and closely related token types.<br/>
     * If this value is set to `0.0.0` in the `tokenCreate` transaction, it
     * SHALL be replaced with the `TokenID` of the newly created token.
     *
     * Generated from protobuf field <code>.proto.TokenID denominating_token_id = 2;</code>
     */
    protected $denominating_token_id = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $amount
     *          *
     *           The amount to assess for each transfer.
     *           <p>
     *           This value MUST be greater than `0`.<br/>
     *           This amount is expressed in units of 10<sup>-decimals</sup> tokens.
     *     @type \Proto\TokenID $denominating_token_id
     *          *
     *           The token type used to pay the assessed fee.
     *           <p>
     *           If this is unset, the fee SHALL be assessed in HBAR.<br/>
     *           If this is set, the fee SHALL be assessed in the token identified.
     *           This MAY be any token type. Custom fees assessed in other token types
     *           are more likely to fail, however, and it is RECOMMENDED that token
     *           creators denominate custom fees in the transferred token, HBAR, or
     *           well documented and closely related token types.<br/>
     *           If this value is set to `0.0.0` in the `tokenCreate` transaction, it
     *           SHALL be replaced with the `TokenID` of the newly created token.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\CustomFees::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * The amount to assess for each transfer.
     * <p>
     * This value MUST be greater than `0`.<br/>
     * This amount is expressed in units of 10<sup>-decimals</sup> tokens.
     *
     * Generated from protobuf field <code>int64 amount = 1;</code>
     * @return int|string
     */
    public function getAmount()
    {
        return $this->amount;
    }

    /**
     **
     * The amount to assess for each transfer.
     * <p>
     * This value MUST be greater than `0`.<br/>
     * This amount is expressed in units of 10<sup>-decimals</sup> tokens.
     *
     * Generated from protobuf field <code>int64 amount = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setAmount($var)
    {
        GPBUtil::checkInt64($var);
        $this->amount = $var;

        return $this;
    }

    /**
     **
     * The token type used to pay the assessed fee.
     * <p>
     * If this is unset, the fee SHALL be assessed in HBAR.<br/>
     * If this is set, the fee SHALL be assessed in the token identified.
     * This MAY be any token type. Custom fees assessed in other token types
     * are more likely to fail, however, and it is RECOMMENDED that token
     * creators denominate custom fees in the transferred token, HBAR, or
     * well documented and closely related token types.<br/>
     * If this value is set to `0.0.0` in the `tokenCreate` transaction, it
     * SHALL be replaced with the `TokenID` of the newly created token.
     *
     * Generated from protobuf field <code>.proto.TokenID denominating_token_id = 2;</code>
     * @return \Proto\TokenID|null
     */
    public function getDenominatingTokenId()
    {
        return $this->denominating_token_id;
    }

    public function hasDenominatingTokenId()
    {
        return isset($this->denominating_token_id);
    }

    public function clearDenominatingTokenId()
    {
        unset($this->denominating_token_id);
    }

    /**
     **
     * The token type used to pay the assessed fee.
     * <p>
     * If this is unset, the fee SHALL be assessed in HBAR.<br/>
     * If this is set, the fee SHALL be assessed in the token identified.
     * This MAY be any token type. Custom fees assessed in other token types
     * are more likely to fail, however, and it is RECOMMENDED that token
     * creators denominate custom fees in the transferred token, HBAR, or
     * well documented and closely related token types.<br/>
     * If this value is set to `0.0.0` in the `tokenCreate` transaction, it
     * SHALL be replaced with the `TokenID` of the newly created token.
     *
     * Generated from protobuf field <code>.proto.TokenID denominating_token_id = 2;</code>
     * @param \Proto\TokenID $var
     * @return $this
     */
    public function setDenominatingTokenId($var)
    {
        GPBUtil::checkMessage($var, \Proto\TokenID::class);
        $this->denominating_token_id = $var;

        return $this;
    }

}

