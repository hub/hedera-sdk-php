<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: get_account_details.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Permission granted by one account (the "funding" account) to another
 * account (the "spender" account) that allows the spender to spend a
 * specified amount of a specific non-HBAR fungible token from the
 * balance owned by the funding account.
 * An allowance SHALL NOT transfer any tokens directly, it only permits
 * transactions signed only by the spender account to transfer tokens
 * of the specified type, up to the amount specified, from the funding account.
 * Once the specified amount is spent, the allowance SHALL be consumed
 * and a new allowance SHALL be required before that spending account
 * may spend additional tokens from the funding account.
 *
 * Generated from protobuf message <code>proto.GrantedTokenAllowance</code>
 */
class GrantedTokenAllowance extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * The identifier for the token associated with this allowance.
     * <p>
     * This token MUST be a fungible/common token.
     *
     * Generated from protobuf field <code>.proto.TokenID token_id = 1;</code>
     */
    protected $token_id = null;
    /**
     **
     * The identifier for the spending account associated with this allowance.
     * <p>
     * This account SHALL be permitted to sign transactions to spend tokens
     * of the associated token type from the funding/allowing account.<br/>
     * This permission SHALL be limited to no more than the specified `amount`.
     *
     * Generated from protobuf field <code>.proto.AccountID spender = 2;</code>
     */
    protected $spender = null;
    /**
     * The maximum amount that the spender account may transfer within
     * the scope of this allowance.
     * <p>
     * This allowance SHALL be consumed if any combination of transfers
     * authorized via this allowance meet this value in total.<br/>
     * This value MUST be specified in the smallest units of the relevant
     * token (i.e. 10<sup>-decimals</sup> whole tokens).
     *
     * Generated from protobuf field <code>int64 amount = 3;</code>
     */
    protected $amount = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\TokenID $token_id
     *          *
     *           The identifier for the token associated with this allowance.
     *           <p>
     *           This token MUST be a fungible/common token.
     *     @type \Proto\AccountID $spender
     *          *
     *           The identifier for the spending account associated with this allowance.
     *           <p>
     *           This account SHALL be permitted to sign transactions to spend tokens
     *           of the associated token type from the funding/allowing account.<br/>
     *           This permission SHALL be limited to no more than the specified `amount`.
     *     @type int|string $amount
     *           The maximum amount that the spender account may transfer within
     *           the scope of this allowance.
     *           <p>
     *           This allowance SHALL be consumed if any combination of transfers
     *           authorized via this allowance meet this value in total.<br/>
     *           This value MUST be specified in the smallest units of the relevant
     *           token (i.e. 10<sup>-decimals</sup> whole tokens).
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\GetAccountDetails::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * The identifier for the token associated with this allowance.
     * <p>
     * This token MUST be a fungible/common token.
     *
     * Generated from protobuf field <code>.proto.TokenID token_id = 1;</code>
     * @return \Proto\TokenID|null
     */
    public function getTokenId()
    {
        return $this->token_id;
    }

    public function hasTokenId()
    {
        return isset($this->token_id);
    }

    public function clearTokenId()
    {
        unset($this->token_id);
    }

    /**
     **
     * The identifier for the token associated with this allowance.
     * <p>
     * This token MUST be a fungible/common token.
     *
     * Generated from protobuf field <code>.proto.TokenID token_id = 1;</code>
     * @param \Proto\TokenID $var
     * @return $this
     */
    public function setTokenId($var)
    {
        GPBUtil::checkMessage($var, \Proto\TokenID::class);
        $this->token_id = $var;

        return $this;
    }

    /**
     **
     * The identifier for the spending account associated with this allowance.
     * <p>
     * This account SHALL be permitted to sign transactions to spend tokens
     * of the associated token type from the funding/allowing account.<br/>
     * This permission SHALL be limited to no more than the specified `amount`.
     *
     * Generated from protobuf field <code>.proto.AccountID spender = 2;</code>
     * @return \Proto\AccountID|null
     */
    public function getSpender()
    {
        return $this->spender;
    }

    public function hasSpender()
    {
        return isset($this->spender);
    }

    public function clearSpender()
    {
        unset($this->spender);
    }

    /**
     **
     * The identifier for the spending account associated with this allowance.
     * <p>
     * This account SHALL be permitted to sign transactions to spend tokens
     * of the associated token type from the funding/allowing account.<br/>
     * This permission SHALL be limited to no more than the specified `amount`.
     *
     * Generated from protobuf field <code>.proto.AccountID spender = 2;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setSpender($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->spender = $var;

        return $this;
    }

    /**
     * The maximum amount that the spender account may transfer within
     * the scope of this allowance.
     * <p>
     * This allowance SHALL be consumed if any combination of transfers
     * authorized via this allowance meet this value in total.<br/>
     * This value MUST be specified in the smallest units of the relevant
     * token (i.e. 10<sup>-decimals</sup> whole tokens).
     *
     * Generated from protobuf field <code>int64 amount = 3;</code>
     * @return int|string
     */
    public function getAmount()
    {
        return $this->amount;
    }

    /**
     * The maximum amount that the spender account may transfer within
     * the scope of this allowance.
     * <p>
     * This allowance SHALL be consumed if any combination of transfers
     * authorized via this allowance meet this value in total.<br/>
     * This value MUST be specified in the smallest units of the relevant
     * token (i.e. 10<sup>-decimals</sup> whole tokens).
     *
     * Generated from protobuf field <code>int64 amount = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setAmount($var)
    {
        GPBUtil::checkInt64($var);
        $this->amount = $var;

        return $this;
    }

}

