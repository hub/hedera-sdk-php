<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: crypto_approve_allowance.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * An approved allowance of non-fungible tokens.<br/>
 * This type of allowance may permit transfers for one or more individual
 * unique tokens, or may permit transfers for all unique tokens of the
 * specified type.
 * If `owner` is not set, the effective `owner` SHALL be the `payer` for the
 * enclosing transaction.<br/>
 * The `spender` MUST be specified and MUST be a valid account.<br/>
 * If `approve_for_all` is set, then `serial_numbers` SHOULD be empty
 * and SHALL be ignored.
 * If `approve_for_all` is unset, then `serial_numbers` MUST NOT be empty.
 *
 * Generated from protobuf message <code>proto.NftAllowance</code>
 */
class NftAllowance extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A token identifier.<br/>
     * This identifies the type of token the `spender` is permitted to
     * transfer from the `owner`.
     * <p>
     * The identified token type MUST be a non-fungible/unique token.
     *
     * Generated from protobuf field <code>.proto.TokenID tokenId = 1;</code>
     */
    protected $tokenId = null;
    /**
     **
     * An owner account identifier.<br/>
     * This is the account identifier of the account granting an allowance
     * for the `spender` to transfer tokens held by this account.
     *
     * Generated from protobuf field <code>.proto.AccountID owner = 2;</code>
     */
    protected $owner = null;
    /**
     **
     * A spender account identifier.<br/>
     * This is the account identifier of the account permitted to transfer
     * tokens held by the `owner`.
     *
     * Generated from protobuf field <code>.proto.AccountID spender = 3;</code>
     */
    protected $spender = null;
    /**
     **
     * A list of token serial numbers.<br/>
     * The list of serial numbers that the spender is permitted to transfer.
     * <p>
     * The `owner` MUST currently hold each token identified in this list.
     *
     * Generated from protobuf field <code>repeated int64 serial_numbers = 4;</code>
     */
    private $serial_numbers;
    /**
     **
     * A flag indicating this allowance applies to all tokens of the
     * specified (non-fungible/unique) type.
     * <p>
     * If true, the `spender` SHALL be permitted to transfer any or all
     * of the `owner`'s tokens of the specified token type.
     * This SHALL apply not only to currently owned tokens, but to all
     * such tokens acquired in the future, unless the
     * allowance is `delete`d.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue approved_for_all = 5;</code>
     */
    protected $approved_for_all = null;
    /**
     **
     * A spender-owner account identifier.<br/>
     * This account identifier identifies a `spender` for whom an existing
     * `approved_for_all` allowance was previously created. This enables
     * an account with such broad access to grant allowances to transfer
     * individual tokens from the original owner without involving that
     * original owner.
     * <p>
     * If this is set, the account identified MUST sign this transaction, but
     * the `owner` account MAY NOT sign this transaction.<br/>
     * If this is set, there MUST exist an active `approved_for_all`
     * allowance from the `owner` for the `delegating_spender` to transfer
     * all tokens of the type identified by the `tokenId` field.<br/>
     * If this value is set, the `approved_for_all` flag MUST be `false`.
     *
     * Generated from protobuf field <code>.proto.AccountID delegating_spender = 6;</code>
     */
    protected $delegating_spender = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\TokenID $tokenId
     *          *
     *           A token identifier.<br/>
     *           This identifies the type of token the `spender` is permitted to
     *           transfer from the `owner`.
     *           <p>
     *           The identified token type MUST be a non-fungible/unique token.
     *     @type \Proto\AccountID $owner
     *          *
     *           An owner account identifier.<br/>
     *           This is the account identifier of the account granting an allowance
     *           for the `spender` to transfer tokens held by this account.
     *     @type \Proto\AccountID $spender
     *          *
     *           A spender account identifier.<br/>
     *           This is the account identifier of the account permitted to transfer
     *           tokens held by the `owner`.
     *     @type int[]|string[] $serial_numbers
     *          *
     *           A list of token serial numbers.<br/>
     *           The list of serial numbers that the spender is permitted to transfer.
     *           <p>
     *           The `owner` MUST currently hold each token identified in this list.
     *     @type \Google\Protobuf\BoolValue $approved_for_all
     *          *
     *           A flag indicating this allowance applies to all tokens of the
     *           specified (non-fungible/unique) type.
     *           <p>
     *           If true, the `spender` SHALL be permitted to transfer any or all
     *           of the `owner`'s tokens of the specified token type.
     *           This SHALL apply not only to currently owned tokens, but to all
     *           such tokens acquired in the future, unless the
     *           allowance is `delete`d.
     *     @type \Proto\AccountID $delegating_spender
     *          *
     *           A spender-owner account identifier.<br/>
     *           This account identifier identifies a `spender` for whom an existing
     *           `approved_for_all` allowance was previously created. This enables
     *           an account with such broad access to grant allowances to transfer
     *           individual tokens from the original owner without involving that
     *           original owner.
     *           <p>
     *           If this is set, the account identified MUST sign this transaction, but
     *           the `owner` account MAY NOT sign this transaction.<br/>
     *           If this is set, there MUST exist an active `approved_for_all`
     *           allowance from the `owner` for the `delegating_spender` to transfer
     *           all tokens of the type identified by the `tokenId` field.<br/>
     *           If this value is set, the `approved_for_all` flag MUST be `false`.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\CryptoApproveAllowance::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A token identifier.<br/>
     * This identifies the type of token the `spender` is permitted to
     * transfer from the `owner`.
     * <p>
     * The identified token type MUST be a non-fungible/unique token.
     *
     * Generated from protobuf field <code>.proto.TokenID tokenId = 1;</code>
     * @return \Proto\TokenID|null
     */
    public function getTokenId()
    {
        return $this->tokenId;
    }

    public function hasTokenId()
    {
        return isset($this->tokenId);
    }

    public function clearTokenId()
    {
        unset($this->tokenId);
    }

    /**
     **
     * A token identifier.<br/>
     * This identifies the type of token the `spender` is permitted to
     * transfer from the `owner`.
     * <p>
     * The identified token type MUST be a non-fungible/unique token.
     *
     * Generated from protobuf field <code>.proto.TokenID tokenId = 1;</code>
     * @param \Proto\TokenID $var
     * @return $this
     */
    public function setTokenId($var)
    {
        GPBUtil::checkMessage($var, \Proto\TokenID::class);
        $this->tokenId = $var;

        return $this;
    }

    /**
     **
     * An owner account identifier.<br/>
     * This is the account identifier of the account granting an allowance
     * for the `spender` to transfer tokens held by this account.
     *
     * Generated from protobuf field <code>.proto.AccountID owner = 2;</code>
     * @return \Proto\AccountID|null
     */
    public function getOwner()
    {
        return $this->owner;
    }

    public function hasOwner()
    {
        return isset($this->owner);
    }

    public function clearOwner()
    {
        unset($this->owner);
    }

    /**
     **
     * An owner account identifier.<br/>
     * This is the account identifier of the account granting an allowance
     * for the `spender` to transfer tokens held by this account.
     *
     * Generated from protobuf field <code>.proto.AccountID owner = 2;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setOwner($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->owner = $var;

        return $this;
    }

    /**
     **
     * A spender account identifier.<br/>
     * This is the account identifier of the account permitted to transfer
     * tokens held by the `owner`.
     *
     * Generated from protobuf field <code>.proto.AccountID spender = 3;</code>
     * @return \Proto\AccountID|null
     */
    public function getSpender()
    {
        return $this->spender;
    }

    public function hasSpender()
    {
        return isset($this->spender);
    }

    public function clearSpender()
    {
        unset($this->spender);
    }

    /**
     **
     * A spender account identifier.<br/>
     * This is the account identifier of the account permitted to transfer
     * tokens held by the `owner`.
     *
     * Generated from protobuf field <code>.proto.AccountID spender = 3;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setSpender($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->spender = $var;

        return $this;
    }

    /**
     **
     * A list of token serial numbers.<br/>
     * The list of serial numbers that the spender is permitted to transfer.
     * <p>
     * The `owner` MUST currently hold each token identified in this list.
     *
     * Generated from protobuf field <code>repeated int64 serial_numbers = 4;</code>
     * @return RepeatedField<int>|RepeatedField<string>
     */
    public function getSerialNumbers()
    {
        return $this->serial_numbers;
    }

    /**
     **
     * A list of token serial numbers.<br/>
     * The list of serial numbers that the spender is permitted to transfer.
     * <p>
     * The `owner` MUST currently hold each token identified in this list.
     *
     * Generated from protobuf field <code>repeated int64 serial_numbers = 4;</code>
     * @param int[]|string[] $var
     * @return $this
     */
    public function setSerialNumbers($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::INT64);
        $this->serial_numbers = $arr;

        return $this;
    }

    /**
     **
     * A flag indicating this allowance applies to all tokens of the
     * specified (non-fungible/unique) type.
     * <p>
     * If true, the `spender` SHALL be permitted to transfer any or all
     * of the `owner`'s tokens of the specified token type.
     * This SHALL apply not only to currently owned tokens, but to all
     * such tokens acquired in the future, unless the
     * allowance is `delete`d.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue approved_for_all = 5;</code>
     * @return \Google\Protobuf\BoolValue|null
     */
    public function getApprovedForAll()
    {
        return $this->approved_for_all;
    }

    public function hasApprovedForAll()
    {
        return isset($this->approved_for_all);
    }

    public function clearApprovedForAll()
    {
        unset($this->approved_for_all);
    }

    /**
     * Returns the unboxed value from <code>getApprovedForAll()</code>

     **
     * A flag indicating this allowance applies to all tokens of the
     * specified (non-fungible/unique) type.
     * <p>
     * If true, the `spender` SHALL be permitted to transfer any or all
     * of the `owner`'s tokens of the specified token type.
     * This SHALL apply not only to currently owned tokens, but to all
     * such tokens acquired in the future, unless the
     * allowance is `delete`d.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue approved_for_all = 5;</code>
     * @return bool|null
     */
    public function getApprovedForAllUnwrapped()
    {
        return $this->readWrapperValue("approved_for_all");
    }

    /**
     **
     * A flag indicating this allowance applies to all tokens of the
     * specified (non-fungible/unique) type.
     * <p>
     * If true, the `spender` SHALL be permitted to transfer any or all
     * of the `owner`'s tokens of the specified token type.
     * This SHALL apply not only to currently owned tokens, but to all
     * such tokens acquired in the future, unless the
     * allowance is `delete`d.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue approved_for_all = 5;</code>
     * @param \Google\Protobuf\BoolValue $var
     * @return $this
     */
    public function setApprovedForAll($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\BoolValue::class);
        $this->approved_for_all = $var;

        return $this;
    }

    /**
     * Sets the field by wrapping a primitive type in a Google\Protobuf\BoolValue object.

     **
     * A flag indicating this allowance applies to all tokens of the
     * specified (non-fungible/unique) type.
     * <p>
     * If true, the `spender` SHALL be permitted to transfer any or all
     * of the `owner`'s tokens of the specified token type.
     * This SHALL apply not only to currently owned tokens, but to all
     * such tokens acquired in the future, unless the
     * allowance is `delete`d.
     *
     * Generated from protobuf field <code>.google.protobuf.BoolValue approved_for_all = 5;</code>
     * @param bool|null $var
     * @return $this
     */
    public function setApprovedForAllUnwrapped($var)
    {
        $this->writeWrapperValue("approved_for_all", $var);
        return $this;}

    /**
     **
     * A spender-owner account identifier.<br/>
     * This account identifier identifies a `spender` for whom an existing
     * `approved_for_all` allowance was previously created. This enables
     * an account with such broad access to grant allowances to transfer
     * individual tokens from the original owner without involving that
     * original owner.
     * <p>
     * If this is set, the account identified MUST sign this transaction, but
     * the `owner` account MAY NOT sign this transaction.<br/>
     * If this is set, there MUST exist an active `approved_for_all`
     * allowance from the `owner` for the `delegating_spender` to transfer
     * all tokens of the type identified by the `tokenId` field.<br/>
     * If this value is set, the `approved_for_all` flag MUST be `false`.
     *
     * Generated from protobuf field <code>.proto.AccountID delegating_spender = 6;</code>
     * @return \Proto\AccountID|null
     */
    public function getDelegatingSpender()
    {
        return $this->delegating_spender;
    }

    public function hasDelegatingSpender()
    {
        return isset($this->delegating_spender);
    }

    public function clearDelegatingSpender()
    {
        unset($this->delegating_spender);
    }

    /**
     **
     * A spender-owner account identifier.<br/>
     * This account identifier identifies a `spender` for whom an existing
     * `approved_for_all` allowance was previously created. This enables
     * an account with such broad access to grant allowances to transfer
     * individual tokens from the original owner without involving that
     * original owner.
     * <p>
     * If this is set, the account identified MUST sign this transaction, but
     * the `owner` account MAY NOT sign this transaction.<br/>
     * If this is set, there MUST exist an active `approved_for_all`
     * allowance from the `owner` for the `delegating_spender` to transfer
     * all tokens of the type identified by the `tokenId` field.<br/>
     * If this value is set, the `approved_for_all` flag MUST be `false`.
     *
     * Generated from protobuf field <code>.proto.AccountID delegating_spender = 6;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setDelegatingSpender($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->delegating_spender = $var;

        return $this;
    }

}

