<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: custom_fees.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Description of a transfer added to a `cryptoTransfer` transaction that
 * satisfies custom fee requirements.
 * It is important to note that this is not the actual transfer. The transfer
 * of value SHALL be merged into the original transaction to minimize the
 * number of actual transfers. This descriptor presents the fee assessed
 * separately in the record stream so that the details of the fee assessed
 * are not hidden in this process.
 *
 * Generated from protobuf message <code>proto.AssessedCustomFee</code>
 */
class AssessedCustomFee extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * An amount of tokens assessed for this custom fee.
     * <p>
     * This shall be expressed in units of 10<sup>-decimals</sup> tokens.
     *
     * Generated from protobuf field <code>int64 amount = 1;</code>
     */
    protected $amount = 0;
    /**
     **
     * The token transferred to satisfy this fee.
     * <p>
     * If the token transferred is HBAR, this field SHALL NOT be set.
     *
     * Generated from protobuf field <code>.proto.TokenID token_id = 2;</code>
     */
    protected $token_id = null;
    /**
     **
     * An account that received the fee assessed.
     * <p>
     * This SHALL NOT be the sender or receiver of the original
     * cryptoTransfer transaction.
     *
     * Generated from protobuf field <code>.proto.AccountID fee_collector_account_id = 3;</code>
     */
    protected $fee_collector_account_id = null;
    /**
     **
     * An account that provided the tokens assessed as a fee.
     * <p>
     * This SHALL be the account that _would have_ had a higher balance
     * absent the fee. In most cases this SHALL be the `sender`, but
     * some _fractional_ fees reduce the amount transferred, and in those
     * cases the `receiver` SHALL be the effective payer for the fee.<br/>
     * There are currently no situations where a third party pays a custom
     * fee. This MAY change in a future release.
     *
     * Generated from protobuf field <code>repeated .proto.AccountID effective_payer_account_id = 4;</code>
     */
    private $effective_payer_account_id;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $amount
     *          *
     *           An amount of tokens assessed for this custom fee.
     *           <p>
     *           This shall be expressed in units of 10<sup>-decimals</sup> tokens.
     *     @type \Proto\TokenID $token_id
     *          *
     *           The token transferred to satisfy this fee.
     *           <p>
     *           If the token transferred is HBAR, this field SHALL NOT be set.
     *     @type \Proto\AccountID $fee_collector_account_id
     *          *
     *           An account that received the fee assessed.
     *           <p>
     *           This SHALL NOT be the sender or receiver of the original
     *           cryptoTransfer transaction.
     *     @type \Proto\AccountID[] $effective_payer_account_id
     *          *
     *           An account that provided the tokens assessed as a fee.
     *           <p>
     *           This SHALL be the account that _would have_ had a higher balance
     *           absent the fee. In most cases this SHALL be the `sender`, but
     *           some _fractional_ fees reduce the amount transferred, and in those
     *           cases the `receiver` SHALL be the effective payer for the fee.<br/>
     *           There are currently no situations where a third party pays a custom
     *           fee. This MAY change in a future release.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\CustomFees::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * An amount of tokens assessed for this custom fee.
     * <p>
     * This shall be expressed in units of 10<sup>-decimals</sup> tokens.
     *
     * Generated from protobuf field <code>int64 amount = 1;</code>
     * @return int|string
     */
    public function getAmount()
    {
        return $this->amount;
    }

    /**
     **
     * An amount of tokens assessed for this custom fee.
     * <p>
     * This shall be expressed in units of 10<sup>-decimals</sup> tokens.
     *
     * Generated from protobuf field <code>int64 amount = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setAmount($var)
    {
        GPBUtil::checkInt64($var);
        $this->amount = $var;

        return $this;
    }

    /**
     **
     * The token transferred to satisfy this fee.
     * <p>
     * If the token transferred is HBAR, this field SHALL NOT be set.
     *
     * Generated from protobuf field <code>.proto.TokenID token_id = 2;</code>
     * @return \Proto\TokenID|null
     */
    public function getTokenId()
    {
        return $this->token_id;
    }

    public function hasTokenId()
    {
        return isset($this->token_id);
    }

    public function clearTokenId()
    {
        unset($this->token_id);
    }

    /**
     **
     * The token transferred to satisfy this fee.
     * <p>
     * If the token transferred is HBAR, this field SHALL NOT be set.
     *
     * Generated from protobuf field <code>.proto.TokenID token_id = 2;</code>
     * @param \Proto\TokenID $var
     * @return $this
     */
    public function setTokenId($var)
    {
        GPBUtil::checkMessage($var, \Proto\TokenID::class);
        $this->token_id = $var;

        return $this;
    }

    /**
     **
     * An account that received the fee assessed.
     * <p>
     * This SHALL NOT be the sender or receiver of the original
     * cryptoTransfer transaction.
     *
     * Generated from protobuf field <code>.proto.AccountID fee_collector_account_id = 3;</code>
     * @return \Proto\AccountID|null
     */
    public function getFeeCollectorAccountId()
    {
        return $this->fee_collector_account_id;
    }

    public function hasFeeCollectorAccountId()
    {
        return isset($this->fee_collector_account_id);
    }

    public function clearFeeCollectorAccountId()
    {
        unset($this->fee_collector_account_id);
    }

    /**
     **
     * An account that received the fee assessed.
     * <p>
     * This SHALL NOT be the sender or receiver of the original
     * cryptoTransfer transaction.
     *
     * Generated from protobuf field <code>.proto.AccountID fee_collector_account_id = 3;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setFeeCollectorAccountId($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->fee_collector_account_id = $var;

        return $this;
    }

    /**
     **
     * An account that provided the tokens assessed as a fee.
     * <p>
     * This SHALL be the account that _would have_ had a higher balance
     * absent the fee. In most cases this SHALL be the `sender`, but
     * some _fractional_ fees reduce the amount transferred, and in those
     * cases the `receiver` SHALL be the effective payer for the fee.<br/>
     * There are currently no situations where a third party pays a custom
     * fee. This MAY change in a future release.
     *
     * Generated from protobuf field <code>repeated .proto.AccountID effective_payer_account_id = 4;</code>
     * @return RepeatedField<\Proto\AccountID>
     */
    public function getEffectivePayerAccountId()
    {
        return $this->effective_payer_account_id;
    }

    /**
     **
     * An account that provided the tokens assessed as a fee.
     * <p>
     * This SHALL be the account that _would have_ had a higher balance
     * absent the fee. In most cases this SHALL be the `sender`, but
     * some _fractional_ fees reduce the amount transferred, and in those
     * cases the `receiver` SHALL be the effective payer for the fee.<br/>
     * There are currently no situations where a third party pays a custom
     * fee. This MAY change in a future release.
     *
     * Generated from protobuf field <code>repeated .proto.AccountID effective_payer_account_id = 4;</code>
     * @param \Proto\AccountID[] $var
     * @return $this
     */
    public function setEffectivePayerAccountId($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Proto\AccountID::class);
        $this->effective_payer_account_id = $arr;

        return $this;
    }

}

