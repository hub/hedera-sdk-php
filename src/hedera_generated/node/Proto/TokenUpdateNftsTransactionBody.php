<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: token_update_nfts.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Modify the metadata field for an individual non-fungible/unique token (NFT).
 * Updating the metadata of an NFT SHALL NOT affect ownership or
 * the ability to transfer that NFT.<br/>
 * This transaction SHALL affect only the specific serial numbered tokens
 * identified.
 * This transaction SHALL modify individual token metadata.<br/>
 * This transaction MUST be signed by the token `metadata_key`.<br/>
 * The token `metadata_key` MUST be a valid `Key`.<br/>
 * The token `metadata_key` MUST NOT be an empty `KeyList`.
 * ### Block Stream Effects
 * None
 *
 * Generated from protobuf message <code>proto.TokenUpdateNftsTransactionBody</code>
 */
class TokenUpdateNftsTransactionBody extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A token identifier.<br/>
     * This is the token type (i.e. collection) for which to update NFTs.
     * <p>
     * This field is REQUIRED.<br/>
     * The identified token MUST exist, MUST NOT be paused, MUST have the type
     * non-fungible/unique, and MUST have a valid `metadata_key`.
     *
     * Generated from protobuf field <code>.proto.TokenID token = 1;</code>
     */
    protected $token = null;
    /**
     **
     * A list of serial numbers to be updated.
     * <p>
     * This field is REQUIRED.<br/>
     * This list MUST have at least one(1) entry.<br/>
     * This list MUST NOT have more than ten(10) entries.
     *
     * Generated from protobuf field <code>repeated int64 serial_numbers = 2;</code>
     */
    private $serial_numbers;
    /**
     **
     * A new value for the metadata.
     * <p>
     * If this field is not set, the metadata SHALL NOT change.<br/>
     * This value, if set, MUST NOT exceed 100 bytes.
     *
     * Generated from protobuf field <code>.google.protobuf.BytesValue metadata = 3;</code>
     */
    protected $metadata = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\TokenID $token
     *          *
     *           A token identifier.<br/>
     *           This is the token type (i.e. collection) for which to update NFTs.
     *           <p>
     *           This field is REQUIRED.<br/>
     *           The identified token MUST exist, MUST NOT be paused, MUST have the type
     *           non-fungible/unique, and MUST have a valid `metadata_key`.
     *     @type int[]|string[] $serial_numbers
     *          *
     *           A list of serial numbers to be updated.
     *           <p>
     *           This field is REQUIRED.<br/>
     *           This list MUST have at least one(1) entry.<br/>
     *           This list MUST NOT have more than ten(10) entries.
     *     @type \Google\Protobuf\BytesValue $metadata
     *          *
     *           A new value for the metadata.
     *           <p>
     *           If this field is not set, the metadata SHALL NOT change.<br/>
     *           This value, if set, MUST NOT exceed 100 bytes.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\TokenUpdateNfts::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A token identifier.<br/>
     * This is the token type (i.e. collection) for which to update NFTs.
     * <p>
     * This field is REQUIRED.<br/>
     * The identified token MUST exist, MUST NOT be paused, MUST have the type
     * non-fungible/unique, and MUST have a valid `metadata_key`.
     *
     * Generated from protobuf field <code>.proto.TokenID token = 1;</code>
     * @return \Proto\TokenID|null
     */
    public function getToken()
    {
        return $this->token;
    }

    public function hasToken()
    {
        return isset($this->token);
    }

    public function clearToken()
    {
        unset($this->token);
    }

    /**
     **
     * A token identifier.<br/>
     * This is the token type (i.e. collection) for which to update NFTs.
     * <p>
     * This field is REQUIRED.<br/>
     * The identified token MUST exist, MUST NOT be paused, MUST have the type
     * non-fungible/unique, and MUST have a valid `metadata_key`.
     *
     * Generated from protobuf field <code>.proto.TokenID token = 1;</code>
     * @param \Proto\TokenID $var
     * @return $this
     */
    public function setToken($var)
    {
        GPBUtil::checkMessage($var, \Proto\TokenID::class);
        $this->token = $var;

        return $this;
    }

    /**
     **
     * A list of serial numbers to be updated.
     * <p>
     * This field is REQUIRED.<br/>
     * This list MUST have at least one(1) entry.<br/>
     * This list MUST NOT have more than ten(10) entries.
     *
     * Generated from protobuf field <code>repeated int64 serial_numbers = 2;</code>
     * @return RepeatedField<int>|RepeatedField<string>
     */
    public function getSerialNumbers()
    {
        return $this->serial_numbers;
    }

    /**
     **
     * A list of serial numbers to be updated.
     * <p>
     * This field is REQUIRED.<br/>
     * This list MUST have at least one(1) entry.<br/>
     * This list MUST NOT have more than ten(10) entries.
     *
     * Generated from protobuf field <code>repeated int64 serial_numbers = 2;</code>
     * @param int[]|string[] $var
     * @return $this
     */
    public function setSerialNumbers($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::INT64);
        $this->serial_numbers = $arr;

        return $this;
    }

    /**
     **
     * A new value for the metadata.
     * <p>
     * If this field is not set, the metadata SHALL NOT change.<br/>
     * This value, if set, MUST NOT exceed 100 bytes.
     *
     * Generated from protobuf field <code>.google.protobuf.BytesValue metadata = 3;</code>
     * @return \Google\Protobuf\BytesValue|null
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    public function hasMetadata()
    {
        return isset($this->metadata);
    }

    public function clearMetadata()
    {
        unset($this->metadata);
    }

    /**
     * Returns the unboxed value from <code>getMetadata()</code>

     **
     * A new value for the metadata.
     * <p>
     * If this field is not set, the metadata SHALL NOT change.<br/>
     * This value, if set, MUST NOT exceed 100 bytes.
     *
     * Generated from protobuf field <code>.google.protobuf.BytesValue metadata = 3;</code>
     * @return string|null
     */
    public function getMetadataUnwrapped()
    {
        return $this->readWrapperValue("metadata");
    }

    /**
     **
     * A new value for the metadata.
     * <p>
     * If this field is not set, the metadata SHALL NOT change.<br/>
     * This value, if set, MUST NOT exceed 100 bytes.
     *
     * Generated from protobuf field <code>.google.protobuf.BytesValue metadata = 3;</code>
     * @param \Google\Protobuf\BytesValue $var
     * @return $this
     */
    public function setMetadata($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\BytesValue::class);
        $this->metadata = $var;

        return $this;
    }

    /**
     * Sets the field by wrapping a primitive type in a Google\Protobuf\BytesValue object.

     **
     * A new value for the metadata.
     * <p>
     * If this field is not set, the metadata SHALL NOT change.<br/>
     * This value, if set, MUST NOT exceed 100 bytes.
     *
     * Generated from protobuf field <code>.google.protobuf.BytesValue metadata = 3;</code>
     * @param string|null $var
     * @return $this
     */
    public function setMetadataUnwrapped($var)
    {
        $this->writeWrapperValue("metadata", $var);
        return $this;}

}

