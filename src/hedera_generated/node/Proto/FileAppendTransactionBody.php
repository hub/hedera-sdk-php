<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: file_append.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * A transaction body for an `appendContent` transaction.<br/>
 * This transaction body provides a mechanism to append content to a "file" in
 * network state. Hedera transactions are limited in size, but there are many
 * uses for in-state byte arrays (e.g. smart contract bytecode) which require
 * more than may fit within a single transaction. The `appendFile` transaction
 * exists to support these requirements. The typical pattern is to create a
 * file, append more data until the full content is stored, verify the file is
 * correct, then update the file entry with any final metadata changes (e.g.
 * adding threshold keys and removing the initial upload key).
 * Each append transaction MUST remain within the total transaction size limit
 * for the network (typically 6144 bytes).<br/>
 * The total size of a file MUST remain within the maximum file size limit for
 * the network (typically 1048576 bytes).
 * #### Signature Requirements
 * Append transactions MUST have signatures from _all_ keys in the `KeyList`
 * assigned to the `keys` field of the file.<br/>
 * See the [File Service](#FileService) specification for a detailed
 * explanation of the signature requirements for all file transactions.
 * ### Block Stream Effects
 * None
 *
 * Generated from protobuf message <code>proto.FileAppendTransactionBody</code>
 */
class FileAppendTransactionBody extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A file identifier.<br/>
     * This identifies the file to which the `contents` will be appended.
     * <p>
     * This field is REQUIRED.<br/>
     * The identified file MUST exist.<br/>
     * The identified file MUST NOT be larger than the current maximum file
     * size limit.<br/>
     * The identified file MUST NOT be deleted.<br/>
     * The identified file MUST NOT be immutable.
     *
     * Generated from protobuf field <code>.proto.FileID fileID = 2;</code>
     */
    protected $fileID = null;
    /**
     **
     * An array of bytes to append.<br/>
     * <p>
     * This content SHALL be appended to the identified file if this
     * transaction succeeds.<br/>
     * This field is REQUIRED.<br/>
     * This field MUST NOT be empty.
     *
     * Generated from protobuf field <code>bytes contents = 4;</code>
     */
    protected $contents = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\FileID $fileID
     *          *
     *           A file identifier.<br/>
     *           This identifies the file to which the `contents` will be appended.
     *           <p>
     *           This field is REQUIRED.<br/>
     *           The identified file MUST exist.<br/>
     *           The identified file MUST NOT be larger than the current maximum file
     *           size limit.<br/>
     *           The identified file MUST NOT be deleted.<br/>
     *           The identified file MUST NOT be immutable.
     *     @type string $contents
     *          *
     *           An array of bytes to append.<br/>
     *           <p>
     *           This content SHALL be appended to the identified file if this
     *           transaction succeeds.<br/>
     *           This field is REQUIRED.<br/>
     *           This field MUST NOT be empty.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\FileAppend::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A file identifier.<br/>
     * This identifies the file to which the `contents` will be appended.
     * <p>
     * This field is REQUIRED.<br/>
     * The identified file MUST exist.<br/>
     * The identified file MUST NOT be larger than the current maximum file
     * size limit.<br/>
     * The identified file MUST NOT be deleted.<br/>
     * The identified file MUST NOT be immutable.
     *
     * Generated from protobuf field <code>.proto.FileID fileID = 2;</code>
     * @return \Proto\FileID|null
     */
    public function getFileID()
    {
        return $this->fileID;
    }

    public function hasFileID()
    {
        return isset($this->fileID);
    }

    public function clearFileID()
    {
        unset($this->fileID);
    }

    /**
     **
     * A file identifier.<br/>
     * This identifies the file to which the `contents` will be appended.
     * <p>
     * This field is REQUIRED.<br/>
     * The identified file MUST exist.<br/>
     * The identified file MUST NOT be larger than the current maximum file
     * size limit.<br/>
     * The identified file MUST NOT be deleted.<br/>
     * The identified file MUST NOT be immutable.
     *
     * Generated from protobuf field <code>.proto.FileID fileID = 2;</code>
     * @param \Proto\FileID $var
     * @return $this
     */
    public function setFileID($var)
    {
        GPBUtil::checkMessage($var, \Proto\FileID::class);
        $this->fileID = $var;

        return $this;
    }

    /**
     **
     * An array of bytes to append.<br/>
     * <p>
     * This content SHALL be appended to the identified file if this
     * transaction succeeds.<br/>
     * This field is REQUIRED.<br/>
     * This field MUST NOT be empty.
     *
     * Generated from protobuf field <code>bytes contents = 4;</code>
     * @return string
     */
    public function getContents()
    {
        return $this->contents;
    }

    /**
     **
     * An array of bytes to append.<br/>
     * <p>
     * This content SHALL be appended to the identified file if this
     * transaction succeeds.<br/>
     * This field is REQUIRED.<br/>
     * This field MUST NOT be empty.
     *
     * Generated from protobuf field <code>bytes contents = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setContents($var)
    {
        GPBUtil::checkString($var, False);
        $this->contents = $var;

        return $this;
    }

}

