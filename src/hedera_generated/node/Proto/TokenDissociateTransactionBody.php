<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: token_dissociate.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Dissociate an account from one or more HTS tokens.
 * If the identified account is not found,
 * the transaction SHALL return `INVALID_ACCOUNT_ID`.<br/>
 * If the identified account has been deleted,
 * the transaction SHALL return `ACCOUNT_DELETED`.<br/>
 * If any of the identified tokens is not found,
 * the transaction SHALL return `INVALID_TOKEN_REF`.<br/>
 * If any of the identified tokens has been deleted,
 * the transaction SHALL return `TOKEN_WAS_DELETED`.<br/>
 * If an association does not exist for any of the identified tokens,
 * the transaction SHALL return `TOKEN_NOT_ASSOCIATED_TO_ACCOUNT`.<br/>
 * If the identified account has a nonzero balance for any of the identified
 * tokens, and that token is neither deleted nor expired, the
 * transaction SHALL return `TRANSACTION_REQUIRES_ZERO_TOKEN_BALANCES`.<br/>
 * If one of the identified tokens is a fungible/common token that is expired,
 * the account MAY disassociate from that token, even if that token balance is
 * not zero for that account.<br/>
 * If one of the identified tokens is a non-fungible/unique token that is
 * expired, the account MUST NOT disassociate if that account holds any
 * individual NFT of that token. In this situation the transaction SHALL
 * return `TRANSACTION_REQUIRED_ZERO_TOKEN_BALANCES`.<br/>
 * The identified account MUST sign this transaction.
 * ### Block Stream Effects
 * None
 *
 * Generated from protobuf message <code>proto.TokenDissociateTransactionBody</code>
 */
class TokenDissociateTransactionBody extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * An account identifier.
     * <p>
     * The identified account SHALL be dissociated from each of the
     * tokens identified in the `tokens` field.
     * This field is REQUIRED and MUST be a valid account identifier.<br/>
     * The identified account MUST exist in state.<br/>
     * The identified account MUST NOT be deleted.<br/>
     * The identified account MUST NOT be expired.
     *
     * Generated from protobuf field <code>.proto.AccountID account = 1;</code>
     */
    protected $account = null;
    /**
     **
     * A list of token identifiers.
     * <p>
     * Each token identified in this list SHALL be dissociated from
     * the account identified in the `account` field.<br/>
     * This list MUST NOT be empty.
     * Each entry in this list MUST be a valid token identifier.<br/>
     * Each entry in this list MUST be currently associated to the
     * account identified in `account`.<br/>
     * Entries in this list MAY be expired, if the token type is
     * fungible/common.<br/>
     * Each entry in this list MUST NOT be deleted.
     *
     * Generated from protobuf field <code>repeated .proto.TokenID tokens = 2;</code>
     */
    private $tokens;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\AccountID $account
     *          *
     *           An account identifier.
     *           <p>
     *           The identified account SHALL be dissociated from each of the
     *           tokens identified in the `tokens` field.
     *           This field is REQUIRED and MUST be a valid account identifier.<br/>
     *           The identified account MUST exist in state.<br/>
     *           The identified account MUST NOT be deleted.<br/>
     *           The identified account MUST NOT be expired.
     *     @type \Proto\TokenID[] $tokens
     *          *
     *           A list of token identifiers.
     *           <p>
     *           Each token identified in this list SHALL be dissociated from
     *           the account identified in the `account` field.<br/>
     *           This list MUST NOT be empty.
     *           Each entry in this list MUST be a valid token identifier.<br/>
     *           Each entry in this list MUST be currently associated to the
     *           account identified in `account`.<br/>
     *           Entries in this list MAY be expired, if the token type is
     *           fungible/common.<br/>
     *           Each entry in this list MUST NOT be deleted.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\TokenDissociate::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * An account identifier.
     * <p>
     * The identified account SHALL be dissociated from each of the
     * tokens identified in the `tokens` field.
     * This field is REQUIRED and MUST be a valid account identifier.<br/>
     * The identified account MUST exist in state.<br/>
     * The identified account MUST NOT be deleted.<br/>
     * The identified account MUST NOT be expired.
     *
     * Generated from protobuf field <code>.proto.AccountID account = 1;</code>
     * @return \Proto\AccountID|null
     */
    public function getAccount()
    {
        return $this->account;
    }

    public function hasAccount()
    {
        return isset($this->account);
    }

    public function clearAccount()
    {
        unset($this->account);
    }

    /**
     **
     * An account identifier.
     * <p>
     * The identified account SHALL be dissociated from each of the
     * tokens identified in the `tokens` field.
     * This field is REQUIRED and MUST be a valid account identifier.<br/>
     * The identified account MUST exist in state.<br/>
     * The identified account MUST NOT be deleted.<br/>
     * The identified account MUST NOT be expired.
     *
     * Generated from protobuf field <code>.proto.AccountID account = 1;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setAccount($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->account = $var;

        return $this;
    }

    /**
     **
     * A list of token identifiers.
     * <p>
     * Each token identified in this list SHALL be dissociated from
     * the account identified in the `account` field.<br/>
     * This list MUST NOT be empty.
     * Each entry in this list MUST be a valid token identifier.<br/>
     * Each entry in this list MUST be currently associated to the
     * account identified in `account`.<br/>
     * Entries in this list MAY be expired, if the token type is
     * fungible/common.<br/>
     * Each entry in this list MUST NOT be deleted.
     *
     * Generated from protobuf field <code>repeated .proto.TokenID tokens = 2;</code>
     * @return RepeatedField<\Proto\TokenID>
     */
    public function getTokens()
    {
        return $this->tokens;
    }

    /**
     **
     * A list of token identifiers.
     * <p>
     * Each token identified in this list SHALL be dissociated from
     * the account identified in the `account` field.<br/>
     * This list MUST NOT be empty.
     * Each entry in this list MUST be a valid token identifier.<br/>
     * Each entry in this list MUST be currently associated to the
     * account identified in `account`.<br/>
     * Entries in this list MAY be expired, if the token type is
     * fungible/common.<br/>
     * Each entry in this list MUST NOT be deleted.
     *
     * Generated from protobuf field <code>repeated .proto.TokenID tokens = 2;</code>
     * @param \Proto\TokenID[] $var
     * @return $this
     */
    public function setTokens($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Proto\TokenID::class);
        $this->tokens = $arr;

        return $this;
    }

}

