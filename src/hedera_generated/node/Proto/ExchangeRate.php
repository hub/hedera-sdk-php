<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: exchange_rate.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * An exchange rate as a ratio of USD cents per HBAR.
 * This ratio SHALL be used to convert tinycent (`10<sup>-8</sup>` USD cent)
 * to tinybar for fees and other purposes.<br/>
 * When applying an `ExchangeRate`, implementations SHOULD ensure input values
 * are `tinycent` and/or `tinybar` before applying the exchange ratio.<br/>
 * Exchange results MAY be converted to USD or HBAR via division if whole
 * unit values are required.
 * The ratio described here SHALL be assigned such that a value in `tinybar`
 * may be obtained with the following equation.
 * ```
 *   amountInTinybar = (amountInTinycent * hbarEquiv) / centEquiv
 * ```
 *
 * Generated from protobuf message <code>proto.ExchangeRate</code>
 */
class ExchangeRate extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * Denominator for a ratio of USD cents per HBAR.
     *
     * Generated from protobuf field <code>int32 hbarEquiv = 1;</code>
     */
    protected $hbarEquiv = 0;
    /**
     **
     * Numerator for a ratio of USD cents per HBAR.
     *
     * Generated from protobuf field <code>int32 centEquiv = 2;</code>
     */
    protected $centEquiv = 0;
    /**
     **
     * Expiration time stamp for this exchange rate.
     *
     * Generated from protobuf field <code>.proto.TimestampSeconds expirationTime = 3;</code>
     */
    protected $expirationTime = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $hbarEquiv
     *          *
     *           Denominator for a ratio of USD cents per HBAR.
     *     @type int $centEquiv
     *          *
     *           Numerator for a ratio of USD cents per HBAR.
     *     @type \Proto\TimestampSeconds $expirationTime
     *          *
     *           Expiration time stamp for this exchange rate.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ExchangeRate::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * Denominator for a ratio of USD cents per HBAR.
     *
     * Generated from protobuf field <code>int32 hbarEquiv = 1;</code>
     * @return int
     */
    public function getHbarEquiv()
    {
        return $this->hbarEquiv;
    }

    /**
     **
     * Denominator for a ratio of USD cents per HBAR.
     *
     * Generated from protobuf field <code>int32 hbarEquiv = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setHbarEquiv($var)
    {
        GPBUtil::checkInt32($var);
        $this->hbarEquiv = $var;

        return $this;
    }

    /**
     **
     * Numerator for a ratio of USD cents per HBAR.
     *
     * Generated from protobuf field <code>int32 centEquiv = 2;</code>
     * @return int
     */
    public function getCentEquiv()
    {
        return $this->centEquiv;
    }

    /**
     **
     * Numerator for a ratio of USD cents per HBAR.
     *
     * Generated from protobuf field <code>int32 centEquiv = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setCentEquiv($var)
    {
        GPBUtil::checkInt32($var);
        $this->centEquiv = $var;

        return $this;
    }

    /**
     **
     * Expiration time stamp for this exchange rate.
     *
     * Generated from protobuf field <code>.proto.TimestampSeconds expirationTime = 3;</code>
     * @return \Proto\TimestampSeconds|null
     */
    public function getExpirationTime()
    {
        return $this->expirationTime;
    }

    public function hasExpirationTime()
    {
        return isset($this->expirationTime);
    }

    public function clearExpirationTime()
    {
        unset($this->expirationTime);
    }

    /**
     **
     * Expiration time stamp for this exchange rate.
     *
     * Generated from protobuf field <code>.proto.TimestampSeconds expirationTime = 3;</code>
     * @param \Proto\TimestampSeconds $var
     * @return $this
     */
    public function setExpirationTime($var)
    {
        GPBUtil::checkMessage($var, \Proto\TimestampSeconds::class);
        $this->expirationTime = $var;

        return $this;
    }

}

