<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: basic_types.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Staking information for an account or a contract.
 * This is used for responses returned from `CryptoGetInfo` or
 * `ContractGetInfo` queries.
 *
 * Generated from protobuf message <code>proto.StakingInfo</code>
 */
class StakingInfo extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A flag indicating that the holder of this account has chosen to decline
     * staking rewards.
     *
     * Generated from protobuf field <code>bool decline_reward = 1;</code>
     */
    protected $decline_reward = false;
    /**
     **
     * A `Timestamp` of the start time for the latest active staking period.
     * <p>
     * This MUST be a period during which either the staking settings for this
     * account or contract changed or the account or contract received staking
     * rewards, whichever is later. Examples of a change in staking settings
     * include starting staking or changing the staked_node_id.<br/>
     * If this account or contract is not currently staked to a node, then this
     * field SHALL NOT be set.
     *
     * Generated from protobuf field <code>.proto.Timestamp stake_period_start = 2;</code>
     */
    protected $stake_period_start = null;
    /**
     **
     * An amount, in tinybar, to be received in the next reward payout.<br/>
     * Rewards are not paid out immediately; for efficiency reasons rewards are
     * only paid out as part of another transaction involving that account.
     *
     * Generated from protobuf field <code>int64 pending_reward = 3;</code>
     */
    protected $pending_reward = 0;
    /**
     **
     * A proxy-staked balance.<br/>
     * The total HBAR balance of all accounts that delegate staking to this
     * account or contract.
     *
     * Generated from protobuf field <code>int64 staked_to_me = 4;</code>
     */
    protected $staked_to_me = 0;
    protected $staked_id;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type bool $decline_reward
     *          *
     *           A flag indicating that the holder of this account has chosen to decline
     *           staking rewards.
     *     @type \Proto\Timestamp $stake_period_start
     *          *
     *           A `Timestamp` of the start time for the latest active staking period.
     *           <p>
     *           This MUST be a period during which either the staking settings for this
     *           account or contract changed or the account or contract received staking
     *           rewards, whichever is later. Examples of a change in staking settings
     *           include starting staking or changing the staked_node_id.<br/>
     *           If this account or contract is not currently staked to a node, then this
     *           field SHALL NOT be set.
     *     @type int|string $pending_reward
     *          *
     *           An amount, in tinybar, to be received in the next reward payout.<br/>
     *           Rewards are not paid out immediately; for efficiency reasons rewards are
     *           only paid out as part of another transaction involving that account.
     *     @type int|string $staked_to_me
     *          *
     *           A proxy-staked balance.<br/>
     *           The total HBAR balance of all accounts that delegate staking to this
     *           account or contract.
     *     @type \Proto\AccountID $staked_account_id
     *          *
     *           A delegated stake.
     *           <p>
     *           This account delegates to the indicated account for staking purposes.
     *     @type int|string $staked_node_id
     *          *
     *           A direct stake.
     *           <p>
     *           This accounts stakes its balance to the designated node.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\BasicTypes::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A flag indicating that the holder of this account has chosen to decline
     * staking rewards.
     *
     * Generated from protobuf field <code>bool decline_reward = 1;</code>
     * @return bool
     */
    public function getDeclineReward()
    {
        return $this->decline_reward;
    }

    /**
     **
     * A flag indicating that the holder of this account has chosen to decline
     * staking rewards.
     *
     * Generated from protobuf field <code>bool decline_reward = 1;</code>
     * @param bool $var
     * @return $this
     */
    public function setDeclineReward($var)
    {
        GPBUtil::checkBool($var);
        $this->decline_reward = $var;

        return $this;
    }

    /**
     **
     * A `Timestamp` of the start time for the latest active staking period.
     * <p>
     * This MUST be a period during which either the staking settings for this
     * account or contract changed or the account or contract received staking
     * rewards, whichever is later. Examples of a change in staking settings
     * include starting staking or changing the staked_node_id.<br/>
     * If this account or contract is not currently staked to a node, then this
     * field SHALL NOT be set.
     *
     * Generated from protobuf field <code>.proto.Timestamp stake_period_start = 2;</code>
     * @return \Proto\Timestamp|null
     */
    public function getStakePeriodStart()
    {
        return $this->stake_period_start;
    }

    public function hasStakePeriodStart()
    {
        return isset($this->stake_period_start);
    }

    public function clearStakePeriodStart()
    {
        unset($this->stake_period_start);
    }

    /**
     **
     * A `Timestamp` of the start time for the latest active staking period.
     * <p>
     * This MUST be a period during which either the staking settings for this
     * account or contract changed or the account or contract received staking
     * rewards, whichever is later. Examples of a change in staking settings
     * include starting staking or changing the staked_node_id.<br/>
     * If this account or contract is not currently staked to a node, then this
     * field SHALL NOT be set.
     *
     * Generated from protobuf field <code>.proto.Timestamp stake_period_start = 2;</code>
     * @param \Proto\Timestamp $var
     * @return $this
     */
    public function setStakePeriodStart($var)
    {
        GPBUtil::checkMessage($var, \Proto\Timestamp::class);
        $this->stake_period_start = $var;

        return $this;
    }

    /**
     **
     * An amount, in tinybar, to be received in the next reward payout.<br/>
     * Rewards are not paid out immediately; for efficiency reasons rewards are
     * only paid out as part of another transaction involving that account.
     *
     * Generated from protobuf field <code>int64 pending_reward = 3;</code>
     * @return int|string
     */
    public function getPendingReward()
    {
        return $this->pending_reward;
    }

    /**
     **
     * An amount, in tinybar, to be received in the next reward payout.<br/>
     * Rewards are not paid out immediately; for efficiency reasons rewards are
     * only paid out as part of another transaction involving that account.
     *
     * Generated from protobuf field <code>int64 pending_reward = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setPendingReward($var)
    {
        GPBUtil::checkInt64($var);
        $this->pending_reward = $var;

        return $this;
    }

    /**
     **
     * A proxy-staked balance.<br/>
     * The total HBAR balance of all accounts that delegate staking to this
     * account or contract.
     *
     * Generated from protobuf field <code>int64 staked_to_me = 4;</code>
     * @return int|string
     */
    public function getStakedToMe()
    {
        return $this->staked_to_me;
    }

    /**
     **
     * A proxy-staked balance.<br/>
     * The total HBAR balance of all accounts that delegate staking to this
     * account or contract.
     *
     * Generated from protobuf field <code>int64 staked_to_me = 4;</code>
     * @param int|string $var
     * @return $this
     */
    public function setStakedToMe($var)
    {
        GPBUtil::checkInt64($var);
        $this->staked_to_me = $var;

        return $this;
    }

    /**
     **
     * A delegated stake.
     * <p>
     * This account delegates to the indicated account for staking purposes.
     *
     * Generated from protobuf field <code>.proto.AccountID staked_account_id = 5;</code>
     * @return \Proto\AccountID|null
     */
    public function getStakedAccountId()
    {
        return $this->readOneof(5);
    }

    public function hasStakedAccountId()
    {
        return $this->hasOneof(5);
    }

    /**
     **
     * A delegated stake.
     * <p>
     * This account delegates to the indicated account for staking purposes.
     *
     * Generated from protobuf field <code>.proto.AccountID staked_account_id = 5;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setStakedAccountId($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     **
     * A direct stake.
     * <p>
     * This accounts stakes its balance to the designated node.
     *
     * Generated from protobuf field <code>int64 staked_node_id = 6;</code>
     * @return int|string
     */
    public function getStakedNodeId()
    {
        return $this->readOneof(6);
    }

    public function hasStakedNodeId()
    {
        return $this->hasOneof(6);
    }

    /**
     **
     * A direct stake.
     * <p>
     * This accounts stakes its balance to the designated node.
     *
     * Generated from protobuf field <code>int64 staked_node_id = 6;</code>
     * @param int|string $var
     * @return $this
     */
    public function setStakedNodeId($var)
    {
        GPBUtil::checkInt64($var);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getStakedId()
    {
        return $this->whichOneof("staked_id");
    }

}

