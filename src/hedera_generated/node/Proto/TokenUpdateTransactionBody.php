<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: token_update.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Update an existing token.
 * This transaction SHALL NOT update any field that is not set.<br/>
 * Most changes MUST be signed by the current `admin_key` of the token. If the
 * token does not currently have a valid `admin_key`, then this transaction
 * MUST NOT set any value other than `expiry` or a non-admin key.<br/>
 * If the `treasury` is set to a new account, the new account MUST sign this
 * transaction.<br/>
 * If the `treasury` is set to a new account for a _non-fungible/unique_ token,
 * The current treasury MUST NOT hold any tokens, or the network configuration
 * property `tokens.nfts.useTreasuryWildcards` MUST be set.
 * #### Requirements for Keys
 * Any of the key values may be changed, even without an admin key, but the
 * key to be changed MUST have an existing valid key assigned, and both the
 * current key and the new key MUST sign the transaction.<br/>
 * A key value MAY be set to an empty `KeyList`. In this case the existing
 * key MUST sign this transaction, but the new value is not a valid key, and the
 * update SHALL effectively remove the existing key.
 * ### Block Stream Effects
 * None
 *
 * Generated from protobuf message <code>proto.TokenUpdateTransactionBody</code>
 */
class TokenUpdateTransactionBody extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A token identifier.
     * <p>
     * This SHALL identify the token type to delete.<br/>
     * The identified token MUST exist, and MUST NOT be deleted.<br/>
     * If any field other than `expiry` is set, the identified token MUST
     * have a valid `admin_key`.
     *
     * Generated from protobuf field <code>.proto.TokenID token = 1;</code>
     */
    protected $token = null;
    /**
     **
     * A new symbol to use for the token.
     * <p>
     * This value, if set, MUST NOT exceed 100 bytes when encoded as UTF-8.<br/>
     * This value, if set, MUST NOT contain the Unicode NUL codepoint.
     *
     * Generated from protobuf field <code>string symbol = 2;</code>
     */
    protected $symbol = '';
    /**
     **
     * A new name for the token.<br/>
     * This is generally the "full name" displayed in wallet software.
     * <p>
     * This value, if set, MUST NOT exceed 100 bytes when encoded as UTF-8.<br/>
     * This value, if set, MUST NOT contain the Unicode NUL codepoint.
     *
     * Generated from protobuf field <code>string name = 3;</code>
     */
    protected $name = '';
    /**
     **
     * A new treasury account identifier.
     * <p>
     * If set,
     * - The identified account SHALL be designated the "treasury" for the
     *   token, and all tokens "minted" SHALL be delivered to that account
     *   following this transaction.<br/>
     * - The identified account MUST exist, MUST NOT be expired, MUST NOT be
     *   deleted, and SHOULD have a non-zero HBAR balance.<br/>
     * - The identified account SHALL be associated to this token.
     * - The full balance of this token held by the prior treasury account
     *   SHALL be transferred to the new treasury account, if the token type
     *   is fungible/common.
     * - If the token type is non-fungible/unique, the previous treasury
     *   account MUST NOT hold any tokens of this type.
     * - The new treasury account key MUST sign this transaction.
     *
     * Generated from protobuf field <code>.proto.AccountID treasury = 4;</code>
     */
    protected $treasury = null;
    /**
     **
     * An Hedera key for token administration.
     * <p>
     * This key, if set, SHALL have administrative authority for this token and
     * MAY authorize token update and/or token delete transactions.<br/>
     * If this key is set to an empty `KeyList`, this token SHALL be
     * immutable thereafter, except for expiration and renewal.<br/>
     * If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     * If set to a valid key, the previous key and new key MUST both
     * sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key adminKey = 5;</code>
     */
    protected $adminKey = null;
    /**
     **
     * An Hedera key for managing account KYC.
     * <p>
     * This key, if set, SHALL have KYC authority for this token and
     * MAY authorize transactions to grant or revoke KYC for accounts.<br/>
     * If this key is not set, or is an empty `KeyList`, KYC status for this
     * token SHALL NOT be granted or revoked for any account.<br/>
     * If this key is removed after granting KYC, those grants SHALL remain
     * and cannot be revoked.<br/>
     * If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     * If set to a valid key, the previous key and new key MUST both
     * sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key kycKey = 6;</code>
     */
    protected $kycKey = null;
    /**
     **
     * An Hedera key for managing asset "freeze".
     * <p>
     * This key, if set, SHALL have "freeze" authority for this token and
     * MAY authorize transactions to freeze or unfreeze accounts
     * with respect to this token.<br/>
     * If this key is set to an empty `KeyList`, this token
     * SHALL NOT be frozen or unfrozen for any account.<br/>
     * If this key is removed after freezing accounts, those accounts
     * SHALL remain frozen and cannot be unfrozen.<br/>
     * If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     * If set to a valid key, the previous key and new key MUST both
     * sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key freezeKey = 7;</code>
     */
    protected $freezeKey = null;
    /**
     **
     * An Hedera key for wiping tokens from accounts.
     * <p>
     * This key, if set, SHALL have "wipe" authority for this token and
     * MAY authorize transactions to "wipe" any amount of this token from
     * any account, effectively burning the tokens "wiped".<br/>
     * If this key is set to an empty `KeyList`, it SHALL NOT be
     * possible to "wipe" this token from an account.<br/>
     * If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     * If set to a valid key, the previous key and new key MUST both
     * sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key wipeKey = 8;</code>
     */
    protected $wipeKey = null;
    /**
     **
     * An Hedera key for "minting" and "burning" tokens.
     * <p>
     * This key, if set, MAY authorize transactions to "mint" new tokens to
     * be delivered to the token treasury or "burn" tokens held by the
     * token treasury.<br/>
     * If this key is set to an empty `KeyList`, it SHALL NOT be
     * possible to change the supply of tokens and neither "mint" nor "burn"
     * transactions SHALL be permitted.<br/>
     * If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     * If set to a valid key, the previous key and new key MUST both
     * sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key supplyKey = 9;</code>
     */
    protected $supplyKey = null;
    /**
     **
     * An identifier for the account to be charged renewal fees at the token's
     * expiry to extend the lifetime of the token.
     * <p>
     * If this value is set for the identified token, the token lifetime SHALL
     * be extended by the _smallest_ of the following at expiration:
     * <ul>
     *   <li>The current `autoRenewPeriod` duration.</li>
     *   <li>The maximum duration that this account has funds to purchase.</li>
     *   <li>The configured MAX_AUTORENEW_PERIOD at the time of automatic
     *       renewal.</li>
     * </ul>
     * If this account's HBAR balance is `0` when the token must be
     * renewed, then the token SHALL be expired, and MAY be subsequently
     * removed from state.<br/>
     * If this value is set, the referenced account MUST sign this
     * transaction.
     * <p>
     * <blockquote>Note<blockquote>
     * It is not currently possible to remove an automatic renewal account.
     * Once set, it can only be replaced by a valid account.
     * </blockquote></blockquote>
     *
     * Generated from protobuf field <code>.proto.AccountID autoRenewAccount = 10;</code>
     */
    protected $autoRenewAccount = null;
    /**
     **
     * A duration between token automatic renewals.<br/>
     * All entities in state may be charged "rent" occasionally (typically
     * every 90 days) to prevent unnecessary growth of the ledger. This value
     * sets the interval between such events for this token.
     * <p>
     * If set, this value MUST be greater than the configured
     * `MIN_AUTORENEW_PERIOD`.<br/>
     * If set, this value MUST be less than the configured
     * `MAX_AUTORENEW_PERIOD`.
     *
     * Generated from protobuf field <code>.proto.Duration autoRenewPeriod = 11;</code>
     */
    protected $autoRenewPeriod = null;
    /**
     **
     * An expiration timestamp.
     * <p>
     * If this value is set, the automatic renewal account is not set for the
     * identified token, and token expiration is enabled in network
     * configuration, this token SHALL expire when the consensus time exceeds
     * this value, and MAY be subsequently removed from the network state.<br/>
     * If `autoRenewAccount` is set or the `auto_renew_account_id` is set for
     * the identified token, the token SHALL be subject to automatic renewal
     * when the consensus time exceeds this value.
     *
     * Generated from protobuf field <code>.proto.Timestamp expiry = 12;</code>
     */
    protected $expiry = null;
    /**
     **
     * A short description for this token.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue memo = 13;</code>
     */
    protected $memo = null;
    /**
     **
     * An Hedera key for managing the token custom fee schedule.
     * <p>
     * This key, if set, MAY authorize transactions to modify the
     * `custom_fees` for this token.<br/>
     * If this key is set to an empty `KeyList`, the `custom_fees`
     * for this token SHALL NOT be modified.<br/>
     * If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     * If set to a valid key, the previous key and new key MUST both
     * sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key fee_schedule_key = 14;</code>
     */
    protected $fee_schedule_key = null;
    /**
     **
     * An Hedera key for managing token "pause".
     * <p>
     * This key, if set, SHALL have "pause" authority for this token and
     * MAY authorize transactions to pause or unpause this token.<br/>
     * If this key is set to an empty `KeyList`, this token
     * SHALL NOT be paused or unpaused.<br/>
     * If this key is removed while the token is paused, the token cannot
     * be unpaused and SHALL remain paused.<br/>
     * If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     * If set to a valid key, the previous key and new key MUST both
     * sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key pause_key = 15;</code>
     */
    protected $pause_key = null;
    /**
     **
     * Token "Metadata".
     * <p>
     * The value, if set, MUST NOT exceed 100 bytes.<br/>
     * <dl><dt>Examples</dt>
     *   <dd>hcs://1/0.0.4896575</dd>
     *   <dd>ipfs://bafkreifd7tcjjuwxxf4qkaibkj62pj4mhfuud7plwrc3pfoygt55al6syi</dd>
     * </dl>
     *
     * Generated from protobuf field <code>.google.protobuf.BytesValue metadata = 16;</code>
     */
    protected $metadata = null;
    /**
     **
     * An Hedera key for managing the token `metadata`.
     * <p>
     * This key, if set, MAY authorize transactions to modify the
     * `metadata` for this token.<br/>
     * If this key is set to an empty `KeyList`, the `metadata`
     * for this token SHALL NOT be modified.<br/>
     * If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     * If set to a valid key, the previous key and new key MUST both
     * sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key metadata_key = 17;</code>
     */
    protected $metadata_key = null;
    /**
     **
     * Set a key validation mode.<br/>
     * Any key may be updated by a transaction signed by the token `admin_key`.
     * Each role key may _also_ sign a transaction to update that key.
     * If a role key signs an update to change that role key both old
     * and new key must sign the transaction, _unless_ this field is set
     * to `NO_VALIDATION`, in which case the _new_ key is not required to
     * sign the transaction (the existing key is still required).<br/>
     * The primary intent for this field is to allow a role key (e.g. a
     * `pause_key`) holder to "remove" that key from the token by signing
     * a transaction to set that role key to an empty `KeyList`.
     * <p>
     * If set to `FULL_VALIDATION`, either the `admin_key` or _both_ current
     * and new key MUST sign this transaction to update a "key" field for the
     * identified token.<br/>
     * If set to `NO_VALIDATION`, either the `admin_key` or the current
     * key MUST sign this transaction to update a "key" field for the
     * identified token.<br/>
     * This field SHALL be treated as `FULL_VALIDATION` if not set.
     *
     * Generated from protobuf field <code>.proto.TokenKeyValidation key_verification_mode = 18;</code>
     */
    protected $key_verification_mode = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\TokenID $token
     *          *
     *           A token identifier.
     *           <p>
     *           This SHALL identify the token type to delete.<br/>
     *           The identified token MUST exist, and MUST NOT be deleted.<br/>
     *           If any field other than `expiry` is set, the identified token MUST
     *           have a valid `admin_key`.
     *     @type string $symbol
     *          *
     *           A new symbol to use for the token.
     *           <p>
     *           This value, if set, MUST NOT exceed 100 bytes when encoded as UTF-8.<br/>
     *           This value, if set, MUST NOT contain the Unicode NUL codepoint.
     *     @type string $name
     *          *
     *           A new name for the token.<br/>
     *           This is generally the "full name" displayed in wallet software.
     *           <p>
     *           This value, if set, MUST NOT exceed 100 bytes when encoded as UTF-8.<br/>
     *           This value, if set, MUST NOT contain the Unicode NUL codepoint.
     *     @type \Proto\AccountID $treasury
     *          *
     *           A new treasury account identifier.
     *           <p>
     *           If set,
     *           - The identified account SHALL be designated the "treasury" for the
     *             token, and all tokens "minted" SHALL be delivered to that account
     *             following this transaction.<br/>
     *           - The identified account MUST exist, MUST NOT be expired, MUST NOT be
     *             deleted, and SHOULD have a non-zero HBAR balance.<br/>
     *           - The identified account SHALL be associated to this token.
     *           - The full balance of this token held by the prior treasury account
     *             SHALL be transferred to the new treasury account, if the token type
     *             is fungible/common.
     *           - If the token type is non-fungible/unique, the previous treasury
     *             account MUST NOT hold any tokens of this type.
     *           - The new treasury account key MUST sign this transaction.
     *     @type \Proto\Key $adminKey
     *          *
     *           An Hedera key for token administration.
     *           <p>
     *           This key, if set, SHALL have administrative authority for this token and
     *           MAY authorize token update and/or token delete transactions.<br/>
     *           If this key is set to an empty `KeyList`, this token SHALL be
     *           immutable thereafter, except for expiration and renewal.<br/>
     *           If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     *           If set to a valid key, the previous key and new key MUST both
     *           sign this transaction.
     *     @type \Proto\Key $kycKey
     *          *
     *           An Hedera key for managing account KYC.
     *           <p>
     *           This key, if set, SHALL have KYC authority for this token and
     *           MAY authorize transactions to grant or revoke KYC for accounts.<br/>
     *           If this key is not set, or is an empty `KeyList`, KYC status for this
     *           token SHALL NOT be granted or revoked for any account.<br/>
     *           If this key is removed after granting KYC, those grants SHALL remain
     *           and cannot be revoked.<br/>
     *           If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     *           If set to a valid key, the previous key and new key MUST both
     *           sign this transaction.
     *     @type \Proto\Key $freezeKey
     *          *
     *           An Hedera key for managing asset "freeze".
     *           <p>
     *           This key, if set, SHALL have "freeze" authority for this token and
     *           MAY authorize transactions to freeze or unfreeze accounts
     *           with respect to this token.<br/>
     *           If this key is set to an empty `KeyList`, this token
     *           SHALL NOT be frozen or unfrozen for any account.<br/>
     *           If this key is removed after freezing accounts, those accounts
     *           SHALL remain frozen and cannot be unfrozen.<br/>
     *           If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     *           If set to a valid key, the previous key and new key MUST both
     *           sign this transaction.
     *     @type \Proto\Key $wipeKey
     *          *
     *           An Hedera key for wiping tokens from accounts.
     *           <p>
     *           This key, if set, SHALL have "wipe" authority for this token and
     *           MAY authorize transactions to "wipe" any amount of this token from
     *           any account, effectively burning the tokens "wiped".<br/>
     *           If this key is set to an empty `KeyList`, it SHALL NOT be
     *           possible to "wipe" this token from an account.<br/>
     *           If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     *           If set to a valid key, the previous key and new key MUST both
     *           sign this transaction.
     *     @type \Proto\Key $supplyKey
     *          *
     *           An Hedera key for "minting" and "burning" tokens.
     *           <p>
     *           This key, if set, MAY authorize transactions to "mint" new tokens to
     *           be delivered to the token treasury or "burn" tokens held by the
     *           token treasury.<br/>
     *           If this key is set to an empty `KeyList`, it SHALL NOT be
     *           possible to change the supply of tokens and neither "mint" nor "burn"
     *           transactions SHALL be permitted.<br/>
     *           If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     *           If set to a valid key, the previous key and new key MUST both
     *           sign this transaction.
     *     @type \Proto\AccountID $autoRenewAccount
     *          *
     *           An identifier for the account to be charged renewal fees at the token's
     *           expiry to extend the lifetime of the token.
     *           <p>
     *           If this value is set for the identified token, the token lifetime SHALL
     *           be extended by the _smallest_ of the following at expiration:
     *           <ul>
     *             <li>The current `autoRenewPeriod` duration.</li>
     *             <li>The maximum duration that this account has funds to purchase.</li>
     *             <li>The configured MAX_AUTORENEW_PERIOD at the time of automatic
     *                 renewal.</li>
     *           </ul>
     *           If this account's HBAR balance is `0` when the token must be
     *           renewed, then the token SHALL be expired, and MAY be subsequently
     *           removed from state.<br/>
     *           If this value is set, the referenced account MUST sign this
     *           transaction.
     *           <p>
     *           <blockquote>Note<blockquote>
     *           It is not currently possible to remove an automatic renewal account.
     *           Once set, it can only be replaced by a valid account.
     *           </blockquote></blockquote>
     *     @type \Proto\Duration $autoRenewPeriod
     *          *
     *           A duration between token automatic renewals.<br/>
     *           All entities in state may be charged "rent" occasionally (typically
     *           every 90 days) to prevent unnecessary growth of the ledger. This value
     *           sets the interval between such events for this token.
     *           <p>
     *           If set, this value MUST be greater than the configured
     *           `MIN_AUTORENEW_PERIOD`.<br/>
     *           If set, this value MUST be less than the configured
     *           `MAX_AUTORENEW_PERIOD`.
     *     @type \Proto\Timestamp $expiry
     *          *
     *           An expiration timestamp.
     *           <p>
     *           If this value is set, the automatic renewal account is not set for the
     *           identified token, and token expiration is enabled in network
     *           configuration, this token SHALL expire when the consensus time exceeds
     *           this value, and MAY be subsequently removed from the network state.<br/>
     *           If `autoRenewAccount` is set or the `auto_renew_account_id` is set for
     *           the identified token, the token SHALL be subject to automatic renewal
     *           when the consensus time exceeds this value.
     *     @type \Google\Protobuf\StringValue $memo
     *          *
     *           A short description for this token.
     *           <p>
     *           This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     *           (default 100) bytes when encoded as UTF-8.
     *     @type \Proto\Key $fee_schedule_key
     *          *
     *           An Hedera key for managing the token custom fee schedule.
     *           <p>
     *           This key, if set, MAY authorize transactions to modify the
     *           `custom_fees` for this token.<br/>
     *           If this key is set to an empty `KeyList`, the `custom_fees`
     *           for this token SHALL NOT be modified.<br/>
     *           If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     *           If set to a valid key, the previous key and new key MUST both
     *           sign this transaction.
     *     @type \Proto\Key $pause_key
     *          *
     *           An Hedera key for managing token "pause".
     *           <p>
     *           This key, if set, SHALL have "pause" authority for this token and
     *           MAY authorize transactions to pause or unpause this token.<br/>
     *           If this key is set to an empty `KeyList`, this token
     *           SHALL NOT be paused or unpaused.<br/>
     *           If this key is removed while the token is paused, the token cannot
     *           be unpaused and SHALL remain paused.<br/>
     *           If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     *           If set to a valid key, the previous key and new key MUST both
     *           sign this transaction.
     *     @type \Google\Protobuf\BytesValue $metadata
     *          *
     *           Token "Metadata".
     *           <p>
     *           The value, if set, MUST NOT exceed 100 bytes.<br/>
     *           <dl><dt>Examples</dt>
     *             <dd>hcs://1/0.0.4896575</dd>
     *             <dd>ipfs://bafkreifd7tcjjuwxxf4qkaibkj62pj4mhfuud7plwrc3pfoygt55al6syi</dd>
     *           </dl>
     *     @type \Proto\Key $metadata_key
     *          *
     *           An Hedera key for managing the token `metadata`.
     *           <p>
     *           This key, if set, MAY authorize transactions to modify the
     *           `metadata` for this token.<br/>
     *           If this key is set to an empty `KeyList`, the `metadata`
     *           for this token SHALL NOT be modified.<br/>
     *           If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     *           If set to a valid key, the previous key and new key MUST both
     *           sign this transaction.
     *     @type int $key_verification_mode
     *          *
     *           Set a key validation mode.<br/>
     *           Any key may be updated by a transaction signed by the token `admin_key`.
     *           Each role key may _also_ sign a transaction to update that key.
     *           If a role key signs an update to change that role key both old
     *           and new key must sign the transaction, _unless_ this field is set
     *           to `NO_VALIDATION`, in which case the _new_ key is not required to
     *           sign the transaction (the existing key is still required).<br/>
     *           The primary intent for this field is to allow a role key (e.g. a
     *           `pause_key`) holder to "remove" that key from the token by signing
     *           a transaction to set that role key to an empty `KeyList`.
     *           <p>
     *           If set to `FULL_VALIDATION`, either the `admin_key` or _both_ current
     *           and new key MUST sign this transaction to update a "key" field for the
     *           identified token.<br/>
     *           If set to `NO_VALIDATION`, either the `admin_key` or the current
     *           key MUST sign this transaction to update a "key" field for the
     *           identified token.<br/>
     *           This field SHALL be treated as `FULL_VALIDATION` if not set.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\TokenUpdate::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A token identifier.
     * <p>
     * This SHALL identify the token type to delete.<br/>
     * The identified token MUST exist, and MUST NOT be deleted.<br/>
     * If any field other than `expiry` is set, the identified token MUST
     * have a valid `admin_key`.
     *
     * Generated from protobuf field <code>.proto.TokenID token = 1;</code>
     * @return \Proto\TokenID|null
     */
    public function getToken()
    {
        return $this->token;
    }

    public function hasToken()
    {
        return isset($this->token);
    }

    public function clearToken()
    {
        unset($this->token);
    }

    /**
     **
     * A token identifier.
     * <p>
     * This SHALL identify the token type to delete.<br/>
     * The identified token MUST exist, and MUST NOT be deleted.<br/>
     * If any field other than `expiry` is set, the identified token MUST
     * have a valid `admin_key`.
     *
     * Generated from protobuf field <code>.proto.TokenID token = 1;</code>
     * @param \Proto\TokenID $var
     * @return $this
     */
    public function setToken($var)
    {
        GPBUtil::checkMessage($var, \Proto\TokenID::class);
        $this->token = $var;

        return $this;
    }

    /**
     **
     * A new symbol to use for the token.
     * <p>
     * This value, if set, MUST NOT exceed 100 bytes when encoded as UTF-8.<br/>
     * This value, if set, MUST NOT contain the Unicode NUL codepoint.
     *
     * Generated from protobuf field <code>string symbol = 2;</code>
     * @return string
     */
    public function getSymbol()
    {
        return $this->symbol;
    }

    /**
     **
     * A new symbol to use for the token.
     * <p>
     * This value, if set, MUST NOT exceed 100 bytes when encoded as UTF-8.<br/>
     * This value, if set, MUST NOT contain the Unicode NUL codepoint.
     *
     * Generated from protobuf field <code>string symbol = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setSymbol($var)
    {
        GPBUtil::checkString($var, True);
        $this->symbol = $var;

        return $this;
    }

    /**
     **
     * A new name for the token.<br/>
     * This is generally the "full name" displayed in wallet software.
     * <p>
     * This value, if set, MUST NOT exceed 100 bytes when encoded as UTF-8.<br/>
     * This value, if set, MUST NOT contain the Unicode NUL codepoint.
     *
     * Generated from protobuf field <code>string name = 3;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     **
     * A new name for the token.<br/>
     * This is generally the "full name" displayed in wallet software.
     * <p>
     * This value, if set, MUST NOT exceed 100 bytes when encoded as UTF-8.<br/>
     * This value, if set, MUST NOT contain the Unicode NUL codepoint.
     *
     * Generated from protobuf field <code>string name = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     **
     * A new treasury account identifier.
     * <p>
     * If set,
     * - The identified account SHALL be designated the "treasury" for the
     *   token, and all tokens "minted" SHALL be delivered to that account
     *   following this transaction.<br/>
     * - The identified account MUST exist, MUST NOT be expired, MUST NOT be
     *   deleted, and SHOULD have a non-zero HBAR balance.<br/>
     * - The identified account SHALL be associated to this token.
     * - The full balance of this token held by the prior treasury account
     *   SHALL be transferred to the new treasury account, if the token type
     *   is fungible/common.
     * - If the token type is non-fungible/unique, the previous treasury
     *   account MUST NOT hold any tokens of this type.
     * - The new treasury account key MUST sign this transaction.
     *
     * Generated from protobuf field <code>.proto.AccountID treasury = 4;</code>
     * @return \Proto\AccountID|null
     */
    public function getTreasury()
    {
        return $this->treasury;
    }

    public function hasTreasury()
    {
        return isset($this->treasury);
    }

    public function clearTreasury()
    {
        unset($this->treasury);
    }

    /**
     **
     * A new treasury account identifier.
     * <p>
     * If set,
     * - The identified account SHALL be designated the "treasury" for the
     *   token, and all tokens "minted" SHALL be delivered to that account
     *   following this transaction.<br/>
     * - The identified account MUST exist, MUST NOT be expired, MUST NOT be
     *   deleted, and SHOULD have a non-zero HBAR balance.<br/>
     * - The identified account SHALL be associated to this token.
     * - The full balance of this token held by the prior treasury account
     *   SHALL be transferred to the new treasury account, if the token type
     *   is fungible/common.
     * - If the token type is non-fungible/unique, the previous treasury
     *   account MUST NOT hold any tokens of this type.
     * - The new treasury account key MUST sign this transaction.
     *
     * Generated from protobuf field <code>.proto.AccountID treasury = 4;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setTreasury($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->treasury = $var;

        return $this;
    }

    /**
     **
     * An Hedera key for token administration.
     * <p>
     * This key, if set, SHALL have administrative authority for this token and
     * MAY authorize token update and/or token delete transactions.<br/>
     * If this key is set to an empty `KeyList`, this token SHALL be
     * immutable thereafter, except for expiration and renewal.<br/>
     * If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     * If set to a valid key, the previous key and new key MUST both
     * sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key adminKey = 5;</code>
     * @return \Proto\Key|null
     */
    public function getAdminKey()
    {
        return $this->adminKey;
    }

    public function hasAdminKey()
    {
        return isset($this->adminKey);
    }

    public function clearAdminKey()
    {
        unset($this->adminKey);
    }

    /**
     **
     * An Hedera key for token administration.
     * <p>
     * This key, if set, SHALL have administrative authority for this token and
     * MAY authorize token update and/or token delete transactions.<br/>
     * If this key is set to an empty `KeyList`, this token SHALL be
     * immutable thereafter, except for expiration and renewal.<br/>
     * If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     * If set to a valid key, the previous key and new key MUST both
     * sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key adminKey = 5;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setAdminKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->adminKey = $var;

        return $this;
    }

    /**
     **
     * An Hedera key for managing account KYC.
     * <p>
     * This key, if set, SHALL have KYC authority for this token and
     * MAY authorize transactions to grant or revoke KYC for accounts.<br/>
     * If this key is not set, or is an empty `KeyList`, KYC status for this
     * token SHALL NOT be granted or revoked for any account.<br/>
     * If this key is removed after granting KYC, those grants SHALL remain
     * and cannot be revoked.<br/>
     * If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     * If set to a valid key, the previous key and new key MUST both
     * sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key kycKey = 6;</code>
     * @return \Proto\Key|null
     */
    public function getKycKey()
    {
        return $this->kycKey;
    }

    public function hasKycKey()
    {
        return isset($this->kycKey);
    }

    public function clearKycKey()
    {
        unset($this->kycKey);
    }

    /**
     **
     * An Hedera key for managing account KYC.
     * <p>
     * This key, if set, SHALL have KYC authority for this token and
     * MAY authorize transactions to grant or revoke KYC for accounts.<br/>
     * If this key is not set, or is an empty `KeyList`, KYC status for this
     * token SHALL NOT be granted or revoked for any account.<br/>
     * If this key is removed after granting KYC, those grants SHALL remain
     * and cannot be revoked.<br/>
     * If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     * If set to a valid key, the previous key and new key MUST both
     * sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key kycKey = 6;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setKycKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->kycKey = $var;

        return $this;
    }

    /**
     **
     * An Hedera key for managing asset "freeze".
     * <p>
     * This key, if set, SHALL have "freeze" authority for this token and
     * MAY authorize transactions to freeze or unfreeze accounts
     * with respect to this token.<br/>
     * If this key is set to an empty `KeyList`, this token
     * SHALL NOT be frozen or unfrozen for any account.<br/>
     * If this key is removed after freezing accounts, those accounts
     * SHALL remain frozen and cannot be unfrozen.<br/>
     * If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     * If set to a valid key, the previous key and new key MUST both
     * sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key freezeKey = 7;</code>
     * @return \Proto\Key|null
     */
    public function getFreezeKey()
    {
        return $this->freezeKey;
    }

    public function hasFreezeKey()
    {
        return isset($this->freezeKey);
    }

    public function clearFreezeKey()
    {
        unset($this->freezeKey);
    }

    /**
     **
     * An Hedera key for managing asset "freeze".
     * <p>
     * This key, if set, SHALL have "freeze" authority for this token and
     * MAY authorize transactions to freeze or unfreeze accounts
     * with respect to this token.<br/>
     * If this key is set to an empty `KeyList`, this token
     * SHALL NOT be frozen or unfrozen for any account.<br/>
     * If this key is removed after freezing accounts, those accounts
     * SHALL remain frozen and cannot be unfrozen.<br/>
     * If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     * If set to a valid key, the previous key and new key MUST both
     * sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key freezeKey = 7;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setFreezeKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->freezeKey = $var;

        return $this;
    }

    /**
     **
     * An Hedera key for wiping tokens from accounts.
     * <p>
     * This key, if set, SHALL have "wipe" authority for this token and
     * MAY authorize transactions to "wipe" any amount of this token from
     * any account, effectively burning the tokens "wiped".<br/>
     * If this key is set to an empty `KeyList`, it SHALL NOT be
     * possible to "wipe" this token from an account.<br/>
     * If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     * If set to a valid key, the previous key and new key MUST both
     * sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key wipeKey = 8;</code>
     * @return \Proto\Key|null
     */
    public function getWipeKey()
    {
        return $this->wipeKey;
    }

    public function hasWipeKey()
    {
        return isset($this->wipeKey);
    }

    public function clearWipeKey()
    {
        unset($this->wipeKey);
    }

    /**
     **
     * An Hedera key for wiping tokens from accounts.
     * <p>
     * This key, if set, SHALL have "wipe" authority for this token and
     * MAY authorize transactions to "wipe" any amount of this token from
     * any account, effectively burning the tokens "wiped".<br/>
     * If this key is set to an empty `KeyList`, it SHALL NOT be
     * possible to "wipe" this token from an account.<br/>
     * If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     * If set to a valid key, the previous key and new key MUST both
     * sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key wipeKey = 8;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setWipeKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->wipeKey = $var;

        return $this;
    }

    /**
     **
     * An Hedera key for "minting" and "burning" tokens.
     * <p>
     * This key, if set, MAY authorize transactions to "mint" new tokens to
     * be delivered to the token treasury or "burn" tokens held by the
     * token treasury.<br/>
     * If this key is set to an empty `KeyList`, it SHALL NOT be
     * possible to change the supply of tokens and neither "mint" nor "burn"
     * transactions SHALL be permitted.<br/>
     * If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     * If set to a valid key, the previous key and new key MUST both
     * sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key supplyKey = 9;</code>
     * @return \Proto\Key|null
     */
    public function getSupplyKey()
    {
        return $this->supplyKey;
    }

    public function hasSupplyKey()
    {
        return isset($this->supplyKey);
    }

    public function clearSupplyKey()
    {
        unset($this->supplyKey);
    }

    /**
     **
     * An Hedera key for "minting" and "burning" tokens.
     * <p>
     * This key, if set, MAY authorize transactions to "mint" new tokens to
     * be delivered to the token treasury or "burn" tokens held by the
     * token treasury.<br/>
     * If this key is set to an empty `KeyList`, it SHALL NOT be
     * possible to change the supply of tokens and neither "mint" nor "burn"
     * transactions SHALL be permitted.<br/>
     * If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     * If set to a valid key, the previous key and new key MUST both
     * sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key supplyKey = 9;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setSupplyKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->supplyKey = $var;

        return $this;
    }

    /**
     **
     * An identifier for the account to be charged renewal fees at the token's
     * expiry to extend the lifetime of the token.
     * <p>
     * If this value is set for the identified token, the token lifetime SHALL
     * be extended by the _smallest_ of the following at expiration:
     * <ul>
     *   <li>The current `autoRenewPeriod` duration.</li>
     *   <li>The maximum duration that this account has funds to purchase.</li>
     *   <li>The configured MAX_AUTORENEW_PERIOD at the time of automatic
     *       renewal.</li>
     * </ul>
     * If this account's HBAR balance is `0` when the token must be
     * renewed, then the token SHALL be expired, and MAY be subsequently
     * removed from state.<br/>
     * If this value is set, the referenced account MUST sign this
     * transaction.
     * <p>
     * <blockquote>Note<blockquote>
     * It is not currently possible to remove an automatic renewal account.
     * Once set, it can only be replaced by a valid account.
     * </blockquote></blockquote>
     *
     * Generated from protobuf field <code>.proto.AccountID autoRenewAccount = 10;</code>
     * @return \Proto\AccountID|null
     */
    public function getAutoRenewAccount()
    {
        return $this->autoRenewAccount;
    }

    public function hasAutoRenewAccount()
    {
        return isset($this->autoRenewAccount);
    }

    public function clearAutoRenewAccount()
    {
        unset($this->autoRenewAccount);
    }

    /**
     **
     * An identifier for the account to be charged renewal fees at the token's
     * expiry to extend the lifetime of the token.
     * <p>
     * If this value is set for the identified token, the token lifetime SHALL
     * be extended by the _smallest_ of the following at expiration:
     * <ul>
     *   <li>The current `autoRenewPeriod` duration.</li>
     *   <li>The maximum duration that this account has funds to purchase.</li>
     *   <li>The configured MAX_AUTORENEW_PERIOD at the time of automatic
     *       renewal.</li>
     * </ul>
     * If this account's HBAR balance is `0` when the token must be
     * renewed, then the token SHALL be expired, and MAY be subsequently
     * removed from state.<br/>
     * If this value is set, the referenced account MUST sign this
     * transaction.
     * <p>
     * <blockquote>Note<blockquote>
     * It is not currently possible to remove an automatic renewal account.
     * Once set, it can only be replaced by a valid account.
     * </blockquote></blockquote>
     *
     * Generated from protobuf field <code>.proto.AccountID autoRenewAccount = 10;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setAutoRenewAccount($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->autoRenewAccount = $var;

        return $this;
    }

    /**
     **
     * A duration between token automatic renewals.<br/>
     * All entities in state may be charged "rent" occasionally (typically
     * every 90 days) to prevent unnecessary growth of the ledger. This value
     * sets the interval between such events for this token.
     * <p>
     * If set, this value MUST be greater than the configured
     * `MIN_AUTORENEW_PERIOD`.<br/>
     * If set, this value MUST be less than the configured
     * `MAX_AUTORENEW_PERIOD`.
     *
     * Generated from protobuf field <code>.proto.Duration autoRenewPeriod = 11;</code>
     * @return \Proto\Duration|null
     */
    public function getAutoRenewPeriod()
    {
        return $this->autoRenewPeriod;
    }

    public function hasAutoRenewPeriod()
    {
        return isset($this->autoRenewPeriod);
    }

    public function clearAutoRenewPeriod()
    {
        unset($this->autoRenewPeriod);
    }

    /**
     **
     * A duration between token automatic renewals.<br/>
     * All entities in state may be charged "rent" occasionally (typically
     * every 90 days) to prevent unnecessary growth of the ledger. This value
     * sets the interval between such events for this token.
     * <p>
     * If set, this value MUST be greater than the configured
     * `MIN_AUTORENEW_PERIOD`.<br/>
     * If set, this value MUST be less than the configured
     * `MAX_AUTORENEW_PERIOD`.
     *
     * Generated from protobuf field <code>.proto.Duration autoRenewPeriod = 11;</code>
     * @param \Proto\Duration $var
     * @return $this
     */
    public function setAutoRenewPeriod($var)
    {
        GPBUtil::checkMessage($var, \Proto\Duration::class);
        $this->autoRenewPeriod = $var;

        return $this;
    }

    /**
     **
     * An expiration timestamp.
     * <p>
     * If this value is set, the automatic renewal account is not set for the
     * identified token, and token expiration is enabled in network
     * configuration, this token SHALL expire when the consensus time exceeds
     * this value, and MAY be subsequently removed from the network state.<br/>
     * If `autoRenewAccount` is set or the `auto_renew_account_id` is set for
     * the identified token, the token SHALL be subject to automatic renewal
     * when the consensus time exceeds this value.
     *
     * Generated from protobuf field <code>.proto.Timestamp expiry = 12;</code>
     * @return \Proto\Timestamp|null
     */
    public function getExpiry()
    {
        return $this->expiry;
    }

    public function hasExpiry()
    {
        return isset($this->expiry);
    }

    public function clearExpiry()
    {
        unset($this->expiry);
    }

    /**
     **
     * An expiration timestamp.
     * <p>
     * If this value is set, the automatic renewal account is not set for the
     * identified token, and token expiration is enabled in network
     * configuration, this token SHALL expire when the consensus time exceeds
     * this value, and MAY be subsequently removed from the network state.<br/>
     * If `autoRenewAccount` is set or the `auto_renew_account_id` is set for
     * the identified token, the token SHALL be subject to automatic renewal
     * when the consensus time exceeds this value.
     *
     * Generated from protobuf field <code>.proto.Timestamp expiry = 12;</code>
     * @param \Proto\Timestamp $var
     * @return $this
     */
    public function setExpiry($var)
    {
        GPBUtil::checkMessage($var, \Proto\Timestamp::class);
        $this->expiry = $var;

        return $this;
    }

    /**
     **
     * A short description for this token.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue memo = 13;</code>
     * @return \Google\Protobuf\StringValue|null
     */
    public function getMemo()
    {
        return $this->memo;
    }

    public function hasMemo()
    {
        return isset($this->memo);
    }

    public function clearMemo()
    {
        unset($this->memo);
    }

    /**
     * Returns the unboxed value from <code>getMemo()</code>

     **
     * A short description for this token.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue memo = 13;</code>
     * @return string|null
     */
    public function getMemoUnwrapped()
    {
        return $this->readWrapperValue("memo");
    }

    /**
     **
     * A short description for this token.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue memo = 13;</code>
     * @param \Google\Protobuf\StringValue $var
     * @return $this
     */
    public function setMemo($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\StringValue::class);
        $this->memo = $var;

        return $this;
    }

    /**
     * Sets the field by wrapping a primitive type in a Google\Protobuf\StringValue object.

     **
     * A short description for this token.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>.google.protobuf.StringValue memo = 13;</code>
     * @param string|null $var
     * @return $this
     */
    public function setMemoUnwrapped($var)
    {
        $this->writeWrapperValue("memo", $var);
        return $this;}

    /**
     **
     * An Hedera key for managing the token custom fee schedule.
     * <p>
     * This key, if set, MAY authorize transactions to modify the
     * `custom_fees` for this token.<br/>
     * If this key is set to an empty `KeyList`, the `custom_fees`
     * for this token SHALL NOT be modified.<br/>
     * If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     * If set to a valid key, the previous key and new key MUST both
     * sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key fee_schedule_key = 14;</code>
     * @return \Proto\Key|null
     */
    public function getFeeScheduleKey()
    {
        return $this->fee_schedule_key;
    }

    public function hasFeeScheduleKey()
    {
        return isset($this->fee_schedule_key);
    }

    public function clearFeeScheduleKey()
    {
        unset($this->fee_schedule_key);
    }

    /**
     **
     * An Hedera key for managing the token custom fee schedule.
     * <p>
     * This key, if set, MAY authorize transactions to modify the
     * `custom_fees` for this token.<br/>
     * If this key is set to an empty `KeyList`, the `custom_fees`
     * for this token SHALL NOT be modified.<br/>
     * If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     * If set to a valid key, the previous key and new key MUST both
     * sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key fee_schedule_key = 14;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setFeeScheduleKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->fee_schedule_key = $var;

        return $this;
    }

    /**
     **
     * An Hedera key for managing token "pause".
     * <p>
     * This key, if set, SHALL have "pause" authority for this token and
     * MAY authorize transactions to pause or unpause this token.<br/>
     * If this key is set to an empty `KeyList`, this token
     * SHALL NOT be paused or unpaused.<br/>
     * If this key is removed while the token is paused, the token cannot
     * be unpaused and SHALL remain paused.<br/>
     * If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     * If set to a valid key, the previous key and new key MUST both
     * sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key pause_key = 15;</code>
     * @return \Proto\Key|null
     */
    public function getPauseKey()
    {
        return $this->pause_key;
    }

    public function hasPauseKey()
    {
        return isset($this->pause_key);
    }

    public function clearPauseKey()
    {
        unset($this->pause_key);
    }

    /**
     **
     * An Hedera key for managing token "pause".
     * <p>
     * This key, if set, SHALL have "pause" authority for this token and
     * MAY authorize transactions to pause or unpause this token.<br/>
     * If this key is set to an empty `KeyList`, this token
     * SHALL NOT be paused or unpaused.<br/>
     * If this key is removed while the token is paused, the token cannot
     * be unpaused and SHALL remain paused.<br/>
     * If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     * If set to a valid key, the previous key and new key MUST both
     * sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key pause_key = 15;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setPauseKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->pause_key = $var;

        return $this;
    }

    /**
     **
     * Token "Metadata".
     * <p>
     * The value, if set, MUST NOT exceed 100 bytes.<br/>
     * <dl><dt>Examples</dt>
     *   <dd>hcs://1/0.0.4896575</dd>
     *   <dd>ipfs://bafkreifd7tcjjuwxxf4qkaibkj62pj4mhfuud7plwrc3pfoygt55al6syi</dd>
     * </dl>
     *
     * Generated from protobuf field <code>.google.protobuf.BytesValue metadata = 16;</code>
     * @return \Google\Protobuf\BytesValue|null
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    public function hasMetadata()
    {
        return isset($this->metadata);
    }

    public function clearMetadata()
    {
        unset($this->metadata);
    }

    /**
     * Returns the unboxed value from <code>getMetadata()</code>

     **
     * Token "Metadata".
     * <p>
     * The value, if set, MUST NOT exceed 100 bytes.<br/>
     * <dl><dt>Examples</dt>
     *   <dd>hcs://1/0.0.4896575</dd>
     *   <dd>ipfs://bafkreifd7tcjjuwxxf4qkaibkj62pj4mhfuud7plwrc3pfoygt55al6syi</dd>
     * </dl>
     *
     * Generated from protobuf field <code>.google.protobuf.BytesValue metadata = 16;</code>
     * @return string|null
     */
    public function getMetadataUnwrapped()
    {
        return $this->readWrapperValue("metadata");
    }

    /**
     **
     * Token "Metadata".
     * <p>
     * The value, if set, MUST NOT exceed 100 bytes.<br/>
     * <dl><dt>Examples</dt>
     *   <dd>hcs://1/0.0.4896575</dd>
     *   <dd>ipfs://bafkreifd7tcjjuwxxf4qkaibkj62pj4mhfuud7plwrc3pfoygt55al6syi</dd>
     * </dl>
     *
     * Generated from protobuf field <code>.google.protobuf.BytesValue metadata = 16;</code>
     * @param \Google\Protobuf\BytesValue $var
     * @return $this
     */
    public function setMetadata($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\BytesValue::class);
        $this->metadata = $var;

        return $this;
    }

    /**
     * Sets the field by wrapping a primitive type in a Google\Protobuf\BytesValue object.

     **
     * Token "Metadata".
     * <p>
     * The value, if set, MUST NOT exceed 100 bytes.<br/>
     * <dl><dt>Examples</dt>
     *   <dd>hcs://1/0.0.4896575</dd>
     *   <dd>ipfs://bafkreifd7tcjjuwxxf4qkaibkj62pj4mhfuud7plwrc3pfoygt55al6syi</dd>
     * </dl>
     *
     * Generated from protobuf field <code>.google.protobuf.BytesValue metadata = 16;</code>
     * @param string|null $var
     * @return $this
     */
    public function setMetadataUnwrapped($var)
    {
        $this->writeWrapperValue("metadata", $var);
        return $this;}

    /**
     **
     * An Hedera key for managing the token `metadata`.
     * <p>
     * This key, if set, MAY authorize transactions to modify the
     * `metadata` for this token.<br/>
     * If this key is set to an empty `KeyList`, the `metadata`
     * for this token SHALL NOT be modified.<br/>
     * If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     * If set to a valid key, the previous key and new key MUST both
     * sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key metadata_key = 17;</code>
     * @return \Proto\Key|null
     */
    public function getMetadataKey()
    {
        return $this->metadata_key;
    }

    public function hasMetadataKey()
    {
        return isset($this->metadata_key);
    }

    public function clearMetadataKey()
    {
        unset($this->metadata_key);
    }

    /**
     **
     * An Hedera key for managing the token `metadata`.
     * <p>
     * This key, if set, MAY authorize transactions to modify the
     * `metadata` for this token.<br/>
     * If this key is set to an empty `KeyList`, the `metadata`
     * for this token SHALL NOT be modified.<br/>
     * If set, this key MUST be a valid key or an empty `KeyList`.<br/>
     * If set to a valid key, the previous key and new key MUST both
     * sign this transaction.
     *
     * Generated from protobuf field <code>.proto.Key metadata_key = 17;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setMetadataKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->metadata_key = $var;

        return $this;
    }

    /**
     **
     * Set a key validation mode.<br/>
     * Any key may be updated by a transaction signed by the token `admin_key`.
     * Each role key may _also_ sign a transaction to update that key.
     * If a role key signs an update to change that role key both old
     * and new key must sign the transaction, _unless_ this field is set
     * to `NO_VALIDATION`, in which case the _new_ key is not required to
     * sign the transaction (the existing key is still required).<br/>
     * The primary intent for this field is to allow a role key (e.g. a
     * `pause_key`) holder to "remove" that key from the token by signing
     * a transaction to set that role key to an empty `KeyList`.
     * <p>
     * If set to `FULL_VALIDATION`, either the `admin_key` or _both_ current
     * and new key MUST sign this transaction to update a "key" field for the
     * identified token.<br/>
     * If set to `NO_VALIDATION`, either the `admin_key` or the current
     * key MUST sign this transaction to update a "key" field for the
     * identified token.<br/>
     * This field SHALL be treated as `FULL_VALIDATION` if not set.
     *
     * Generated from protobuf field <code>.proto.TokenKeyValidation key_verification_mode = 18;</code>
     * @return int
     */
    public function getKeyVerificationMode()
    {
        return $this->key_verification_mode;
    }

    /**
     **
     * Set a key validation mode.<br/>
     * Any key may be updated by a transaction signed by the token `admin_key`.
     * Each role key may _also_ sign a transaction to update that key.
     * If a role key signs an update to change that role key both old
     * and new key must sign the transaction, _unless_ this field is set
     * to `NO_VALIDATION`, in which case the _new_ key is not required to
     * sign the transaction (the existing key is still required).<br/>
     * The primary intent for this field is to allow a role key (e.g. a
     * `pause_key`) holder to "remove" that key from the token by signing
     * a transaction to set that role key to an empty `KeyList`.
     * <p>
     * If set to `FULL_VALIDATION`, either the `admin_key` or _both_ current
     * and new key MUST sign this transaction to update a "key" field for the
     * identified token.<br/>
     * If set to `NO_VALIDATION`, either the `admin_key` or the current
     * key MUST sign this transaction to update a "key" field for the
     * identified token.<br/>
     * This field SHALL be treated as `FULL_VALIDATION` if not set.
     *
     * Generated from protobuf field <code>.proto.TokenKeyValidation key_verification_mode = 18;</code>
     * @param int $var
     * @return $this
     */
    public function setKeyVerificationMode($var)
    {
        GPBUtil::checkEnum($var, \Proto\TokenKeyValidation::class);
        $this->key_verification_mode = $var;

        return $this;
    }

}

