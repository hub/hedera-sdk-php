<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: transaction.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * A wrapper around signed transaction bytes.<br/>
 * This was originally a transaction with body, signatures, and/or bytes,
 * but is not only a wrapper around a byte array containing signed transction
 * bytes.
 * The `signedTransactionBytes` field is REQUIRED and MUST contain a valid,
 * serialized, `SignedTransaction` message.<br/>
 * All other fields are deprecated and MUST NOT be set.
 * #### Additional Notes
 * The four deprecated fields will be removed and reserved in a future release.
 *
 * Generated from protobuf message <code>proto.Transaction</code>
 */
class Transaction extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * Replaced with `signedTransactionBytes`.<br/>
     * The body of the transaction.
     *
     * Generated from protobuf field <code>.proto.TransactionBody body = 1 [deprecated = true];</code>
     * @deprecated
     */
    protected $body = null;
    /**
     **
     * Replaced with `signedTransactionBytes`.<br/>
     * The signatures on the body.
     *
     * Generated from protobuf field <code>.proto.SignatureList sigs = 2 [deprecated = true];</code>
     * @deprecated
     */
    protected $sigs = null;
    /**
     **
     * Replaced with `signedTransactionBytes`.<br/>
     * The signatures on the body with a newer format.
     *
     * Generated from protobuf field <code>.proto.SignatureMap sigMap = 3 [deprecated = true];</code>
     * @deprecated
     */
    protected $sigMap = null;
    /**
     **
     * Replaced with `signedTransactionBytes`.<br/>
     * TransactionBody serialized into bytes.
     *
     * Generated from protobuf field <code>bytes bodyBytes = 4 [deprecated = true];</code>
     * @deprecated
     */
    protected $bodyBytes = '';
    /**
     **
     * A valid, serialized, `SignedTransaction` message.
     * <p>
     * This field MUST be present.
     * This field MUST NOT exceed the current network transaction size limit
     * (currently 6144 bytes).
     *
     * Generated from protobuf field <code>bytes signedTransactionBytes = 5;</code>
     */
    protected $signedTransactionBytes = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\TransactionBody $body
     *          *
     *           Replaced with `signedTransactionBytes`.<br/>
     *           The body of the transaction.
     *     @type \Proto\SignatureList $sigs
     *          *
     *           Replaced with `signedTransactionBytes`.<br/>
     *           The signatures on the body.
     *     @type \Proto\SignatureMap $sigMap
     *          *
     *           Replaced with `signedTransactionBytes`.<br/>
     *           The signatures on the body with a newer format.
     *     @type string $bodyBytes
     *          *
     *           Replaced with `signedTransactionBytes`.<br/>
     *           TransactionBody serialized into bytes.
     *     @type string $signedTransactionBytes
     *          *
     *           A valid, serialized, `SignedTransaction` message.
     *           <p>
     *           This field MUST be present.
     *           This field MUST NOT exceed the current network transaction size limit
     *           (currently 6144 bytes).
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Transaction::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * Replaced with `signedTransactionBytes`.<br/>
     * The body of the transaction.
     *
     * Generated from protobuf field <code>.proto.TransactionBody body = 1 [deprecated = true];</code>
     * @return \Proto\TransactionBody|null
     * @deprecated
     */
    public function getBody()
    {
        if (isset($this->body)) {
            @trigger_error('body is deprecated.', E_USER_DEPRECATED);
        }
        return $this->body;
    }

    public function hasBody()
    {
        if (isset($this->body)) {
            @trigger_error('body is deprecated.', E_USER_DEPRECATED);
        }
        return isset($this->body);
    }

    public function clearBody()
    {
        @trigger_error('body is deprecated.', E_USER_DEPRECATED);
        unset($this->body);
    }

    /**
     **
     * Replaced with `signedTransactionBytes`.<br/>
     * The body of the transaction.
     *
     * Generated from protobuf field <code>.proto.TransactionBody body = 1 [deprecated = true];</code>
     * @param \Proto\TransactionBody $var
     * @return $this
     * @deprecated
     */
    public function setBody($var)
    {
        @trigger_error('body is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkMessage($var, \Proto\TransactionBody::class);
        $this->body = $var;

        return $this;
    }

    /**
     **
     * Replaced with `signedTransactionBytes`.<br/>
     * The signatures on the body.
     *
     * Generated from protobuf field <code>.proto.SignatureList sigs = 2 [deprecated = true];</code>
     * @return \Proto\SignatureList|null
     * @deprecated
     */
    public function getSigs()
    {
        if (isset($this->sigs)) {
            @trigger_error('sigs is deprecated.', E_USER_DEPRECATED);
        }
        return $this->sigs;
    }

    public function hasSigs()
    {
        if (isset($this->sigs)) {
            @trigger_error('sigs is deprecated.', E_USER_DEPRECATED);
        }
        return isset($this->sigs);
    }

    public function clearSigs()
    {
        @trigger_error('sigs is deprecated.', E_USER_DEPRECATED);
        unset($this->sigs);
    }

    /**
     **
     * Replaced with `signedTransactionBytes`.<br/>
     * The signatures on the body.
     *
     * Generated from protobuf field <code>.proto.SignatureList sigs = 2 [deprecated = true];</code>
     * @param \Proto\SignatureList $var
     * @return $this
     * @deprecated
     */
    public function setSigs($var)
    {
        @trigger_error('sigs is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkMessage($var, \Proto\SignatureList::class);
        $this->sigs = $var;

        return $this;
    }

    /**
     **
     * Replaced with `signedTransactionBytes`.<br/>
     * The signatures on the body with a newer format.
     *
     * Generated from protobuf field <code>.proto.SignatureMap sigMap = 3 [deprecated = true];</code>
     * @return \Proto\SignatureMap|null
     * @deprecated
     */
    public function getSigMap()
    {
        if (isset($this->sigMap)) {
            @trigger_error('sigMap is deprecated.', E_USER_DEPRECATED);
        }
        return $this->sigMap;
    }

    public function hasSigMap()
    {
        if (isset($this->sigMap)) {
            @trigger_error('sigMap is deprecated.', E_USER_DEPRECATED);
        }
        return isset($this->sigMap);
    }

    public function clearSigMap()
    {
        @trigger_error('sigMap is deprecated.', E_USER_DEPRECATED);
        unset($this->sigMap);
    }

    /**
     **
     * Replaced with `signedTransactionBytes`.<br/>
     * The signatures on the body with a newer format.
     *
     * Generated from protobuf field <code>.proto.SignatureMap sigMap = 3 [deprecated = true];</code>
     * @param \Proto\SignatureMap $var
     * @return $this
     * @deprecated
     */
    public function setSigMap($var)
    {
        @trigger_error('sigMap is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkMessage($var, \Proto\SignatureMap::class);
        $this->sigMap = $var;

        return $this;
    }

    /**
     **
     * Replaced with `signedTransactionBytes`.<br/>
     * TransactionBody serialized into bytes.
     *
     * Generated from protobuf field <code>bytes bodyBytes = 4 [deprecated = true];</code>
     * @return string
     * @deprecated
     */
    public function getBodyBytes()
    {
        if ($this->bodyBytes !== '') {
            @trigger_error('bodyBytes is deprecated.', E_USER_DEPRECATED);
        }
        return $this->bodyBytes;
    }

    /**
     **
     * Replaced with `signedTransactionBytes`.<br/>
     * TransactionBody serialized into bytes.
     *
     * Generated from protobuf field <code>bytes bodyBytes = 4 [deprecated = true];</code>
     * @param string $var
     * @return $this
     * @deprecated
     */
    public function setBodyBytes($var)
    {
        @trigger_error('bodyBytes is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkString($var, False);
        $this->bodyBytes = $var;

        return $this;
    }

    /**
     **
     * A valid, serialized, `SignedTransaction` message.
     * <p>
     * This field MUST be present.
     * This field MUST NOT exceed the current network transaction size limit
     * (currently 6144 bytes).
     *
     * Generated from protobuf field <code>bytes signedTransactionBytes = 5;</code>
     * @return string
     */
    public function getSignedTransactionBytes()
    {
        return $this->signedTransactionBytes;
    }

    /**
     **
     * A valid, serialized, `SignedTransaction` message.
     * <p>
     * This field MUST be present.
     * This field MUST NOT exceed the current network transaction size limit
     * (currently 6144 bytes).
     *
     * Generated from protobuf field <code>bytes signedTransactionBytes = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setSignedTransactionBytes($var)
    {
        GPBUtil::checkString($var, False);
        $this->signedTransactionBytes = $var;

        return $this;
    }

}

