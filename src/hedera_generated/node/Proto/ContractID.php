<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: basic_types.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * An identifier for a smart contract within the network.
 *
 * Generated from protobuf message <code>proto.ContractID</code>
 */
class ContractID extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A whole number shard identifier.
     *
     * Generated from protobuf field <code>int64 shardNum = 1;</code>
     */
    protected $shardNum = 0;
    /**
     **
     * A whole number realm identifier.
     *
     * Generated from protobuf field <code>int64 realmNum = 2;</code>
     */
    protected $realmNum = 0;
    protected $contract;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $shardNum
     *          *
     *           A whole number shard identifier.
     *     @type int|string $realmNum
     *          *
     *           A whole number realm identifier.
     *     @type int|string $contractNum
     *          *
     *           A whole number contract identifier, unique within its realm and shard.
     *     @type string $evm_address
     *          *
     *           A 20-byte EVM address of the contract to call.
     *           <p>
     *           A contract created via a HAPI `ContractCreate` call SHALL have
     *           an EVM address determined by its `shard.realm.num` identifier.<br/>
     *           This address is as follows
     *           <ol>
     *               <li>4 byte big-endian shard number</li>
     *               <li>8 byte big-endian realm number</li>
     *               <li>8 byte big-endian contract number</li>
     *           </ol>
     *           This address is not stored in state, but is computed when needed.
     *           <p>
     *           Contracts created by any other means, including a HAPI
     *           `EthereumTransaction` whose `to` address is the zero address,
     *           SHALL have the EVM address prescribed by the `CREATE` or
     *           `CREATE2` opcode, as applicable.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\BasicTypes::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A whole number shard identifier.
     *
     * Generated from protobuf field <code>int64 shardNum = 1;</code>
     * @return int|string
     */
    public function getShardNum()
    {
        return $this->shardNum;
    }

    /**
     **
     * A whole number shard identifier.
     *
     * Generated from protobuf field <code>int64 shardNum = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setShardNum($var)
    {
        GPBUtil::checkInt64($var);
        $this->shardNum = $var;

        return $this;
    }

    /**
     **
     * A whole number realm identifier.
     *
     * Generated from protobuf field <code>int64 realmNum = 2;</code>
     * @return int|string
     */
    public function getRealmNum()
    {
        return $this->realmNum;
    }

    /**
     **
     * A whole number realm identifier.
     *
     * Generated from protobuf field <code>int64 realmNum = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setRealmNum($var)
    {
        GPBUtil::checkInt64($var);
        $this->realmNum = $var;

        return $this;
    }

    /**
     **
     * A whole number contract identifier, unique within its realm and shard.
     *
     * Generated from protobuf field <code>int64 contractNum = 3;</code>
     * @return int|string
     */
    public function getContractNum()
    {
        return $this->readOneof(3);
    }

    public function hasContractNum()
    {
        return $this->hasOneof(3);
    }

    /**
     **
     * A whole number contract identifier, unique within its realm and shard.
     *
     * Generated from protobuf field <code>int64 contractNum = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setContractNum($var)
    {
        GPBUtil::checkInt64($var);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     **
     * A 20-byte EVM address of the contract to call.
     * <p>
     * A contract created via a HAPI `ContractCreate` call SHALL have
     * an EVM address determined by its `shard.realm.num` identifier.<br/>
     * This address is as follows
     * <ol>
     *     <li>4 byte big-endian shard number</li>
     *     <li>8 byte big-endian realm number</li>
     *     <li>8 byte big-endian contract number</li>
     * </ol>
     * This address is not stored in state, but is computed when needed.
     * <p>
     * Contracts created by any other means, including a HAPI
     * `EthereumTransaction` whose `to` address is the zero address,
     * SHALL have the EVM address prescribed by the `CREATE` or
     * `CREATE2` opcode, as applicable.
     *
     * Generated from protobuf field <code>bytes evm_address = 4;</code>
     * @return string
     */
    public function getEvmAddress()
    {
        return $this->readOneof(4);
    }

    public function hasEvmAddress()
    {
        return $this->hasOneof(4);
    }

    /**
     **
     * A 20-byte EVM address of the contract to call.
     * <p>
     * A contract created via a HAPI `ContractCreate` call SHALL have
     * an EVM address determined by its `shard.realm.num` identifier.<br/>
     * This address is as follows
     * <ol>
     *     <li>4 byte big-endian shard number</li>
     *     <li>8 byte big-endian realm number</li>
     *     <li>8 byte big-endian contract number</li>
     * </ol>
     * This address is not stored in state, but is computed when needed.
     * <p>
     * Contracts created by any other means, including a HAPI
     * `EthereumTransaction` whose `to` address is the zero address,
     * SHALL have the EVM address prescribed by the `CREATE` or
     * `CREATE2` opcode, as applicable.
     *
     * Generated from protobuf field <code>bytes evm_address = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setEvmAddress($var)
    {
        GPBUtil::checkString($var, False);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getContract()
    {
        return $this->whichOneof("contract");
    }

}

