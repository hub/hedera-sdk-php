<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: basic_types.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * A Key is an entity representing one or more cryptographic public/private key
 * pairs and, optionally, the structure for how multiple signatures may be
 * composed to meet complex multiple-signature authorization requirements.
 * A Key can be a public key from either the Ed25519 or ECDSA(secp256k1)
 * signature schemes. In the ECDSA(secp256k1) case we require the 33-byte
 * compressed form of the public key. For simplicity, we call these
 * cryptographic public keys `primitive` keys.<br/>
 * If an entity has a primitive key associated to it, then the corresponding
 * private key must sign any transaction to send tokens or perform other
 * actions requiring authorization.
 * A Key can also be the ID of a smart contract, which SHALL authorize that
 * contract to execute any system contract with signing requirements that are
 * met by the key.<br/>
 * > Example
 * >> If account `0.0.A` has a threshold key whose threshold is satisfied
 * >> by a contract ID key for contract `0.0.C`, then when `0.0.C` is called,
 * >> it is authorized to use system contracts to manage any asset owned by
 * >> `0.0.A`. If the contract ID key is "delegatable", then `0.0.C` can even
 * >> perform these actions when running code accessed via `DELEGATECALL`.
 * A Key can be a "threshold key", which is a list of N keys, any M of which
 * may sign in order for the signature to be considered valid. The value of
 * M for a given threshold key MUST be less than or equal to N. A threshold
 * key is sometimes called a "M-of-N" key.
 * A Key can be a "key list" where all keys in the list must sign unless
 * specified otherwise in the documentation for a specific transaction
 * type (e.g. FileDeleteTransactionBody).<br/>
 * This implies that the use of a key list is dependent on context. For
 * example, an Hedera file that is created with a list of keys, SHALL require
 * that all of those keys must sign a transaction to create or modify the file,
 * but only one key from that list MUST sign a transaction to delete the file.
 * So it is a single list that sometimes acts as a N-of-N threshold key, and
 * sometimes acts as a 1-of-N threshold key.<br/>
 * To reduce confusion this may cause, a key list SHALL always be considered
 * N-of-N, unless specified otherwise in official documentation.<br/>
 * A key list MAY have repeated primitive public keys, but the signature
 * requirement for all keys in a repeated set SHALL be satisfied by a single
 * valid signature. There is no mechanism to require a single key to sign a
 * single transaction more than once.
 * Any list or threshold key MAY have nested key lists or threshold keys.
 * This allows, for example, the keys within a threshold signature to
 * themselves be threshold, list, contract, or primitive keys. This nesting
 * structure enables complex asymmetric multi-party signature requirements to
 * be met.
 * To ensure adequate performance and transaction security, key nesting is
 * limited to at most fifteen(15) levels.
 *
 * Generated from protobuf message <code>proto.Key</code>
 */
class Key extends \Google\Protobuf\Internal\Message
{
    protected $key;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\ContractID $contractID
     *          *
     *           A smart contract instance that is authorized implicitly.
     *           <p>
     *           This key type SHALL require that the code in the active message frame
     *           belong to the contract with the given id.
     *     @type string $ed25519
     *          *
     *           An array of Ed25519 public key bytes.
     *     @type string $RSA_3072
     *          *
     *           This option is not currently supported.<br/>
     *           An array of RSA-3072 public key bytes.
     *     @type string $ECDSA_384
     *          *
     *           This option is not currently supported.<br/>
     *           An array of ECDSA, using the p-384 curve, public key bytes.
     *     @type \Proto\ThresholdKey $thresholdKey
     *          *
     *           A threshold, M, combined with a list of N keys, any M of which are
     *           sufficient to form a valid signature.
     *     @type \Proto\KeyList $keyList
     *          *
     *           A list of keys. This may be treated like a "N-of-N" threshold key,
     *           as a component of another key, or in some other manner as documented.
     *     @type string $ECDSA_secp256k1
     *          *
     *           A set of compressed ECDSA(secp256k1) public key bytes.<br/>
     *           This is an EVM compatibility format.
     *     @type \Proto\ContractID $delegatable_contract_id
     *          *
     *           A smart contract that, if the recipient of the active message frame,
     *           SHALL be imputed authorization.<br/>
     *           Setting this key type is a more permissive version of setting a
     *           contractID key.
     *           <p>
     *           This key form SHALL NOT strictly require that the code being executed
     *           in the frame belong to the given contract. The code in frame MAY be
     *           running another contract via a `delegatecall`.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\BasicTypes::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A smart contract instance that is authorized implicitly.
     * <p>
     * This key type SHALL require that the code in the active message frame
     * belong to the contract with the given id.
     *
     * Generated from protobuf field <code>.proto.ContractID contractID = 1;</code>
     * @return \Proto\ContractID|null
     */
    public function getContractID()
    {
        return $this->readOneof(1);
    }

    public function hasContractID()
    {
        return $this->hasOneof(1);
    }

    /**
     **
     * A smart contract instance that is authorized implicitly.
     * <p>
     * This key type SHALL require that the code in the active message frame
     * belong to the contract with the given id.
     *
     * Generated from protobuf field <code>.proto.ContractID contractID = 1;</code>
     * @param \Proto\ContractID $var
     * @return $this
     */
    public function setContractID($var)
    {
        GPBUtil::checkMessage($var, \Proto\ContractID::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     **
     * An array of Ed25519 public key bytes.
     *
     * Generated from protobuf field <code>bytes ed25519 = 2;</code>
     * @return string
     */
    public function getEd25519()
    {
        return $this->readOneof(2);
    }

    public function hasEd25519()
    {
        return $this->hasOneof(2);
    }

    /**
     **
     * An array of Ed25519 public key bytes.
     *
     * Generated from protobuf field <code>bytes ed25519 = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setEd25519($var)
    {
        GPBUtil::checkString($var, False);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     **
     * This option is not currently supported.<br/>
     * An array of RSA-3072 public key bytes.
     *
     * Generated from protobuf field <code>bytes RSA_3072 = 3 [deprecated = true];</code>
     * @return string
     * @deprecated
     */
    public function getRSA3072()
    {
        if ($this->hasOneof(3)) {
            @trigger_error('RSA_3072 is deprecated.', E_USER_DEPRECATED);
        }
        return $this->readOneof(3);
    }

    public function hasRSA3072()
    {
        if ($this->hasOneof(3)) {
            @trigger_error('RSA_3072 is deprecated.', E_USER_DEPRECATED);
        }
        return $this->hasOneof(3);
    }

    /**
     **
     * This option is not currently supported.<br/>
     * An array of RSA-3072 public key bytes.
     *
     * Generated from protobuf field <code>bytes RSA_3072 = 3 [deprecated = true];</code>
     * @param string $var
     * @return $this
     * @deprecated
     */
    public function setRSA3072($var)
    {
        @trigger_error('RSA_3072 is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkString($var, False);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     **
     * This option is not currently supported.<br/>
     * An array of ECDSA, using the p-384 curve, public key bytes.
     *
     * Generated from protobuf field <code>bytes ECDSA_384 = 4 [deprecated = true];</code>
     * @return string
     * @deprecated
     */
    public function getECDSA384()
    {
        if ($this->hasOneof(4)) {
            @trigger_error('ECDSA_384 is deprecated.', E_USER_DEPRECATED);
        }
        return $this->readOneof(4);
    }

    public function hasECDSA384()
    {
        if ($this->hasOneof(4)) {
            @trigger_error('ECDSA_384 is deprecated.', E_USER_DEPRECATED);
        }
        return $this->hasOneof(4);
    }

    /**
     **
     * This option is not currently supported.<br/>
     * An array of ECDSA, using the p-384 curve, public key bytes.
     *
     * Generated from protobuf field <code>bytes ECDSA_384 = 4 [deprecated = true];</code>
     * @param string $var
     * @return $this
     * @deprecated
     */
    public function setECDSA384($var)
    {
        @trigger_error('ECDSA_384 is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkString($var, False);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     **
     * A threshold, M, combined with a list of N keys, any M of which are
     * sufficient to form a valid signature.
     *
     * Generated from protobuf field <code>.proto.ThresholdKey thresholdKey = 5;</code>
     * @return \Proto\ThresholdKey|null
     */
    public function getThresholdKey()
    {
        return $this->readOneof(5);
    }

    public function hasThresholdKey()
    {
        return $this->hasOneof(5);
    }

    /**
     **
     * A threshold, M, combined with a list of N keys, any M of which are
     * sufficient to form a valid signature.
     *
     * Generated from protobuf field <code>.proto.ThresholdKey thresholdKey = 5;</code>
     * @param \Proto\ThresholdKey $var
     * @return $this
     */
    public function setThresholdKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\ThresholdKey::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     **
     * A list of keys. This may be treated like a "N-of-N" threshold key,
     * as a component of another key, or in some other manner as documented.
     *
     * Generated from protobuf field <code>.proto.KeyList keyList = 6;</code>
     * @return \Proto\KeyList|null
     */
    public function getKeyList()
    {
        return $this->readOneof(6);
    }

    public function hasKeyList()
    {
        return $this->hasOneof(6);
    }

    /**
     **
     * A list of keys. This may be treated like a "N-of-N" threshold key,
     * as a component of another key, or in some other manner as documented.
     *
     * Generated from protobuf field <code>.proto.KeyList keyList = 6;</code>
     * @param \Proto\KeyList $var
     * @return $this
     */
    public function setKeyList($var)
    {
        GPBUtil::checkMessage($var, \Proto\KeyList::class);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     **
     * A set of compressed ECDSA(secp256k1) public key bytes.<br/>
     * This is an EVM compatibility format.
     *
     * Generated from protobuf field <code>bytes ECDSA_secp256k1 = 7;</code>
     * @return string
     */
    public function getECDSASecp256K1()
    {
        return $this->readOneof(7);
    }

    public function hasECDSASecp256K1()
    {
        return $this->hasOneof(7);
    }

    /**
     **
     * A set of compressed ECDSA(secp256k1) public key bytes.<br/>
     * This is an EVM compatibility format.
     *
     * Generated from protobuf field <code>bytes ECDSA_secp256k1 = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setECDSASecp256K1($var)
    {
        GPBUtil::checkString($var, False);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     **
     * A smart contract that, if the recipient of the active message frame,
     * SHALL be imputed authorization.<br/>
     * Setting this key type is a more permissive version of setting a
     * contractID key.
     * <p>
     * This key form SHALL NOT strictly require that the code being executed
     * in the frame belong to the given contract. The code in frame MAY be
     * running another contract via a `delegatecall`.
     *
     * Generated from protobuf field <code>.proto.ContractID delegatable_contract_id = 8;</code>
     * @return \Proto\ContractID|null
     */
    public function getDelegatableContractId()
    {
        return $this->readOneof(8);
    }

    public function hasDelegatableContractId()
    {
        return $this->hasOneof(8);
    }

    /**
     **
     * A smart contract that, if the recipient of the active message frame,
     * SHALL be imputed authorization.<br/>
     * Setting this key type is a more permissive version of setting a
     * contractID key.
     * <p>
     * This key form SHALL NOT strictly require that the code being executed
     * in the frame belong to the given contract. The code in frame MAY be
     * running another contract via a `delegatecall`.
     *
     * Generated from protobuf field <code>.proto.ContractID delegatable_contract_id = 8;</code>
     * @param \Proto\ContractID $var
     * @return $this
     */
    public function setDelegatableContractId($var)
    {
        GPBUtil::checkMessage($var, \Proto\ContractID::class);
        $this->writeOneof(8, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getKey()
    {
        return $this->whichOneof("key");
    }

}

