<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: query.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * A query transaction.<br/>
 * This message is serialized to bytes and those bytes are signed by the
 * submitter, with the signature included in the QueryHeader for the query
 * request.
 *
 * Generated from protobuf message <code>proto.Query</code>
 */
class Query extends \Google\Protobuf\Internal\Message
{
    protected $query;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\GetByKeyQuery $getByKey
     *          *
     *           Get all entities associated with a given key.
     *     @type \Proto\GetBySolidityIDQuery $getBySolidityID
     *          *
     *           Get an Hedera identifier associated with an identifier in EVM
     *           "Solidity" form.<br/>
     *           Most often used in smart contracts to find an Hedera account,
     *           file, or contract identifier to pass to a system contract or
     *           precompile.
     *     @type \Proto\ContractCallLocalQuery $contractCallLocal
     *          *
     *           Call a function of a smart contract.<br/>
     *           This call is executed exclusively on the node to which it is
     *           submitted, and is much less expensive than a `contractCall`
     *           transaction.
     *     @type \Proto\ContractGetInfoQuery $contractGetInfo
     *          *
     *           Get information about a smart contract.
     *     @type \Proto\ContractGetBytecodeQuery $contractGetBytecode
     *          *
     *           Get runtime bytecode used by a smart contract.
     *     @type \Proto\ContractGetRecordsQuery $ContractGetRecords
     *          *
     *           This query is unsupported and SHALL fail.<br/>
     *           Requests for this information MUST be directed to a mirror node.
     *           <p>
     *           Get Records of a smart contract.
     *     @type \Proto\CryptoGetAccountBalanceQuery $cryptogetAccountBalance
     *          *
     *           Get the current HBAR balance of an Hedera account or smart contract.
     *     @type \Proto\CryptoGetAccountRecordsQuery $cryptoGetAccountRecords
     *          *
     *           Get records of all "recent" transactions for which a specified
     *           account is the effective payer.
     *     @type \Proto\CryptoGetInfoQuery $cryptoGetInfo
     *          *
     *           Get information about an account, including the balance.<br/>
     *           This does not get the list of account records.
     *     @type \Proto\CryptoGetLiveHashQuery $cryptoGetLiveHash
     *          *
     *           This query is unsupported and SHALL fail.<br/>
     *           Requests for this information MUST be directed to a mirror node.
     *           <p>
     *           Get a single livehash from a single account, if present.
     *     @type \Proto\CryptoGetStakersQuery $cryptoGetProxyStakers
     *          *
     *           This query is unsupported and SHALL fail.<br/>
     *           Requests for this information MUST be directed to a mirror node.
     *           <p>
     *           Get all the accounts that are proxy staking to this account.
     *     @type \Proto\FileGetContentsQuery $fileGetContents
     *          *
     *           Get the content of a file.
     *     @type \Proto\FileGetInfoQuery $fileGetInfo
     *          *
     *           Get metadata for a file.
     *     @type \Proto\TransactionGetReceiptQuery $transactionGetReceipt
     *          *
     *           Get a receipt for a transaction.<br/>
     *           This only returns a receipt if the transaction is "recent", which
     *           is typically within the previous 180 seconds (3 minutes).
     *     @type \Proto\TransactionGetRecordQuery $transactionGetRecord
     *          *
     *           Get a record for a transaction.
     *           This only returns a record if the transaction is "available", which
     *           is typically within the previous 1 hour.
     *     @type \Proto\TransactionGetFastRecordQuery $transactionGetFastRecord
     *          *
     *           Get a record for a transaction.
     *           This only returns a record if the transaction is "recent", which
     *           is typically within the previous 180 seconds (3 minutes).
     *     @type \Proto\ConsensusGetTopicInfoQuery $consensusGetTopicInfo
     *          *
     *           Get metadata for a consensus topic.
     *     @type \Proto\NetworkGetVersionInfoQuery $networkGetVersionInfo
     *          *
     *           Get the versions of Hedera Services and the HAPI API deployed on
     *           the responding consensus node.
     *     @type \Proto\TokenGetInfoQuery $tokenGetInfo
     *          *
     *           Get metadata for a token.
     *     @type \Proto\ScheduleGetInfoQuery $scheduleGetInfo
     *          *
     *           Get metadata for a schedule.<br/>
     *           A schedule is a request to execute a transaction at a future
     *           time.
     *     @type \Proto\TokenGetAccountNftInfosQuery $tokenGetAccountNftInfos
     *          *
     *           This query is unsupported and SHALL fail.<br/>
     *           Requests for this information MUST be directed to a mirror node.
     *           <p>
     *           Get a list of non-fungible/unique tokens associated with an account.
     *     @type \Proto\TokenGetNftInfoQuery $tokenGetNftInfo
     *          *
     *           Get metadata for a specific, serial numbered, non-fungible/unique
     *           token (NFT).
     *     @type \Proto\TokenGetNftInfosQuery $tokenGetNftInfos
     *          *
     *           This query is unsupported and SHALL fail.<br/>
     *           Requests for this information MUST be directed to a mirror node.
     *           <p>
     *           Get metadata for all non-fungible/unique tokens (NFTs) of a single
     *           type within a range of indices (0-based count of minted tokens).
     *     @type \Proto\NetworkGetExecutionTimeQuery $networkGetExecutionTime
     *          *
     *           This query is unsupported and SHALL fail.<br/>
     *           Requests for this information MUST be directed to a mirror node.
     *           <p>
     *           Get the execution time for a recent transaction.
     *     @type \Proto\GetAccountDetailsQuery $accountDetails
     *          *
     *           Get detail metadata for an account.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Query::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * Get all entities associated with a given key.
     *
     * Generated from protobuf field <code>.proto.GetByKeyQuery getByKey = 1;</code>
     * @return \Proto\GetByKeyQuery|null
     */
    public function getGetByKey()
    {
        return $this->readOneof(1);
    }

    public function hasGetByKey()
    {
        return $this->hasOneof(1);
    }

    /**
     **
     * Get all entities associated with a given key.
     *
     * Generated from protobuf field <code>.proto.GetByKeyQuery getByKey = 1;</code>
     * @param \Proto\GetByKeyQuery $var
     * @return $this
     */
    public function setGetByKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\GetByKeyQuery::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     **
     * Get an Hedera identifier associated with an identifier in EVM
     * "Solidity" form.<br/>
     * Most often used in smart contracts to find an Hedera account,
     * file, or contract identifier to pass to a system contract or
     * precompile.
     *
     * Generated from protobuf field <code>.proto.GetBySolidityIDQuery getBySolidityID = 2;</code>
     * @return \Proto\GetBySolidityIDQuery|null
     */
    public function getGetBySolidityID()
    {
        return $this->readOneof(2);
    }

    public function hasGetBySolidityID()
    {
        return $this->hasOneof(2);
    }

    /**
     **
     * Get an Hedera identifier associated with an identifier in EVM
     * "Solidity" form.<br/>
     * Most often used in smart contracts to find an Hedera account,
     * file, or contract identifier to pass to a system contract or
     * precompile.
     *
     * Generated from protobuf field <code>.proto.GetBySolidityIDQuery getBySolidityID = 2;</code>
     * @param \Proto\GetBySolidityIDQuery $var
     * @return $this
     */
    public function setGetBySolidityID($var)
    {
        GPBUtil::checkMessage($var, \Proto\GetBySolidityIDQuery::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     **
     * Call a function of a smart contract.<br/>
     * This call is executed exclusively on the node to which it is
     * submitted, and is much less expensive than a `contractCall`
     * transaction.
     *
     * Generated from protobuf field <code>.proto.ContractCallLocalQuery contractCallLocal = 3;</code>
     * @return \Proto\ContractCallLocalQuery|null
     */
    public function getContractCallLocal()
    {
        return $this->readOneof(3);
    }

    public function hasContractCallLocal()
    {
        return $this->hasOneof(3);
    }

    /**
     **
     * Call a function of a smart contract.<br/>
     * This call is executed exclusively on the node to which it is
     * submitted, and is much less expensive than a `contractCall`
     * transaction.
     *
     * Generated from protobuf field <code>.proto.ContractCallLocalQuery contractCallLocal = 3;</code>
     * @param \Proto\ContractCallLocalQuery $var
     * @return $this
     */
    public function setContractCallLocal($var)
    {
        GPBUtil::checkMessage($var, \Proto\ContractCallLocalQuery::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     **
     * Get information about a smart contract.
     *
     * Generated from protobuf field <code>.proto.ContractGetInfoQuery contractGetInfo = 4;</code>
     * @return \Proto\ContractGetInfoQuery|null
     */
    public function getContractGetInfo()
    {
        return $this->readOneof(4);
    }

    public function hasContractGetInfo()
    {
        return $this->hasOneof(4);
    }

    /**
     **
     * Get information about a smart contract.
     *
     * Generated from protobuf field <code>.proto.ContractGetInfoQuery contractGetInfo = 4;</code>
     * @param \Proto\ContractGetInfoQuery $var
     * @return $this
     */
    public function setContractGetInfo($var)
    {
        GPBUtil::checkMessage($var, \Proto\ContractGetInfoQuery::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     **
     * Get runtime bytecode used by a smart contract.
     *
     * Generated from protobuf field <code>.proto.ContractGetBytecodeQuery contractGetBytecode = 5;</code>
     * @return \Proto\ContractGetBytecodeQuery|null
     */
    public function getContractGetBytecode()
    {
        return $this->readOneof(5);
    }

    public function hasContractGetBytecode()
    {
        return $this->hasOneof(5);
    }

    /**
     **
     * Get runtime bytecode used by a smart contract.
     *
     * Generated from protobuf field <code>.proto.ContractGetBytecodeQuery contractGetBytecode = 5;</code>
     * @param \Proto\ContractGetBytecodeQuery $var
     * @return $this
     */
    public function setContractGetBytecode($var)
    {
        GPBUtil::checkMessage($var, \Proto\ContractGetBytecodeQuery::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     **
     * This query is unsupported and SHALL fail.<br/>
     * Requests for this information MUST be directed to a mirror node.
     * <p>
     * Get Records of a smart contract.
     *
     * Generated from protobuf field <code>.proto.ContractGetRecordsQuery ContractGetRecords = 6 [deprecated = true];</code>
     * @return \Proto\ContractGetRecordsQuery|null
     * @deprecated
     */
    public function getContractGetRecords()
    {
        if ($this->hasOneof(6)) {
            @trigger_error('ContractGetRecords is deprecated.', E_USER_DEPRECATED);
        }
        return $this->readOneof(6);
    }

    public function hasContractGetRecords()
    {
        if ($this->hasOneof(6)) {
            @trigger_error('ContractGetRecords is deprecated.', E_USER_DEPRECATED);
        }
        return $this->hasOneof(6);
    }

    /**
     **
     * This query is unsupported and SHALL fail.<br/>
     * Requests for this information MUST be directed to a mirror node.
     * <p>
     * Get Records of a smart contract.
     *
     * Generated from protobuf field <code>.proto.ContractGetRecordsQuery ContractGetRecords = 6 [deprecated = true];</code>
     * @param \Proto\ContractGetRecordsQuery $var
     * @return $this
     * @deprecated
     */
    public function setContractGetRecords($var)
    {
        @trigger_error('ContractGetRecords is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkMessage($var, \Proto\ContractGetRecordsQuery::class);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     **
     * Get the current HBAR balance of an Hedera account or smart contract.
     *
     * Generated from protobuf field <code>.proto.CryptoGetAccountBalanceQuery cryptogetAccountBalance = 7;</code>
     * @return \Proto\CryptoGetAccountBalanceQuery|null
     */
    public function getCryptogetAccountBalance()
    {
        return $this->readOneof(7);
    }

    public function hasCryptogetAccountBalance()
    {
        return $this->hasOneof(7);
    }

    /**
     **
     * Get the current HBAR balance of an Hedera account or smart contract.
     *
     * Generated from protobuf field <code>.proto.CryptoGetAccountBalanceQuery cryptogetAccountBalance = 7;</code>
     * @param \Proto\CryptoGetAccountBalanceQuery $var
     * @return $this
     */
    public function setCryptogetAccountBalance($var)
    {
        GPBUtil::checkMessage($var, \Proto\CryptoGetAccountBalanceQuery::class);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     **
     * Get records of all "recent" transactions for which a specified
     * account is the effective payer.
     *
     * Generated from protobuf field <code>.proto.CryptoGetAccountRecordsQuery cryptoGetAccountRecords = 8;</code>
     * @return \Proto\CryptoGetAccountRecordsQuery|null
     */
    public function getCryptoGetAccountRecords()
    {
        return $this->readOneof(8);
    }

    public function hasCryptoGetAccountRecords()
    {
        return $this->hasOneof(8);
    }

    /**
     **
     * Get records of all "recent" transactions for which a specified
     * account is the effective payer.
     *
     * Generated from protobuf field <code>.proto.CryptoGetAccountRecordsQuery cryptoGetAccountRecords = 8;</code>
     * @param \Proto\CryptoGetAccountRecordsQuery $var
     * @return $this
     */
    public function setCryptoGetAccountRecords($var)
    {
        GPBUtil::checkMessage($var, \Proto\CryptoGetAccountRecordsQuery::class);
        $this->writeOneof(8, $var);

        return $this;
    }

    /**
     **
     * Get information about an account, including the balance.<br/>
     * This does not get the list of account records.
     *
     * Generated from protobuf field <code>.proto.CryptoGetInfoQuery cryptoGetInfo = 9;</code>
     * @return \Proto\CryptoGetInfoQuery|null
     */
    public function getCryptoGetInfo()
    {
        return $this->readOneof(9);
    }

    public function hasCryptoGetInfo()
    {
        return $this->hasOneof(9);
    }

    /**
     **
     * Get information about an account, including the balance.<br/>
     * This does not get the list of account records.
     *
     * Generated from protobuf field <code>.proto.CryptoGetInfoQuery cryptoGetInfo = 9;</code>
     * @param \Proto\CryptoGetInfoQuery $var
     * @return $this
     */
    public function setCryptoGetInfo($var)
    {
        GPBUtil::checkMessage($var, \Proto\CryptoGetInfoQuery::class);
        $this->writeOneof(9, $var);

        return $this;
    }

    /**
     **
     * This query is unsupported and SHALL fail.<br/>
     * Requests for this information MUST be directed to a mirror node.
     * <p>
     * Get a single livehash from a single account, if present.
     *
     * Generated from protobuf field <code>.proto.CryptoGetLiveHashQuery cryptoGetLiveHash = 10 [deprecated = true];</code>
     * @return \Proto\CryptoGetLiveHashQuery|null
     * @deprecated
     */
    public function getCryptoGetLiveHash()
    {
        if ($this->hasOneof(10)) {
            @trigger_error('cryptoGetLiveHash is deprecated.', E_USER_DEPRECATED);
        }
        return $this->readOneof(10);
    }

    public function hasCryptoGetLiveHash()
    {
        if ($this->hasOneof(10)) {
            @trigger_error('cryptoGetLiveHash is deprecated.', E_USER_DEPRECATED);
        }
        return $this->hasOneof(10);
    }

    /**
     **
     * This query is unsupported and SHALL fail.<br/>
     * Requests for this information MUST be directed to a mirror node.
     * <p>
     * Get a single livehash from a single account, if present.
     *
     * Generated from protobuf field <code>.proto.CryptoGetLiveHashQuery cryptoGetLiveHash = 10 [deprecated = true];</code>
     * @param \Proto\CryptoGetLiveHashQuery $var
     * @return $this
     * @deprecated
     */
    public function setCryptoGetLiveHash($var)
    {
        @trigger_error('cryptoGetLiveHash is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkMessage($var, \Proto\CryptoGetLiveHashQuery::class);
        $this->writeOneof(10, $var);

        return $this;
    }

    /**
     **
     * This query is unsupported and SHALL fail.<br/>
     * Requests for this information MUST be directed to a mirror node.
     * <p>
     * Get all the accounts that are proxy staking to this account.
     *
     * Generated from protobuf field <code>.proto.CryptoGetStakersQuery cryptoGetProxyStakers = 11 [deprecated = true];</code>
     * @return \Proto\CryptoGetStakersQuery|null
     * @deprecated
     */
    public function getCryptoGetProxyStakers()
    {
        if ($this->hasOneof(11)) {
            @trigger_error('cryptoGetProxyStakers is deprecated.', E_USER_DEPRECATED);
        }
        return $this->readOneof(11);
    }

    public function hasCryptoGetProxyStakers()
    {
        if ($this->hasOneof(11)) {
            @trigger_error('cryptoGetProxyStakers is deprecated.', E_USER_DEPRECATED);
        }
        return $this->hasOneof(11);
    }

    /**
     **
     * This query is unsupported and SHALL fail.<br/>
     * Requests for this information MUST be directed to a mirror node.
     * <p>
     * Get all the accounts that are proxy staking to this account.
     *
     * Generated from protobuf field <code>.proto.CryptoGetStakersQuery cryptoGetProxyStakers = 11 [deprecated = true];</code>
     * @param \Proto\CryptoGetStakersQuery $var
     * @return $this
     * @deprecated
     */
    public function setCryptoGetProxyStakers($var)
    {
        @trigger_error('cryptoGetProxyStakers is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkMessage($var, \Proto\CryptoGetStakersQuery::class);
        $this->writeOneof(11, $var);

        return $this;
    }

    /**
     **
     * Get the content of a file.
     *
     * Generated from protobuf field <code>.proto.FileGetContentsQuery fileGetContents = 12;</code>
     * @return \Proto\FileGetContentsQuery|null
     */
    public function getFileGetContents()
    {
        return $this->readOneof(12);
    }

    public function hasFileGetContents()
    {
        return $this->hasOneof(12);
    }

    /**
     **
     * Get the content of a file.
     *
     * Generated from protobuf field <code>.proto.FileGetContentsQuery fileGetContents = 12;</code>
     * @param \Proto\FileGetContentsQuery $var
     * @return $this
     */
    public function setFileGetContents($var)
    {
        GPBUtil::checkMessage($var, \Proto\FileGetContentsQuery::class);
        $this->writeOneof(12, $var);

        return $this;
    }

    /**
     **
     * Get metadata for a file.
     *
     * Generated from protobuf field <code>.proto.FileGetInfoQuery fileGetInfo = 13;</code>
     * @return \Proto\FileGetInfoQuery|null
     */
    public function getFileGetInfo()
    {
        return $this->readOneof(13);
    }

    public function hasFileGetInfo()
    {
        return $this->hasOneof(13);
    }

    /**
     **
     * Get metadata for a file.
     *
     * Generated from protobuf field <code>.proto.FileGetInfoQuery fileGetInfo = 13;</code>
     * @param \Proto\FileGetInfoQuery $var
     * @return $this
     */
    public function setFileGetInfo($var)
    {
        GPBUtil::checkMessage($var, \Proto\FileGetInfoQuery::class);
        $this->writeOneof(13, $var);

        return $this;
    }

    /**
     **
     * Get a receipt for a transaction.<br/>
     * This only returns a receipt if the transaction is "recent", which
     * is typically within the previous 180 seconds (3 minutes).
     *
     * Generated from protobuf field <code>.proto.TransactionGetReceiptQuery transactionGetReceipt = 14;</code>
     * @return \Proto\TransactionGetReceiptQuery|null
     */
    public function getTransactionGetReceipt()
    {
        return $this->readOneof(14);
    }

    public function hasTransactionGetReceipt()
    {
        return $this->hasOneof(14);
    }

    /**
     **
     * Get a receipt for a transaction.<br/>
     * This only returns a receipt if the transaction is "recent", which
     * is typically within the previous 180 seconds (3 minutes).
     *
     * Generated from protobuf field <code>.proto.TransactionGetReceiptQuery transactionGetReceipt = 14;</code>
     * @param \Proto\TransactionGetReceiptQuery $var
     * @return $this
     */
    public function setTransactionGetReceipt($var)
    {
        GPBUtil::checkMessage($var, \Proto\TransactionGetReceiptQuery::class);
        $this->writeOneof(14, $var);

        return $this;
    }

    /**
     **
     * Get a record for a transaction.
     * This only returns a record if the transaction is "available", which
     * is typically within the previous 1 hour.
     *
     * Generated from protobuf field <code>.proto.TransactionGetRecordQuery transactionGetRecord = 15;</code>
     * @return \Proto\TransactionGetRecordQuery|null
     */
    public function getTransactionGetRecord()
    {
        return $this->readOneof(15);
    }

    public function hasTransactionGetRecord()
    {
        return $this->hasOneof(15);
    }

    /**
     **
     * Get a record for a transaction.
     * This only returns a record if the transaction is "available", which
     * is typically within the previous 1 hour.
     *
     * Generated from protobuf field <code>.proto.TransactionGetRecordQuery transactionGetRecord = 15;</code>
     * @param \Proto\TransactionGetRecordQuery $var
     * @return $this
     */
    public function setTransactionGetRecord($var)
    {
        GPBUtil::checkMessage($var, \Proto\TransactionGetRecordQuery::class);
        $this->writeOneof(15, $var);

        return $this;
    }

    /**
     **
     * Get a record for a transaction.
     * This only returns a record if the transaction is "recent", which
     * is typically within the previous 180 seconds (3 minutes).
     *
     * Generated from protobuf field <code>.proto.TransactionGetFastRecordQuery transactionGetFastRecord = 16;</code>
     * @return \Proto\TransactionGetFastRecordQuery|null
     */
    public function getTransactionGetFastRecord()
    {
        return $this->readOneof(16);
    }

    public function hasTransactionGetFastRecord()
    {
        return $this->hasOneof(16);
    }

    /**
     **
     * Get a record for a transaction.
     * This only returns a record if the transaction is "recent", which
     * is typically within the previous 180 seconds (3 minutes).
     *
     * Generated from protobuf field <code>.proto.TransactionGetFastRecordQuery transactionGetFastRecord = 16;</code>
     * @param \Proto\TransactionGetFastRecordQuery $var
     * @return $this
     */
    public function setTransactionGetFastRecord($var)
    {
        GPBUtil::checkMessage($var, \Proto\TransactionGetFastRecordQuery::class);
        $this->writeOneof(16, $var);

        return $this;
    }

    /**
     **
     * Get metadata for a consensus topic.
     *
     * Generated from protobuf field <code>.proto.ConsensusGetTopicInfoQuery consensusGetTopicInfo = 50;</code>
     * @return \Proto\ConsensusGetTopicInfoQuery|null
     */
    public function getConsensusGetTopicInfo()
    {
        return $this->readOneof(50);
    }

    public function hasConsensusGetTopicInfo()
    {
        return $this->hasOneof(50);
    }

    /**
     **
     * Get metadata for a consensus topic.
     *
     * Generated from protobuf field <code>.proto.ConsensusGetTopicInfoQuery consensusGetTopicInfo = 50;</code>
     * @param \Proto\ConsensusGetTopicInfoQuery $var
     * @return $this
     */
    public function setConsensusGetTopicInfo($var)
    {
        GPBUtil::checkMessage($var, \Proto\ConsensusGetTopicInfoQuery::class);
        $this->writeOneof(50, $var);

        return $this;
    }

    /**
     **
     * Get the versions of Hedera Services and the HAPI API deployed on
     * the responding consensus node.
     *
     * Generated from protobuf field <code>.proto.NetworkGetVersionInfoQuery networkGetVersionInfo = 51;</code>
     * @return \Proto\NetworkGetVersionInfoQuery|null
     */
    public function getNetworkGetVersionInfo()
    {
        return $this->readOneof(51);
    }

    public function hasNetworkGetVersionInfo()
    {
        return $this->hasOneof(51);
    }

    /**
     **
     * Get the versions of Hedera Services and the HAPI API deployed on
     * the responding consensus node.
     *
     * Generated from protobuf field <code>.proto.NetworkGetVersionInfoQuery networkGetVersionInfo = 51;</code>
     * @param \Proto\NetworkGetVersionInfoQuery $var
     * @return $this
     */
    public function setNetworkGetVersionInfo($var)
    {
        GPBUtil::checkMessage($var, \Proto\NetworkGetVersionInfoQuery::class);
        $this->writeOneof(51, $var);

        return $this;
    }

    /**
     **
     * Get metadata for a token.
     *
     * Generated from protobuf field <code>.proto.TokenGetInfoQuery tokenGetInfo = 52;</code>
     * @return \Proto\TokenGetInfoQuery|null
     */
    public function getTokenGetInfo()
    {
        return $this->readOneof(52);
    }

    public function hasTokenGetInfo()
    {
        return $this->hasOneof(52);
    }

    /**
     **
     * Get metadata for a token.
     *
     * Generated from protobuf field <code>.proto.TokenGetInfoQuery tokenGetInfo = 52;</code>
     * @param \Proto\TokenGetInfoQuery $var
     * @return $this
     */
    public function setTokenGetInfo($var)
    {
        GPBUtil::checkMessage($var, \Proto\TokenGetInfoQuery::class);
        $this->writeOneof(52, $var);

        return $this;
    }

    /**
     **
     * Get metadata for a schedule.<br/>
     * A schedule is a request to execute a transaction at a future
     * time.
     *
     * Generated from protobuf field <code>.proto.ScheduleGetInfoQuery scheduleGetInfo = 53;</code>
     * @return \Proto\ScheduleGetInfoQuery|null
     */
    public function getScheduleGetInfo()
    {
        return $this->readOneof(53);
    }

    public function hasScheduleGetInfo()
    {
        return $this->hasOneof(53);
    }

    /**
     **
     * Get metadata for a schedule.<br/>
     * A schedule is a request to execute a transaction at a future
     * time.
     *
     * Generated from protobuf field <code>.proto.ScheduleGetInfoQuery scheduleGetInfo = 53;</code>
     * @param \Proto\ScheduleGetInfoQuery $var
     * @return $this
     */
    public function setScheduleGetInfo($var)
    {
        GPBUtil::checkMessage($var, \Proto\ScheduleGetInfoQuery::class);
        $this->writeOneof(53, $var);

        return $this;
    }

    /**
     **
     * This query is unsupported and SHALL fail.<br/>
     * Requests for this information MUST be directed to a mirror node.
     * <p>
     * Get a list of non-fungible/unique tokens associated with an account.
     *
     * Generated from protobuf field <code>.proto.TokenGetAccountNftInfosQuery tokenGetAccountNftInfos = 54 [deprecated = true];</code>
     * @return \Proto\TokenGetAccountNftInfosQuery|null
     * @deprecated
     */
    public function getTokenGetAccountNftInfos()
    {
        if ($this->hasOneof(54)) {
            @trigger_error('tokenGetAccountNftInfos is deprecated.', E_USER_DEPRECATED);
        }
        return $this->readOneof(54);
    }

    public function hasTokenGetAccountNftInfos()
    {
        if ($this->hasOneof(54)) {
            @trigger_error('tokenGetAccountNftInfos is deprecated.', E_USER_DEPRECATED);
        }
        return $this->hasOneof(54);
    }

    /**
     **
     * This query is unsupported and SHALL fail.<br/>
     * Requests for this information MUST be directed to a mirror node.
     * <p>
     * Get a list of non-fungible/unique tokens associated with an account.
     *
     * Generated from protobuf field <code>.proto.TokenGetAccountNftInfosQuery tokenGetAccountNftInfos = 54 [deprecated = true];</code>
     * @param \Proto\TokenGetAccountNftInfosQuery $var
     * @return $this
     * @deprecated
     */
    public function setTokenGetAccountNftInfos($var)
    {
        @trigger_error('tokenGetAccountNftInfos is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkMessage($var, \Proto\TokenGetAccountNftInfosQuery::class);
        $this->writeOneof(54, $var);

        return $this;
    }

    /**
     **
     * Get metadata for a specific, serial numbered, non-fungible/unique
     * token (NFT).
     *
     * Generated from protobuf field <code>.proto.TokenGetNftInfoQuery tokenGetNftInfo = 55;</code>
     * @return \Proto\TokenGetNftInfoQuery|null
     */
    public function getTokenGetNftInfo()
    {
        return $this->readOneof(55);
    }

    public function hasTokenGetNftInfo()
    {
        return $this->hasOneof(55);
    }

    /**
     **
     * Get metadata for a specific, serial numbered, non-fungible/unique
     * token (NFT).
     *
     * Generated from protobuf field <code>.proto.TokenGetNftInfoQuery tokenGetNftInfo = 55;</code>
     * @param \Proto\TokenGetNftInfoQuery $var
     * @return $this
     */
    public function setTokenGetNftInfo($var)
    {
        GPBUtil::checkMessage($var, \Proto\TokenGetNftInfoQuery::class);
        $this->writeOneof(55, $var);

        return $this;
    }

    /**
     **
     * This query is unsupported and SHALL fail.<br/>
     * Requests for this information MUST be directed to a mirror node.
     * <p>
     * Get metadata for all non-fungible/unique tokens (NFTs) of a single
     * type within a range of indices (0-based count of minted tokens).
     *
     * Generated from protobuf field <code>.proto.TokenGetNftInfosQuery tokenGetNftInfos = 56 [deprecated = true];</code>
     * @return \Proto\TokenGetNftInfosQuery|null
     * @deprecated
     */
    public function getTokenGetNftInfos()
    {
        if ($this->hasOneof(56)) {
            @trigger_error('tokenGetNftInfos is deprecated.', E_USER_DEPRECATED);
        }
        return $this->readOneof(56);
    }

    public function hasTokenGetNftInfos()
    {
        if ($this->hasOneof(56)) {
            @trigger_error('tokenGetNftInfos is deprecated.', E_USER_DEPRECATED);
        }
        return $this->hasOneof(56);
    }

    /**
     **
     * This query is unsupported and SHALL fail.<br/>
     * Requests for this information MUST be directed to a mirror node.
     * <p>
     * Get metadata for all non-fungible/unique tokens (NFTs) of a single
     * type within a range of indices (0-based count of minted tokens).
     *
     * Generated from protobuf field <code>.proto.TokenGetNftInfosQuery tokenGetNftInfos = 56 [deprecated = true];</code>
     * @param \Proto\TokenGetNftInfosQuery $var
     * @return $this
     * @deprecated
     */
    public function setTokenGetNftInfos($var)
    {
        @trigger_error('tokenGetNftInfos is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkMessage($var, \Proto\TokenGetNftInfosQuery::class);
        $this->writeOneof(56, $var);

        return $this;
    }

    /**
     **
     * This query is unsupported and SHALL fail.<br/>
     * Requests for this information MUST be directed to a mirror node.
     * <p>
     * Get the execution time for a recent transaction.
     *
     * Generated from protobuf field <code>.proto.NetworkGetExecutionTimeQuery networkGetExecutionTime = 57 [deprecated = true];</code>
     * @return \Proto\NetworkGetExecutionTimeQuery|null
     * @deprecated
     */
    public function getNetworkGetExecutionTime()
    {
        if ($this->hasOneof(57)) {
            @trigger_error('networkGetExecutionTime is deprecated.', E_USER_DEPRECATED);
        }
        return $this->readOneof(57);
    }

    public function hasNetworkGetExecutionTime()
    {
        if ($this->hasOneof(57)) {
            @trigger_error('networkGetExecutionTime is deprecated.', E_USER_DEPRECATED);
        }
        return $this->hasOneof(57);
    }

    /**
     **
     * This query is unsupported and SHALL fail.<br/>
     * Requests for this information MUST be directed to a mirror node.
     * <p>
     * Get the execution time for a recent transaction.
     *
     * Generated from protobuf field <code>.proto.NetworkGetExecutionTimeQuery networkGetExecutionTime = 57 [deprecated = true];</code>
     * @param \Proto\NetworkGetExecutionTimeQuery $var
     * @return $this
     * @deprecated
     */
    public function setNetworkGetExecutionTime($var)
    {
        @trigger_error('networkGetExecutionTime is deprecated.', E_USER_DEPRECATED);
        GPBUtil::checkMessage($var, \Proto\NetworkGetExecutionTimeQuery::class);
        $this->writeOneof(57, $var);

        return $this;
    }

    /**
     **
     * Get detail metadata for an account.
     *
     * Generated from protobuf field <code>.proto.GetAccountDetailsQuery accountDetails = 58;</code>
     * @return \Proto\GetAccountDetailsQuery|null
     */
    public function getAccountDetails()
    {
        return $this->readOneof(58);
    }

    public function hasAccountDetails()
    {
        return $this->hasOneof(58);
    }

    /**
     **
     * Get detail metadata for an account.
     *
     * Generated from protobuf field <code>.proto.GetAccountDetailsQuery accountDetails = 58;</code>
     * @param \Proto\GetAccountDetailsQuery $var
     * @return $this
     */
    public function setAccountDetails($var)
    {
        GPBUtil::checkMessage($var, \Proto\GetAccountDetailsQuery::class);
        $this->writeOneof(58, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getQuery()
    {
        return $this->whichOneof("query");
    }

}

