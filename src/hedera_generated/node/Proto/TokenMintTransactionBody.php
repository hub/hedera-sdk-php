<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: token_mint.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Mint tokens and deliver the new tokens to the token treasury account.
 * The token MUST have a `supply_key` set and that key MUST NOT
 * be an empty `KeyList`.<br/>
 * The token `supply_key` MUST sign this transaction.<br/>
 * This operation SHALL increase the total supply for the token type by
 * the number of tokens "minted".<br/>
 * The total supply for the token type MUST NOT be increased above the
 * maximum supply limit (2^63-1) by this transaction.<br/>
 * The tokens minted SHALL be credited to the token treasury account.<br/>
 * If the token is a fungible/common type, the amount MUST be specified.<br/>
 * If the token is a non-fungible/unique type, the metadata bytes for each
 * unique token MUST be specified in the `metadata` list.<br/>
 * Each unique metadata MUST not exceed the global metadata size limit defined
 * by the network configuration value `tokens.maxMetadataBytes`.<br/>
 * The global batch size limit (`tokens.nfts.maxBatchSizeMint`) SHALL set
 * the maximum number of individual NFT metadata permitted in a single
 * `tokenMint` transaction.
 * ### Block Stream Effects
 * None
 *
 * Generated from protobuf message <code>proto.TokenMintTransactionBody</code>
 */
class TokenMintTransactionBody extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A token identifier.
     * <p>
     * This SHALL identify the token type to "mint".<br/>
     * The identified token MUST exist, and MUST NOT be deleted.
     *
     * Generated from protobuf field <code>.proto.TokenID token = 1;</code>
     */
    protected $token = null;
    /**
     **
     * An amount to mint to the Treasury Account.
     * <p>
     * This is interpreted as an amount in the smallest possible denomination
     * for the token (10<sup>-decimals</sup> whole tokens).<br/>
     * The balance for the token treasury account SHALL receive the newly
     * minted tokens.<br/>
     * If this value is equal to zero (`0`), the token SHOULD be a
     * non-fungible/unique type.<br/>
     * If this value is non-zero, the token MUST be a fungible/common type.
     *
     * Generated from protobuf field <code>uint64 amount = 2;</code>
     */
    protected $amount = 0;
    /**
     **
     * A list of metadata bytes.<br/>
     * <p>
     * One non-fungible/unique token SHALL be minted for each entry
     * in this list.<br/>
     * Each entry in this list MUST NOT be larger than the limit set by the
     * current network configuration value `tokens.maxMetadataBytes`.<br/>
     * This list MUST NOT contain more entries than the current limit set by
     * the network configuration value `tokens.nfts.maxBatchSizeMint`.<br/>
     * If this list is not empty, the token MUST be a
     * non-fungible/unique type.<br/>
     * If this list is empty, the token MUST be a fungible/common type.
     *
     * Generated from protobuf field <code>repeated bytes metadata = 3;</code>
     */
    private $metadata;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\TokenID $token
     *          *
     *           A token identifier.
     *           <p>
     *           This SHALL identify the token type to "mint".<br/>
     *           The identified token MUST exist, and MUST NOT be deleted.
     *     @type int|string $amount
     *          *
     *           An amount to mint to the Treasury Account.
     *           <p>
     *           This is interpreted as an amount in the smallest possible denomination
     *           for the token (10<sup>-decimals</sup> whole tokens).<br/>
     *           The balance for the token treasury account SHALL receive the newly
     *           minted tokens.<br/>
     *           If this value is equal to zero (`0`), the token SHOULD be a
     *           non-fungible/unique type.<br/>
     *           If this value is non-zero, the token MUST be a fungible/common type.
     *     @type string[] $metadata
     *          *
     *           A list of metadata bytes.<br/>
     *           <p>
     *           One non-fungible/unique token SHALL be minted for each entry
     *           in this list.<br/>
     *           Each entry in this list MUST NOT be larger than the limit set by the
     *           current network configuration value `tokens.maxMetadataBytes`.<br/>
     *           This list MUST NOT contain more entries than the current limit set by
     *           the network configuration value `tokens.nfts.maxBatchSizeMint`.<br/>
     *           If this list is not empty, the token MUST be a
     *           non-fungible/unique type.<br/>
     *           If this list is empty, the token MUST be a fungible/common type.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\TokenMint::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A token identifier.
     * <p>
     * This SHALL identify the token type to "mint".<br/>
     * The identified token MUST exist, and MUST NOT be deleted.
     *
     * Generated from protobuf field <code>.proto.TokenID token = 1;</code>
     * @return \Proto\TokenID|null
     */
    public function getToken()
    {
        return $this->token;
    }

    public function hasToken()
    {
        return isset($this->token);
    }

    public function clearToken()
    {
        unset($this->token);
    }

    /**
     **
     * A token identifier.
     * <p>
     * This SHALL identify the token type to "mint".<br/>
     * The identified token MUST exist, and MUST NOT be deleted.
     *
     * Generated from protobuf field <code>.proto.TokenID token = 1;</code>
     * @param \Proto\TokenID $var
     * @return $this
     */
    public function setToken($var)
    {
        GPBUtil::checkMessage($var, \Proto\TokenID::class);
        $this->token = $var;

        return $this;
    }

    /**
     **
     * An amount to mint to the Treasury Account.
     * <p>
     * This is interpreted as an amount in the smallest possible denomination
     * for the token (10<sup>-decimals</sup> whole tokens).<br/>
     * The balance for the token treasury account SHALL receive the newly
     * minted tokens.<br/>
     * If this value is equal to zero (`0`), the token SHOULD be a
     * non-fungible/unique type.<br/>
     * If this value is non-zero, the token MUST be a fungible/common type.
     *
     * Generated from protobuf field <code>uint64 amount = 2;</code>
     * @return int|string
     */
    public function getAmount()
    {
        return $this->amount;
    }

    /**
     **
     * An amount to mint to the Treasury Account.
     * <p>
     * This is interpreted as an amount in the smallest possible denomination
     * for the token (10<sup>-decimals</sup> whole tokens).<br/>
     * The balance for the token treasury account SHALL receive the newly
     * minted tokens.<br/>
     * If this value is equal to zero (`0`), the token SHOULD be a
     * non-fungible/unique type.<br/>
     * If this value is non-zero, the token MUST be a fungible/common type.
     *
     * Generated from protobuf field <code>uint64 amount = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setAmount($var)
    {
        GPBUtil::checkUint64($var);
        $this->amount = $var;

        return $this;
    }

    /**
     **
     * A list of metadata bytes.<br/>
     * <p>
     * One non-fungible/unique token SHALL be minted for each entry
     * in this list.<br/>
     * Each entry in this list MUST NOT be larger than the limit set by the
     * current network configuration value `tokens.maxMetadataBytes`.<br/>
     * This list MUST NOT contain more entries than the current limit set by
     * the network configuration value `tokens.nfts.maxBatchSizeMint`.<br/>
     * If this list is not empty, the token MUST be a
     * non-fungible/unique type.<br/>
     * If this list is empty, the token MUST be a fungible/common type.
     *
     * Generated from protobuf field <code>repeated bytes metadata = 3;</code>
     * @return RepeatedField<string>
     */
    public function getMetadata()
    {
        return $this->metadata;
    }

    /**
     **
     * A list of metadata bytes.<br/>
     * <p>
     * One non-fungible/unique token SHALL be minted for each entry
     * in this list.<br/>
     * Each entry in this list MUST NOT be larger than the limit set by the
     * current network configuration value `tokens.maxMetadataBytes`.<br/>
     * This list MUST NOT contain more entries than the current limit set by
     * the network configuration value `tokens.nfts.maxBatchSizeMint`.<br/>
     * If this list is not empty, the token MUST be a
     * non-fungible/unique type.<br/>
     * If this list is empty, the token MUST be a fungible/common type.
     *
     * Generated from protobuf field <code>repeated bytes metadata = 3;</code>
     * @param string[] $var
     * @return $this
     */
    public function setMetadata($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::BYTES);
        $this->metadata = $arr;

        return $this;
    }

}

