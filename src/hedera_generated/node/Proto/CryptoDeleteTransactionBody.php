<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: crypto_delete.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Delete an account.<br/>
 * This will mark an account deleted, and transfer all tokens to a "sweep"
 * account.
 * A deleted account SHALL NOT hold a balance in any token type.<br/>
 * A deleted account SHALL remain in state until it expires.<br/>
 * Transfers that would increase the balance of a deleted account
 * SHALL fail.<br/>
 * A deleted account MAY be subject of a `cryptoUpdate` transaction to extend
 * its expiration.<br/>
 * When a deleted account expires it SHALL be removed entirely, and SHALL NOT
 * be archived.
 * ### Block Stream Effects
 * None
 *
 * Generated from protobuf message <code>proto.CryptoDeleteTransactionBody</code>
 */
class CryptoDeleteTransactionBody extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * An account identifier.
     * <p>
     * The identified account SHALL receive all tokens, token balances,
     * and non-fungible/unique from the deleted account.<br/>
     * The identified account MUST sign this transaction.<br/>
     * If not set, the account to be deleted MUST NOT have a balance in any
     * token, a balance in HBAR, or hold any NFT.
     *
     * Generated from protobuf field <code>.proto.AccountID transferAccountID = 1;</code>
     */
    protected $transferAccountID = null;
    /**
     **
     * An account identifier.
     * <p>
     * This account SHALL be deleted if this transaction succeeds.<br/>
     * This account SHOULD NOT hold any balance other than HBAR.<br/>
     * If this account _does_ hold balances, the `transferAccountID` value
     * MUST be set to a valid transfer account.<br/>
     * This account MUST sign this transaction.<br/>
     * This field MUST be set to a valid account identifier.
     *
     * Generated from protobuf field <code>.proto.AccountID deleteAccountID = 2;</code>
     */
    protected $deleteAccountID = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\AccountID $transferAccountID
     *          *
     *           An account identifier.
     *           <p>
     *           The identified account SHALL receive all tokens, token balances,
     *           and non-fungible/unique from the deleted account.<br/>
     *           The identified account MUST sign this transaction.<br/>
     *           If not set, the account to be deleted MUST NOT have a balance in any
     *           token, a balance in HBAR, or hold any NFT.
     *     @type \Proto\AccountID $deleteAccountID
     *          *
     *           An account identifier.
     *           <p>
     *           This account SHALL be deleted if this transaction succeeds.<br/>
     *           This account SHOULD NOT hold any balance other than HBAR.<br/>
     *           If this account _does_ hold balances, the `transferAccountID` value
     *           MUST be set to a valid transfer account.<br/>
     *           This account MUST sign this transaction.<br/>
     *           This field MUST be set to a valid account identifier.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\CryptoDelete::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * An account identifier.
     * <p>
     * The identified account SHALL receive all tokens, token balances,
     * and non-fungible/unique from the deleted account.<br/>
     * The identified account MUST sign this transaction.<br/>
     * If not set, the account to be deleted MUST NOT have a balance in any
     * token, a balance in HBAR, or hold any NFT.
     *
     * Generated from protobuf field <code>.proto.AccountID transferAccountID = 1;</code>
     * @return \Proto\AccountID|null
     */
    public function getTransferAccountID()
    {
        return $this->transferAccountID;
    }

    public function hasTransferAccountID()
    {
        return isset($this->transferAccountID);
    }

    public function clearTransferAccountID()
    {
        unset($this->transferAccountID);
    }

    /**
     **
     * An account identifier.
     * <p>
     * The identified account SHALL receive all tokens, token balances,
     * and non-fungible/unique from the deleted account.<br/>
     * The identified account MUST sign this transaction.<br/>
     * If not set, the account to be deleted MUST NOT have a balance in any
     * token, a balance in HBAR, or hold any NFT.
     *
     * Generated from protobuf field <code>.proto.AccountID transferAccountID = 1;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setTransferAccountID($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->transferAccountID = $var;

        return $this;
    }

    /**
     **
     * An account identifier.
     * <p>
     * This account SHALL be deleted if this transaction succeeds.<br/>
     * This account SHOULD NOT hold any balance other than HBAR.<br/>
     * If this account _does_ hold balances, the `transferAccountID` value
     * MUST be set to a valid transfer account.<br/>
     * This account MUST sign this transaction.<br/>
     * This field MUST be set to a valid account identifier.
     *
     * Generated from protobuf field <code>.proto.AccountID deleteAccountID = 2;</code>
     * @return \Proto\AccountID|null
     */
    public function getDeleteAccountID()
    {
        return $this->deleteAccountID;
    }

    public function hasDeleteAccountID()
    {
        return isset($this->deleteAccountID);
    }

    public function clearDeleteAccountID()
    {
        unset($this->deleteAccountID);
    }

    /**
     **
     * An account identifier.
     * <p>
     * This account SHALL be deleted if this transaction succeeds.<br/>
     * This account SHOULD NOT hold any balance other than HBAR.<br/>
     * If this account _does_ hold balances, the `transferAccountID` value
     * MUST be set to a valid transfer account.<br/>
     * This account MUST sign this transaction.<br/>
     * This field MUST be set to a valid account identifier.
     *
     * Generated from protobuf field <code>.proto.AccountID deleteAccountID = 2;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setDeleteAccountID($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->deleteAccountID = $var;

        return $this;
    }

}

