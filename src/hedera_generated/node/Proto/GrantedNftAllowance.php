<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: get_account_details.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Permission granted by one account (the "funding" account) to another
 * account (the "spender" account) that allows the spender to transfer
 * all serial numbers of a specific non-fungible/unique token (NFT)
 * collection owned by the funding account.<br/>
 * This is a broad permission, as it does not matter how many NFTs of the
 * specified collection the funding account owns, the spender MAY dispose
 * of any or all of them with this allowance.<br/>
 * Each token type (typically a collection of NFTs) SHALL require
 * a separate allowance.<br/>
 * Allowances for a specific serial number MUST be directly associated
 * with that specific non-fungible/unique token, rather than
 * the holding account.
 * An allowance SHALL NOT transfer any tokens directly, it only permits
 * transactions signed only by the spender account to transfer any
 * non-fungible/unique tokens of the specified type owned by
 * the funding account.
 *
 * Generated from protobuf message <code>proto.GrantedNftAllowance</code>
 */
class GrantedNftAllowance extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * The identifier for the token associated with this allowance.
     * <p>
     * This token MUST be a non-fungible/unique token.
     *
     * Generated from protobuf field <code>.proto.TokenID token_id = 1;</code>
     */
    protected $token_id = null;
    /**
     **
     * The identifier for the spending account associated with this allowance.
     * <p>
     * This account SHALL be permitted to sign transactions to spend
     * tokens of the associated token type from the funding/allowing account.
     *
     * Generated from protobuf field <code>.proto.AccountID spender = 2;</code>
     */
    protected $spender = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\TokenID $token_id
     *          *
     *           The identifier for the token associated with this allowance.
     *           <p>
     *           This token MUST be a non-fungible/unique token.
     *     @type \Proto\AccountID $spender
     *          *
     *           The identifier for the spending account associated with this allowance.
     *           <p>
     *           This account SHALL be permitted to sign transactions to spend
     *           tokens of the associated token type from the funding/allowing account.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\GetAccountDetails::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * The identifier for the token associated with this allowance.
     * <p>
     * This token MUST be a non-fungible/unique token.
     *
     * Generated from protobuf field <code>.proto.TokenID token_id = 1;</code>
     * @return \Proto\TokenID|null
     */
    public function getTokenId()
    {
        return $this->token_id;
    }

    public function hasTokenId()
    {
        return isset($this->token_id);
    }

    public function clearTokenId()
    {
        unset($this->token_id);
    }

    /**
     **
     * The identifier for the token associated with this allowance.
     * <p>
     * This token MUST be a non-fungible/unique token.
     *
     * Generated from protobuf field <code>.proto.TokenID token_id = 1;</code>
     * @param \Proto\TokenID $var
     * @return $this
     */
    public function setTokenId($var)
    {
        GPBUtil::checkMessage($var, \Proto\TokenID::class);
        $this->token_id = $var;

        return $this;
    }

    /**
     **
     * The identifier for the spending account associated with this allowance.
     * <p>
     * This account SHALL be permitted to sign transactions to spend
     * tokens of the associated token type from the funding/allowing account.
     *
     * Generated from protobuf field <code>.proto.AccountID spender = 2;</code>
     * @return \Proto\AccountID|null
     */
    public function getSpender()
    {
        return $this->spender;
    }

    public function hasSpender()
    {
        return isset($this->spender);
    }

    public function clearSpender()
    {
        unset($this->spender);
    }

    /**
     **
     * The identifier for the spending account associated with this allowance.
     * <p>
     * This account SHALL be permitted to sign transactions to spend
     * tokens of the associated token type from the funding/allowing account.
     *
     * Generated from protobuf field <code>.proto.AccountID spender = 2;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setSpender($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->spender = $var;

        return $this;
    }

}

