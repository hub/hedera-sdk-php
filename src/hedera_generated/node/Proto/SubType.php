<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: basic_types.proto

namespace Proto;

use UnexpectedValueException;

/**
 **
 * A transaction sub type.<br/>
 * This enumeration enables a set of transaction base fees to be broadly
 * defined for a type of operation and also be modified, when necessary,
 * based on specifics of the operation.
 * ### Explanation
 * The resource cost for a TokenMint operation is different between minting
 * fungible/common and non-fungible/unique tokens. This `enum` is used to
 * "mark" a cost as applying to one or the other.<br/>
 * Similarly, the resource cost for a basic `tokenCreate` without a custom
 * fee schedule may yield a _base_ fee of $1. The resource cost for a
 * `tokenCreate` _with_ a custom fee schedule is different and may yield a
 * _base_ fee of $2 or more.
 *
 * Protobuf type <code>proto.SubType</code>
 */
class SubType
{
    /**
     **
     * The resource cost for the transaction type has no additional attributes
     *
     * Generated from protobuf enum <code>DEFAULT = 0;</code>
     */
    const PBDEFAULT = 0;
    /**
     **
     * The resource cost for the transaction type includes an operation on a
     * fungible/common token
     *
     * Generated from protobuf enum <code>TOKEN_FUNGIBLE_COMMON = 1;</code>
     */
    const TOKEN_FUNGIBLE_COMMON = 1;
    /**
     **
     * The resource cost for the transaction type includes an operation on
     * a non-fungible/unique token
     *
     * Generated from protobuf enum <code>TOKEN_NON_FUNGIBLE_UNIQUE = 2;</code>
     */
    const TOKEN_NON_FUNGIBLE_UNIQUE = 2;
    /**
     **
     * The resource cost for the transaction type includes an operation on a
     * fungible/common token with a custom fee schedule
     *
     * Generated from protobuf enum <code>TOKEN_FUNGIBLE_COMMON_WITH_CUSTOM_FEES = 3;</code>
     */
    const TOKEN_FUNGIBLE_COMMON_WITH_CUSTOM_FEES = 3;
    /**
     **
     * The resource cost for the transaction type includes an operation on a
     * non-fungible/unique token with a custom fee schedule
     *
     * Generated from protobuf enum <code>TOKEN_NON_FUNGIBLE_UNIQUE_WITH_CUSTOM_FEES = 4;</code>
     */
    const TOKEN_NON_FUNGIBLE_UNIQUE_WITH_CUSTOM_FEES = 4;
    /**
     **
     * The resource cost for the transaction type includes a ScheduleCreate
     * containing a ContractCall.
     *
     * Generated from protobuf enum <code>SCHEDULE_CREATE_CONTRACT_CALL = 5;</code>
     */
    const SCHEDULE_CREATE_CONTRACT_CALL = 5;
    /**
     **
     * The resource cost for the transaction type includes a TopicCreate
     * with custom fees.
     *
     * Generated from protobuf enum <code>TOPIC_CREATE_WITH_CUSTOM_FEES = 6;</code>
     */
    const TOPIC_CREATE_WITH_CUSTOM_FEES = 6;
    /**
     **
     * The resource cost for the transaction type includes a ConsensusSubmitMessage
     * for a topic with custom fees.
     *
     * Generated from protobuf enum <code>SUBMIT_MESSAGE_WITH_CUSTOM_FEES = 7;</code>
     */
    const SUBMIT_MESSAGE_WITH_CUSTOM_FEES = 7;

    private static $valueToName = [
        self::PBDEFAULT => 'DEFAULT',
        self::TOKEN_FUNGIBLE_COMMON => 'TOKEN_FUNGIBLE_COMMON',
        self::TOKEN_NON_FUNGIBLE_UNIQUE => 'TOKEN_NON_FUNGIBLE_UNIQUE',
        self::TOKEN_FUNGIBLE_COMMON_WITH_CUSTOM_FEES => 'TOKEN_FUNGIBLE_COMMON_WITH_CUSTOM_FEES',
        self::TOKEN_NON_FUNGIBLE_UNIQUE_WITH_CUSTOM_FEES => 'TOKEN_NON_FUNGIBLE_UNIQUE_WITH_CUSTOM_FEES',
        self::SCHEDULE_CREATE_CONTRACT_CALL => 'SCHEDULE_CREATE_CONTRACT_CALL',
        self::TOPIC_CREATE_WITH_CUSTOM_FEES => 'TOPIC_CREATE_WITH_CUSTOM_FEES',
        self::SUBMIT_MESSAGE_WITH_CUSTOM_FEES => 'SUBMIT_MESSAGE_WITH_CUSTOM_FEES',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            $pbconst =  __CLASS__. '::PB' . strtoupper($name);
            if (!defined($pbconst)) {
                throw new UnexpectedValueException(sprintf(
                        'Enum %s has no value defined for name %s', __CLASS__, $name));
            }
            return constant($pbconst);
        }
        return constant($const);
    }
}

