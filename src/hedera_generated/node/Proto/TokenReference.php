<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: token_reject.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * A union token identifier.
 * Identify a fungible/common token type, or a single
 * non-fungible/unique token serial.
 *
 * Generated from protobuf message <code>proto.TokenReference</code>
 */
class TokenReference extends \Google\Protobuf\Internal\Message
{
    protected $token_identifier;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\TokenID $fungible_token
     *          *
     *           A fungible/common token type.
     *     @type \Proto\NftID $nft
     *          *
     *           A single specific serialized non-fungible/unique token.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\TokenReject::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A fungible/common token type.
     *
     * Generated from protobuf field <code>.proto.TokenID fungible_token = 1;</code>
     * @return \Proto\TokenID|null
     */
    public function getFungibleToken()
    {
        return $this->readOneof(1);
    }

    public function hasFungibleToken()
    {
        return $this->hasOneof(1);
    }

    /**
     **
     * A fungible/common token type.
     *
     * Generated from protobuf field <code>.proto.TokenID fungible_token = 1;</code>
     * @param \Proto\TokenID $var
     * @return $this
     */
    public function setFungibleToken($var)
    {
        GPBUtil::checkMessage($var, \Proto\TokenID::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     **
     * A single specific serialized non-fungible/unique token.
     *
     * Generated from protobuf field <code>.proto.NftID nft = 2;</code>
     * @return \Proto\NftID|null
     */
    public function getNft()
    {
        return $this->readOneof(2);
    }

    public function hasNft()
    {
        return $this->hasOneof(2);
    }

    /**
     **
     * A single specific serialized non-fungible/unique token.
     *
     * Generated from protobuf field <code>.proto.NftID nft = 2;</code>
     * @param \Proto\NftID $var
     * @return $this
     */
    public function setNft($var)
    {
        GPBUtil::checkMessage($var, \Proto\NftID::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getTokenIdentifier()
    {
        return $this->whichOneof("token_identifier");
    }

}

