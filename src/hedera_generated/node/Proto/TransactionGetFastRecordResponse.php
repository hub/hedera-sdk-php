<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: transaction_get_fast_record.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Response when the client sends the node TransactionGetFastRecordQuery.
 * If it created a new entity (account, file, or smart contract instance) then
 * one of the three ID fields will be filled in with the ID of the new entity.
 * Sometimes a single transaction will create more than one new entity, such
 * as when a new contract instance is created, and this also creates the new
 * account that it owned by that instance.
 *
 * @deprecated
 * Generated from protobuf message <code>proto.TransactionGetFastRecordResponse</code>
 */
class TransactionGetFastRecordResponse extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * The standard response information for queries.<br/>
     * This includes the values requested in the `QueryHeader`
     * (cost, state proof, both, or neither).
     *
     * Generated from protobuf field <code>.proto.ResponseHeader header = 1;</code>
     */
    protected $header = null;
    /**
     **
     * The requested transaction records
     *
     * Generated from protobuf field <code>.proto.TransactionRecord transactionRecord = 2;</code>
     */
    protected $transactionRecord = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\ResponseHeader $header
     *          *
     *           The standard response information for queries.<br/>
     *           This includes the values requested in the `QueryHeader`
     *           (cost, state proof, both, or neither).
     *     @type \Proto\TransactionRecord $transactionRecord
     *          *
     *           The requested transaction records
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\TransactionGetFastRecord::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * The standard response information for queries.<br/>
     * This includes the values requested in the `QueryHeader`
     * (cost, state proof, both, or neither).
     *
     * Generated from protobuf field <code>.proto.ResponseHeader header = 1;</code>
     * @return \Proto\ResponseHeader|null
     */
    public function getHeader()
    {
        return $this->header;
    }

    public function hasHeader()
    {
        return isset($this->header);
    }

    public function clearHeader()
    {
        unset($this->header);
    }

    /**
     **
     * The standard response information for queries.<br/>
     * This includes the values requested in the `QueryHeader`
     * (cost, state proof, both, or neither).
     *
     * Generated from protobuf field <code>.proto.ResponseHeader header = 1;</code>
     * @param \Proto\ResponseHeader $var
     * @return $this
     */
    public function setHeader($var)
    {
        GPBUtil::checkMessage($var, \Proto\ResponseHeader::class);
        $this->header = $var;

        return $this;
    }

    /**
     **
     * The requested transaction records
     *
     * Generated from protobuf field <code>.proto.TransactionRecord transactionRecord = 2;</code>
     * @return \Proto\TransactionRecord|null
     */
    public function getTransactionRecord()
    {
        return $this->transactionRecord;
    }

    public function hasTransactionRecord()
    {
        return isset($this->transactionRecord);
    }

    public function clearTransactionRecord()
    {
        unset($this->transactionRecord);
    }

    /**
     **
     * The requested transaction records
     *
     * Generated from protobuf field <code>.proto.TransactionRecord transactionRecord = 2;</code>
     * @param \Proto\TransactionRecord $var
     * @return $this
     */
    public function setTransactionRecord($var)
    {
        GPBUtil::checkMessage($var, \Proto\TransactionRecord::class);
        $this->transactionRecord = $var;

        return $this;
    }

}

