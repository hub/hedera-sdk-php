<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: basic_types.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * An identifier for a unique token (or "NFT"), used by both contract
 * and token services.
 *
 * Generated from protobuf message <code>proto.NftID</code>
 */
class NftID extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A token identifier.<br/>
     * This token represents the collection containing this NFT.
     *
     * Generated from protobuf field <code>.proto.TokenID token_ID = 1;</code>
     */
    protected $token_ID = null;
    /**
     **
     * A unique serial number.<br/>
     * This serial number is unique within its token type.
     *
     * Generated from protobuf field <code>int64 serial_number = 2;</code>
     */
    protected $serial_number = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\TokenID $token_ID
     *          *
     *           A token identifier.<br/>
     *           This token represents the collection containing this NFT.
     *     @type int|string $serial_number
     *          *
     *           A unique serial number.<br/>
     *           This serial number is unique within its token type.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\BasicTypes::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A token identifier.<br/>
     * This token represents the collection containing this NFT.
     *
     * Generated from protobuf field <code>.proto.TokenID token_ID = 1;</code>
     * @return \Proto\TokenID|null
     */
    public function getTokenID()
    {
        return $this->token_ID;
    }

    public function hasTokenID()
    {
        return isset($this->token_ID);
    }

    public function clearTokenID()
    {
        unset($this->token_ID);
    }

    /**
     **
     * A token identifier.<br/>
     * This token represents the collection containing this NFT.
     *
     * Generated from protobuf field <code>.proto.TokenID token_ID = 1;</code>
     * @param \Proto\TokenID $var
     * @return $this
     */
    public function setTokenID($var)
    {
        GPBUtil::checkMessage($var, \Proto\TokenID::class);
        $this->token_ID = $var;

        return $this;
    }

    /**
     **
     * A unique serial number.<br/>
     * This serial number is unique within its token type.
     *
     * Generated from protobuf field <code>int64 serial_number = 2;</code>
     * @return int|string
     */
    public function getSerialNumber()
    {
        return $this->serial_number;
    }

    /**
     **
     * A unique serial number.<br/>
     * This serial number is unique within its token type.
     *
     * Generated from protobuf field <code>int64 serial_number = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setSerialNumber($var)
    {
        GPBUtil::checkInt64($var);
        $this->serial_number = $var;

        return $this;
    }

}

