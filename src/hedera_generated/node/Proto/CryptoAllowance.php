<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: crypto_approve_allowance.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * An approved allowance of hbar transfers.
 * This message specifies one allowance for a single, unique, combination
 * of owner, spender, and amount.
 * If `owner` is not set, the effective `owner` SHALL be the `payer` for the
 * enclosing transaction.<br/>
 * The `spender` MUST be specified and MUST be a valid account.<br/>
 * The `amount` MUST be a whole number, and SHOULD be greater than `0` unless
 * this allowance is intended to _remove_ a previously approved allowance.
 *
 * Generated from protobuf message <code>proto.CryptoAllowance</code>
 */
class CryptoAllowance extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * An owner account identifier.<br/>
     * This is the account identifier of the account granting an allowance
     * for the `spender` to transfer tokens held by this account.
     *
     * Generated from protobuf field <code>.proto.AccountID owner = 1;</code>
     */
    protected $owner = null;
    /**
     **
     * A spender account identifier.<br/>
     * This is the account identifier of the account permitted to transfer
     * tokens held by the `owner`.
     *
     * Generated from protobuf field <code>.proto.AccountID spender = 2;</code>
     */
    protected $spender = null;
    /**
     **
     * An amount of tinybar (10<sup>-8</sup> HBAR).<br/>
     * This is the amount of HBAR held by the `owner` that the
     * `spender` is permitted to transfer.
     * <p>
     * This value MUST be a whole number.<br/>
     * This value MUST be greater than 0 to create a new allowance.<br/>
     * This value MAY be exactly `0` to _remove_ an existing allowance.<br/>
     *
     * Generated from protobuf field <code>int64 amount = 3;</code>
     */
    protected $amount = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\AccountID $owner
     *          *
     *           An owner account identifier.<br/>
     *           This is the account identifier of the account granting an allowance
     *           for the `spender` to transfer tokens held by this account.
     *     @type \Proto\AccountID $spender
     *          *
     *           A spender account identifier.<br/>
     *           This is the account identifier of the account permitted to transfer
     *           tokens held by the `owner`.
     *     @type int|string $amount
     *          *
     *           An amount of tinybar (10<sup>-8</sup> HBAR).<br/>
     *           This is the amount of HBAR held by the `owner` that the
     *           `spender` is permitted to transfer.
     *           <p>
     *           This value MUST be a whole number.<br/>
     *           This value MUST be greater than 0 to create a new allowance.<br/>
     *           This value MAY be exactly `0` to _remove_ an existing allowance.<br/>
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\CryptoApproveAllowance::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * An owner account identifier.<br/>
     * This is the account identifier of the account granting an allowance
     * for the `spender` to transfer tokens held by this account.
     *
     * Generated from protobuf field <code>.proto.AccountID owner = 1;</code>
     * @return \Proto\AccountID|null
     */
    public function getOwner()
    {
        return $this->owner;
    }

    public function hasOwner()
    {
        return isset($this->owner);
    }

    public function clearOwner()
    {
        unset($this->owner);
    }

    /**
     **
     * An owner account identifier.<br/>
     * This is the account identifier of the account granting an allowance
     * for the `spender` to transfer tokens held by this account.
     *
     * Generated from protobuf field <code>.proto.AccountID owner = 1;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setOwner($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->owner = $var;

        return $this;
    }

    /**
     **
     * A spender account identifier.<br/>
     * This is the account identifier of the account permitted to transfer
     * tokens held by the `owner`.
     *
     * Generated from protobuf field <code>.proto.AccountID spender = 2;</code>
     * @return \Proto\AccountID|null
     */
    public function getSpender()
    {
        return $this->spender;
    }

    public function hasSpender()
    {
        return isset($this->spender);
    }

    public function clearSpender()
    {
        unset($this->spender);
    }

    /**
     **
     * A spender account identifier.<br/>
     * This is the account identifier of the account permitted to transfer
     * tokens held by the `owner`.
     *
     * Generated from protobuf field <code>.proto.AccountID spender = 2;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setSpender($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->spender = $var;

        return $this;
    }

    /**
     **
     * An amount of tinybar (10<sup>-8</sup> HBAR).<br/>
     * This is the amount of HBAR held by the `owner` that the
     * `spender` is permitted to transfer.
     * <p>
     * This value MUST be a whole number.<br/>
     * This value MUST be greater than 0 to create a new allowance.<br/>
     * This value MAY be exactly `0` to _remove_ an existing allowance.<br/>
     *
     * Generated from protobuf field <code>int64 amount = 3;</code>
     * @return int|string
     */
    public function getAmount()
    {
        return $this->amount;
    }

    /**
     **
     * An amount of tinybar (10<sup>-8</sup> HBAR).<br/>
     * This is the amount of HBAR held by the `owner` that the
     * `spender` is permitted to transfer.
     * <p>
     * This value MUST be a whole number.<br/>
     * This value MUST be greater than 0 to create a new allowance.<br/>
     * This value MAY be exactly `0` to _remove_ an existing allowance.<br/>
     *
     * Generated from protobuf field <code>int64 amount = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setAmount($var)
    {
        GPBUtil::checkInt64($var);
        $this->amount = $var;

        return $this;
    }

}

