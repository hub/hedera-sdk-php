<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: contract_types.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * EVM log data for a contract call.<br/>
 * The EVM log information produced by a smart contract function call.
 * Each contract function call MAY return zero or more log events.
 *
 * Generated from protobuf message <code>proto.ContractLoginfo</code>
 */
class ContractLoginfo extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A contract identifier.<br/>
     * This refers to the contract that generated this log entry.
     *
     * Generated from protobuf field <code>.proto.ContractID contractID = 1;</code>
     */
    protected $contractID = null;
    /**
     **
     * A bloom filter.<br/>
     * This filter applies to this log entry and indexes the contract log data
     * in the full data of the Ethereum block.<br/>
     * EIP-7668 proposes to remove bloom filters as they are quite low value
     * in practice and separate indexing services are more effective.
     *
     * Generated from protobuf field <code>bytes bloom = 2;</code>
     */
    protected $bloom = '';
    /**
     **
     * A list of the "topics" in this log entry.<br/>
     * The EVM permits up to 4 topics, each of which is 32 bytes (one EVM word).
     * <p>
     * The first "topic" is special, and MUST contain the keccak256 hash of the
     * event signature, if the event is not anonymous.
     *
     * Generated from protobuf field <code>repeated bytes topic = 3;</code>
     */
    private $topic;
    /**
     **
     * Event data for this log entry.<br/>
     * This is binary data consisting of an arbitrary number of 256 bit
     * (32 byte) words. The content of that data is determined by the smart
     * contract code.<br/>
     *
     * Generated from protobuf field <code>bytes data = 4;</code>
     */
    protected $data = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\ContractID $contractID
     *          *
     *           A contract identifier.<br/>
     *           This refers to the contract that generated this log entry.
     *     @type string $bloom
     *          *
     *           A bloom filter.<br/>
     *           This filter applies to this log entry and indexes the contract log data
     *           in the full data of the Ethereum block.<br/>
     *           EIP-7668 proposes to remove bloom filters as they are quite low value
     *           in practice and separate indexing services are more effective.
     *     @type string[] $topic
     *          *
     *           A list of the "topics" in this log entry.<br/>
     *           The EVM permits up to 4 topics, each of which is 32 bytes (one EVM word).
     *           <p>
     *           The first "topic" is special, and MUST contain the keccak256 hash of the
     *           event signature, if the event is not anonymous.
     *     @type string $data
     *          *
     *           Event data for this log entry.<br/>
     *           This is binary data consisting of an arbitrary number of 256 bit
     *           (32 byte) words. The content of that data is determined by the smart
     *           contract code.<br/>
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ContractTypes::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A contract identifier.<br/>
     * This refers to the contract that generated this log entry.
     *
     * Generated from protobuf field <code>.proto.ContractID contractID = 1;</code>
     * @return \Proto\ContractID|null
     */
    public function getContractID()
    {
        return $this->contractID;
    }

    public function hasContractID()
    {
        return isset($this->contractID);
    }

    public function clearContractID()
    {
        unset($this->contractID);
    }

    /**
     **
     * A contract identifier.<br/>
     * This refers to the contract that generated this log entry.
     *
     * Generated from protobuf field <code>.proto.ContractID contractID = 1;</code>
     * @param \Proto\ContractID $var
     * @return $this
     */
    public function setContractID($var)
    {
        GPBUtil::checkMessage($var, \Proto\ContractID::class);
        $this->contractID = $var;

        return $this;
    }

    /**
     **
     * A bloom filter.<br/>
     * This filter applies to this log entry and indexes the contract log data
     * in the full data of the Ethereum block.<br/>
     * EIP-7668 proposes to remove bloom filters as they are quite low value
     * in practice and separate indexing services are more effective.
     *
     * Generated from protobuf field <code>bytes bloom = 2;</code>
     * @return string
     */
    public function getBloom()
    {
        return $this->bloom;
    }

    /**
     **
     * A bloom filter.<br/>
     * This filter applies to this log entry and indexes the contract log data
     * in the full data of the Ethereum block.<br/>
     * EIP-7668 proposes to remove bloom filters as they are quite low value
     * in practice and separate indexing services are more effective.
     *
     * Generated from protobuf field <code>bytes bloom = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setBloom($var)
    {
        GPBUtil::checkString($var, False);
        $this->bloom = $var;

        return $this;
    }

    /**
     **
     * A list of the "topics" in this log entry.<br/>
     * The EVM permits up to 4 topics, each of which is 32 bytes (one EVM word).
     * <p>
     * The first "topic" is special, and MUST contain the keccak256 hash of the
     * event signature, if the event is not anonymous.
     *
     * Generated from protobuf field <code>repeated bytes topic = 3;</code>
     * @return RepeatedField<string>
     */
    public function getTopic()
    {
        return $this->topic;
    }

    /**
     **
     * A list of the "topics" in this log entry.<br/>
     * The EVM permits up to 4 topics, each of which is 32 bytes (one EVM word).
     * <p>
     * The first "topic" is special, and MUST contain the keccak256 hash of the
     * event signature, if the event is not anonymous.
     *
     * Generated from protobuf field <code>repeated bytes topic = 3;</code>
     * @param string[] $var
     * @return $this
     */
    public function setTopic($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::BYTES);
        $this->topic = $arr;

        return $this;
    }

    /**
     **
     * Event data for this log entry.<br/>
     * This is binary data consisting of an arbitrary number of 256 bit
     * (32 byte) words. The content of that data is determined by the smart
     * contract code.<br/>
     *
     * Generated from protobuf field <code>bytes data = 4;</code>
     * @return string
     */
    public function getData()
    {
        return $this->data;
    }

    /**
     **
     * Event data for this log entry.<br/>
     * This is binary data consisting of an arbitrary number of 256 bit
     * (32 byte) words. The content of that data is determined by the smart
     * contract code.<br/>
     *
     * Generated from protobuf field <code>bytes data = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setData($var)
    {
        GPBUtil::checkString($var, False);
        $this->data = $var;

        return $this;
    }

}

