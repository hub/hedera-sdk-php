<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: transaction_get_fast_record.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Get the tx record of a transaction, given its transaction ID.
 * Once a transaction reaches consensus, then information about whether it
 * succeeded or failed will be available until the end of the receipt period.
 * Before and after the receipt period, and for a transaction that was never
 * submitted, the receipt is unknown.<br/>
 * This query is free (the payment field is left empty).
 *
 * @deprecated
 * Generated from protobuf message <code>proto.TransactionGetFastRecordQuery</code>
 */
class TransactionGetFastRecordQuery extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * Standard information sent with every query operation.<br/>
     * This includes the signed payment and what kind of response is requested
     * (cost, state proof, both, or neither).
     *
     * Generated from protobuf field <code>.proto.QueryHeader header = 1;</code>
     */
    protected $header = null;
    /**
     **
     * The ID of the transaction for which the record is requested.
     *
     * Generated from protobuf field <code>.proto.TransactionID transactionID = 2;</code>
     */
    protected $transactionID = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\QueryHeader $header
     *          *
     *           Standard information sent with every query operation.<br/>
     *           This includes the signed payment and what kind of response is requested
     *           (cost, state proof, both, or neither).
     *     @type \Proto\TransactionID $transactionID
     *          *
     *           The ID of the transaction for which the record is requested.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\TransactionGetFastRecord::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * Standard information sent with every query operation.<br/>
     * This includes the signed payment and what kind of response is requested
     * (cost, state proof, both, or neither).
     *
     * Generated from protobuf field <code>.proto.QueryHeader header = 1;</code>
     * @return \Proto\QueryHeader|null
     */
    public function getHeader()
    {
        return $this->header;
    }

    public function hasHeader()
    {
        return isset($this->header);
    }

    public function clearHeader()
    {
        unset($this->header);
    }

    /**
     **
     * Standard information sent with every query operation.<br/>
     * This includes the signed payment and what kind of response is requested
     * (cost, state proof, both, or neither).
     *
     * Generated from protobuf field <code>.proto.QueryHeader header = 1;</code>
     * @param \Proto\QueryHeader $var
     * @return $this
     */
    public function setHeader($var)
    {
        GPBUtil::checkMessage($var, \Proto\QueryHeader::class);
        $this->header = $var;

        return $this;
    }

    /**
     **
     * The ID of the transaction for which the record is requested.
     *
     * Generated from protobuf field <code>.proto.TransactionID transactionID = 2;</code>
     * @return \Proto\TransactionID|null
     */
    public function getTransactionID()
    {
        return $this->transactionID;
    }

    public function hasTransactionID()
    {
        return isset($this->transactionID);
    }

    public function clearTransactionID()
    {
        unset($this->transactionID);
    }

    /**
     **
     * The ID of the transaction for which the record is requested.
     *
     * Generated from protobuf field <code>.proto.TransactionID transactionID = 2;</code>
     * @param \Proto\TransactionID $var
     * @return $this
     */
    public function setTransactionID($var)
    {
        GPBUtil::checkMessage($var, \Proto\TransactionID::class);
        $this->transactionID = $var;

        return $this;
    }

}

