<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: basic_types.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * A threshold value and a list of public keys that, together, form a threshold
 * signature requirement. Any subset of the keys in the list may satisfy the
 * signature requirements of this type of key, provided the number of keys meets
 * or exceeds the threshold. For example, if a particular key has a threshold of
 * three(3) and eight(8) keys in the list, then any three(3) signatures, from
 * the list of eight(8), is sufficient to authorize that key.
 * For threshold purposes, all signatures from a single `primitive` key are
 * considered a single signature, so that signature(s) from a single key SHALL
 * NOT _directly_ meet a threshold greater than one(1).
 * #### Note
 * > It is possible to construct a complex key structure that _would_ enable a
 * > single primitive key to successfully meet a threshold requirement. All
 * > threshold keys SHOULD be carefully audited to ensure no one `primitive`
 * > key, or smart contract, has disproportionate capability.
 *
 * Generated from protobuf message <code>proto.ThresholdKey</code>
 */
class ThresholdKey extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A transaction MUST have valid signatures from at least this number of
     * separate keys, from the `keys` list to be authorized by this key.
     *
     * Generated from protobuf field <code>uint32 threshold = 1;</code>
     */
    protected $threshold = 0;
    /**
     **
     * A list of the keys that MAY satisfy signature requirements of this key.
     *
     * Generated from protobuf field <code>.proto.KeyList keys = 2;</code>
     */
    protected $keys = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $threshold
     *          *
     *           A transaction MUST have valid signatures from at least this number of
     *           separate keys, from the `keys` list to be authorized by this key.
     *     @type \Proto\KeyList $keys
     *          *
     *           A list of the keys that MAY satisfy signature requirements of this key.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\BasicTypes::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A transaction MUST have valid signatures from at least this number of
     * separate keys, from the `keys` list to be authorized by this key.
     *
     * Generated from protobuf field <code>uint32 threshold = 1;</code>
     * @return int
     */
    public function getThreshold()
    {
        return $this->threshold;
    }

    /**
     **
     * A transaction MUST have valid signatures from at least this number of
     * separate keys, from the `keys` list to be authorized by this key.
     *
     * Generated from protobuf field <code>uint32 threshold = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setThreshold($var)
    {
        GPBUtil::checkUint32($var);
        $this->threshold = $var;

        return $this;
    }

    /**
     **
     * A list of the keys that MAY satisfy signature requirements of this key.
     *
     * Generated from protobuf field <code>.proto.KeyList keys = 2;</code>
     * @return \Proto\KeyList|null
     */
    public function getKeys()
    {
        return $this->keys;
    }

    public function hasKeys()
    {
        return isset($this->keys);
    }

    public function clearKeys()
    {
        unset($this->keys);
    }

    /**
     **
     * A list of the keys that MAY satisfy signature requirements of this key.
     *
     * Generated from protobuf field <code>.proto.KeyList keys = 2;</code>
     * @param \Proto\KeyList $var
     * @return $this
     */
    public function setKeys($var)
    {
        GPBUtil::checkMessage($var, \Proto\KeyList::class);
        $this->keys = $var;

        return $this;
    }

}

