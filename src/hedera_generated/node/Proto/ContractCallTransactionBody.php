<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: contract_call.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Call a function of a given smart contract, providing function parameter
 * inputs as needed.
 * Resource ("gas") charges SHALL include all relevant fees incurred by the
 * contract execution, including any storage required.<br/>
 * The total transaction fee SHALL incorporate all of the "gas" actually
 * consumed as well as the standard fees for transaction handling, data
 * transfers, signature verification, etc...<br/>
 * The response SHALL contain the output returned by the function call.
 * ### Block Stream Effects
 * A `CallContractOutput` message SHALL be emitted for each transaction.
 *
 * Generated from protobuf message <code>proto.ContractCallTransactionBody</code>
 */
class ContractCallTransactionBody extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * The ID of a smart contract to call.
     *
     * Generated from protobuf field <code>.proto.ContractID contractID = 1;</code>
     */
    protected $contractID = null;
    /**
     **
     * A maximum limit to the amount of gas to use for this call.
     * <p>
     * The network SHALL charge the greater of the following, but
     * SHALL NOT charge more than the value of this field.
     * <ol>
     *   <li>The actual gas consumed by the smart contract call.</li>
     *   <li>`80%` of this value.</li>
     * </ol>
     * The `80%` factor encourages reasonable estimation, while allowing for
     * some overage to ensure successful execution.
     *
     * Generated from protobuf field <code>int64 gas = 2;</code>
     */
    protected $gas = 0;
    /**
     **
     * An amount of tinybar sent via this contract call.
     * <p>
     * If this is non-zero, the function MUST be `payable`.
     *
     * Generated from protobuf field <code>int64 amount = 3;</code>
     */
    protected $amount = 0;
    /**
     **
     * The smart contract function to call.
     * <p>
     * This MUST contain The application binary interface (ABI) encoding of the
     * function call per the Ethereum contract ABI standard, giving the
     * function signature and arguments being passed to the function.
     *
     * Generated from protobuf field <code>bytes functionParameters = 4;</code>
     */
    protected $functionParameters = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\ContractID $contractID
     *          *
     *           The ID of a smart contract to call.
     *     @type int|string $gas
     *          *
     *           A maximum limit to the amount of gas to use for this call.
     *           <p>
     *           The network SHALL charge the greater of the following, but
     *           SHALL NOT charge more than the value of this field.
     *           <ol>
     *             <li>The actual gas consumed by the smart contract call.</li>
     *             <li>`80%` of this value.</li>
     *           </ol>
     *           The `80%` factor encourages reasonable estimation, while allowing for
     *           some overage to ensure successful execution.
     *     @type int|string $amount
     *          *
     *           An amount of tinybar sent via this contract call.
     *           <p>
     *           If this is non-zero, the function MUST be `payable`.
     *     @type string $functionParameters
     *          *
     *           The smart contract function to call.
     *           <p>
     *           This MUST contain The application binary interface (ABI) encoding of the
     *           function call per the Ethereum contract ABI standard, giving the
     *           function signature and arguments being passed to the function.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ContractCall::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * The ID of a smart contract to call.
     *
     * Generated from protobuf field <code>.proto.ContractID contractID = 1;</code>
     * @return \Proto\ContractID|null
     */
    public function getContractID()
    {
        return $this->contractID;
    }

    public function hasContractID()
    {
        return isset($this->contractID);
    }

    public function clearContractID()
    {
        unset($this->contractID);
    }

    /**
     **
     * The ID of a smart contract to call.
     *
     * Generated from protobuf field <code>.proto.ContractID contractID = 1;</code>
     * @param \Proto\ContractID $var
     * @return $this
     */
    public function setContractID($var)
    {
        GPBUtil::checkMessage($var, \Proto\ContractID::class);
        $this->contractID = $var;

        return $this;
    }

    /**
     **
     * A maximum limit to the amount of gas to use for this call.
     * <p>
     * The network SHALL charge the greater of the following, but
     * SHALL NOT charge more than the value of this field.
     * <ol>
     *   <li>The actual gas consumed by the smart contract call.</li>
     *   <li>`80%` of this value.</li>
     * </ol>
     * The `80%` factor encourages reasonable estimation, while allowing for
     * some overage to ensure successful execution.
     *
     * Generated from protobuf field <code>int64 gas = 2;</code>
     * @return int|string
     */
    public function getGas()
    {
        return $this->gas;
    }

    /**
     **
     * A maximum limit to the amount of gas to use for this call.
     * <p>
     * The network SHALL charge the greater of the following, but
     * SHALL NOT charge more than the value of this field.
     * <ol>
     *   <li>The actual gas consumed by the smart contract call.</li>
     *   <li>`80%` of this value.</li>
     * </ol>
     * The `80%` factor encourages reasonable estimation, while allowing for
     * some overage to ensure successful execution.
     *
     * Generated from protobuf field <code>int64 gas = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setGas($var)
    {
        GPBUtil::checkInt64($var);
        $this->gas = $var;

        return $this;
    }

    /**
     **
     * An amount of tinybar sent via this contract call.
     * <p>
     * If this is non-zero, the function MUST be `payable`.
     *
     * Generated from protobuf field <code>int64 amount = 3;</code>
     * @return int|string
     */
    public function getAmount()
    {
        return $this->amount;
    }

    /**
     **
     * An amount of tinybar sent via this contract call.
     * <p>
     * If this is non-zero, the function MUST be `payable`.
     *
     * Generated from protobuf field <code>int64 amount = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setAmount($var)
    {
        GPBUtil::checkInt64($var);
        $this->amount = $var;

        return $this;
    }

    /**
     **
     * The smart contract function to call.
     * <p>
     * This MUST contain The application binary interface (ABI) encoding of the
     * function call per the Ethereum contract ABI standard, giving the
     * function signature and arguments being passed to the function.
     *
     * Generated from protobuf field <code>bytes functionParameters = 4;</code>
     * @return string
     */
    public function getFunctionParameters()
    {
        return $this->functionParameters;
    }

    /**
     **
     * The smart contract function to call.
     * <p>
     * This MUST contain The application binary interface (ABI) encoding of the
     * function call per the Ethereum contract ABI standard, giving the
     * function signature and arguments being passed to the function.
     *
     * Generated from protobuf field <code>bytes functionParameters = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setFunctionParameters($var)
    {
        GPBUtil::checkString($var, False);
        $this->functionParameters = $var;

        return $this;
    }

}

