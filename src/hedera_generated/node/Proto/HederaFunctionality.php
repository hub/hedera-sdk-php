<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: basic_types.proto

namespace Proto;

use UnexpectedValueException;

/**
 **
 * The transactions and queries supported by Hedera Hashgraph.
 *
 * Protobuf type <code>proto.HederaFunctionality</code>
 */
class HederaFunctionality
{
    /**
     **
     * Unused - The first value is unused because this default value is
     * ambiguous with an "unset" value and therefore should not be used.
     *
     * Generated from protobuf enum <code>NONE = 0;</code>
     */
    const NONE = 0;
    /**
     **
     * Transfer tokens among accounts.
     *
     * Generated from protobuf enum <code>CryptoTransfer = 1;</code>
     */
    const CryptoTransfer = 1;
    /**
     **
     * Update an account.
     *
     * Generated from protobuf enum <code>CryptoUpdate = 2;</code>
     */
    const CryptoUpdate = 2;
    /**
     **
     * Delete an account.
     *
     * Generated from protobuf enum <code>CryptoDelete = 3;</code>
     */
    const CryptoDelete = 3;
    /**
     **
     * Add a livehash to an account
     *
     * Generated from protobuf enum <code>CryptoAddLiveHash = 4 [deprecated = true];</code>
     */
    const CryptoAddLiveHash = 4;
    /**
     **
     * Delete a livehash from an account
     *
     * Generated from protobuf enum <code>CryptoDeleteLiveHash = 5 [deprecated = true];</code>
     */
    const CryptoDeleteLiveHash = 5;
    /**
     **
     * Execute a smart contract call.
     *
     * Generated from protobuf enum <code>ContractCall = 6;</code>
     */
    const ContractCall = 6;
    /**
     **
     * Create a smart contract.
     *
     * Generated from protobuf enum <code>ContractCreate = 7;</code>
     */
    const ContractCreate = 7;
    /**
     **
     * Update a smart contract.
     *
     * Generated from protobuf enum <code>ContractUpdate = 8;</code>
     */
    const ContractUpdate = 8;
    /**
     **
     * Create a "file" stored in the ledger.
     *
     * Generated from protobuf enum <code>FileCreate = 9;</code>
     */
    const FileCreate = 9;
    /**
     **
     * Append data to a "file" stored in the ledger.
     *
     * Generated from protobuf enum <code>FileAppend = 10;</code>
     */
    const FileAppend = 10;
    /**
     **
     * Update a "file" stored in the ledger.
     *
     * Generated from protobuf enum <code>FileUpdate = 11;</code>
     */
    const FileUpdate = 11;
    /**
     **
     * Delete a "file" stored in the ledger.
     *
     * Generated from protobuf enum <code>FileDelete = 12;</code>
     */
    const FileDelete = 12;
    /**
     **
     * Get the balance for an account.
     *
     * Generated from protobuf enum <code>CryptoGetAccountBalance = 13;</code>
     */
    const CryptoGetAccountBalance = 13;
    /**
     **
     * Get a full account record.
     *
     * Generated from protobuf enum <code>CryptoGetAccountRecords = 14;</code>
     */
    const CryptoGetAccountRecords = 14;
    /**
     **
     * Get information about a token.
     *
     * Generated from protobuf enum <code>CryptoGetInfo = 15;</code>
     */
    const CryptoGetInfo = 15;
    /**
     **
     * Execute a local smart contract call.<br/>
     * Used by contracts to call other contracts.
     *
     * Generated from protobuf enum <code>ContractCallLocal = 16;</code>
     */
    const ContractCallLocal = 16;
    /**
     **
     * Get information about a smart contract.
     *
     * Generated from protobuf enum <code>ContractGetInfo = 17;</code>
     */
    const ContractGetInfo = 17;
    /**
     **
     * Get the compiled bytecode that implements a smart contract.
     *
     * Generated from protobuf enum <code>ContractGetBytecode = 18;</code>
     */
    const ContractGetBytecode = 18;
    /**
     **
     * Get a smart contract record by reference to the solidity ID.
     *
     * Generated from protobuf enum <code>GetBySolidityID = 19;</code>
     */
    const GetBySolidityID = 19;
    /**
     **
     * Get a smart contract by reference to the contract key.
     *
     * Generated from protobuf enum <code>GetByKey = 20;</code>
     */
    const GetByKey = 20;
    /**
     **
     * Get the live hash for an account
     *
     * Generated from protobuf enum <code>CryptoGetLiveHash = 21 [deprecated = true];</code>
     */
    const CryptoGetLiveHash = 21;
    /**
     **
     * Get the accounts proxy staking to a given account.
     *
     * Generated from protobuf enum <code>CryptoGetStakers = 22 [deprecated = true];</code>
     */
    const CryptoGetStakers = 22;
    /**
     **
     * Get the contents of a "file" stored in the ledger.
     *
     * Generated from protobuf enum <code>FileGetContents = 23;</code>
     */
    const FileGetContents = 23;
    /**
     **
     * Get the metadata for a "file" stored in the ledger.
     *
     * Generated from protobuf enum <code>FileGetInfo = 24;</code>
     */
    const FileGetInfo = 24;
    /**
     **
     * Get transaction record(s) for a specified transaction ID.
     *
     * Generated from protobuf enum <code>TransactionGetRecord = 25;</code>
     */
    const TransactionGetRecord = 25;
    /**
     **
     * Get all transaction records for a specified contract ID in
     * the past 24 hours.<br/>
     * deprecated since version 0.9.0
     *
     * Generated from protobuf enum <code>ContractGetRecords = 26 [deprecated = true];</code>
     */
    const ContractGetRecords = 26;
    /**
     **
     * Create a new account
     *
     * Generated from protobuf enum <code>CryptoCreate = 27;</code>
     */
    const CryptoCreate = 27;
    /**
     **
     * Delete a "system" "file" stored in the ledger.<br/>
     * "System" files are files with special purpose and ID values within a
     * specific range.<br/>
     * These files require additional controls and can only be deleted when
     * authorized by accounts with elevated privilege.
     *
     * Generated from protobuf enum <code>SystemDelete = 28;</code>
     */
    const SystemDelete = 28;
    /**
     **
     * Undo the delete of a "system" "file" stored in the ledger.<br/>
     * "System" files are files with special purpose and ID values within a
     * specific range.<br/>
     * These files require additional controls and can only be deleted when
     * authorized by accounts with elevated privilege. This operation allows
     * such files to be restored, within a reasonable timeframe, if
     * deleted improperly.
     *
     * Generated from protobuf enum <code>SystemUndelete = 29;</code>
     */
    const SystemUndelete = 29;
    /**
     **
     * Delete a smart contract
     *
     * Generated from protobuf enum <code>ContractDelete = 30;</code>
     */
    const ContractDelete = 30;
    /**
     **
     * Stop all processing and "freeze" the entire network.<br/>
     * This is generally sent immediately prior to upgrading the network.<br/>
     * After processing this transactions all nodes enter a quiescent state.
     *
     * Generated from protobuf enum <code>Freeze = 31;</code>
     */
    const Freeze = 31;
    /**
     **
     * Create a Transaction Record.<br/>
     * This appears to be purely internal and unused.
     *
     * Generated from protobuf enum <code>CreateTransactionRecord = 32;</code>
     */
    const CreateTransactionRecord = 32;
    /**
     **
     * Auto-renew an account.<br/>
     * This is used for internal fee calculations.
     *
     * Generated from protobuf enum <code>CryptoAccountAutoRenew = 33;</code>
     */
    const CryptoAccountAutoRenew = 33;
    /**
     **
     * Auto-renew a smart contract.<br/>
     * This is used for internal fee calculations.
     *
     * Generated from protobuf enum <code>ContractAutoRenew = 34;</code>
     */
    const ContractAutoRenew = 34;
    /**
     **
     * Get version information for the ledger.<br/>
     * This returns a the version of the software currently running the network
     * for both the protocol buffers and the network services (node).
     *
     * Generated from protobuf enum <code>GetVersionInfo = 35;</code>
     */
    const GetVersionInfo = 35;
    /**
     **
     * Get a receipt for a specified transaction ID.
     *
     * Generated from protobuf enum <code>TransactionGetReceipt = 36;</code>
     */
    const TransactionGetReceipt = 36;
    /**
     **
     * Create a topic for the Hedera Consensus Service (HCS).
     *
     * Generated from protobuf enum <code>ConsensusCreateTopic = 50;</code>
     */
    const ConsensusCreateTopic = 50;
    /**
     **
     * Update an HCS topic.
     *
     * Generated from protobuf enum <code>ConsensusUpdateTopic = 51;</code>
     */
    const ConsensusUpdateTopic = 51;
    /**
     **
     * Delete an HCS topic.
     *
     * Generated from protobuf enum <code>ConsensusDeleteTopic = 52;</code>
     */
    const ConsensusDeleteTopic = 52;
    /**
     **
     * Get metadata (information) for an HCS topic.
     *
     * Generated from protobuf enum <code>ConsensusGetTopicInfo = 53;</code>
     */
    const ConsensusGetTopicInfo = 53;
    /**
     **
     * Publish a message to an HCS topic.
     *
     * Generated from protobuf enum <code>ConsensusSubmitMessage = 54;</code>
     */
    const ConsensusSubmitMessage = 54;
    /**
     **
     * Submit a transaction, bypassing intake checking.
     * Only enabled in local-mode.
     *
     * Generated from protobuf enum <code>UncheckedSubmit = 55;</code>
     */
    const UncheckedSubmit = 55;
    /**
     **
     * Create a token for the Hedera Token Service (HTS).
     *
     * Generated from protobuf enum <code>TokenCreate = 56;</code>
     */
    const TokenCreate = 56;
    /**
     **
     * Get metadata (information) for an HTS token.
     *
     * Generated from protobuf enum <code>TokenGetInfo = 58;</code>
     */
    const TokenGetInfo = 58;
    /**
     **
     * Freeze a specific account with respect to a specific HTS token.
     * <p>
     * Once this transaction completes that account CANNOT send or receive
     * the specified token.
     *
     * Generated from protobuf enum <code>TokenFreezeAccount = 59;</code>
     */
    const TokenFreezeAccount = 59;
    /**
     **
     * Remove a "freeze" from an account with respect to a specific HTS token.
     *
     * Generated from protobuf enum <code>TokenUnfreezeAccount = 60;</code>
     */
    const TokenUnfreezeAccount = 60;
    /**
     **
     * Grant KYC status to an account for a specific HTS token.
     *
     * Generated from protobuf enum <code>TokenGrantKycToAccount = 61;</code>
     */
    const TokenGrantKycToAccount = 61;
    /**
     **
     * Revoke KYC status from an account for a specific HTS token.
     *
     * Generated from protobuf enum <code>TokenRevokeKycFromAccount = 62;</code>
     */
    const TokenRevokeKycFromAccount = 62;
    /**
     **
     * Delete a specific HTS token.
     *
     * Generated from protobuf enum <code>TokenDelete = 63;</code>
     */
    const TokenDelete = 63;
    /**
     **
     * Update a specific HTS token.
     *
     * Generated from protobuf enum <code>TokenUpdate = 64;</code>
     */
    const TokenUpdate = 64;
    /**
     **
     * Mint HTS token amounts to the treasury account for that token.
     *
     * Generated from protobuf enum <code>TokenMint = 65;</code>
     */
    const TokenMint = 65;
    /**
     **
     * Burn HTS token amounts from the treasury account for that token.
     *
     * Generated from protobuf enum <code>TokenBurn = 66;</code>
     */
    const TokenBurn = 66;
    /**
     **
     * Wipe all amounts for a specific HTS token from a specified account.
     *
     * Generated from protobuf enum <code>TokenAccountWipe = 67;</code>
     */
    const TokenAccountWipe = 67;
    /**
     **
     * Associate a specific HTS token to an account.
     *
     * Generated from protobuf enum <code>TokenAssociateToAccount = 68;</code>
     */
    const TokenAssociateToAccount = 68;
    /**
     **
     * Dissociate a specific HTS token from an account.
     *
     * Generated from protobuf enum <code>TokenDissociateFromAccount = 69;</code>
     */
    const TokenDissociateFromAccount = 69;
    /**
     **
     * Create a scheduled transaction
     *
     * Generated from protobuf enum <code>ScheduleCreate = 70;</code>
     */
    const ScheduleCreate = 70;
    /**
     **
     * Delete a scheduled transaction
     *
     * Generated from protobuf enum <code>ScheduleDelete = 71;</code>
     */
    const ScheduleDelete = 71;
    /**
     **
     * Sign a scheduled transaction
     *
     * Generated from protobuf enum <code>ScheduleSign = 72;</code>
     */
    const ScheduleSign = 72;
    /**
     **
     * Get metadata (information) for a scheduled transaction
     *
     * Generated from protobuf enum <code>ScheduleGetInfo = 73;</code>
     */
    const ScheduleGetInfo = 73;
    /**
     **
     * Get NFT metadata (information) for a range of NFTs associated to a
     * specific non-fungible/unique HTS token and owned by a specific account.
     *
     * Generated from protobuf enum <code>TokenGetAccountNftInfos = 74 [deprecated = true];</code>
     */
    const TokenGetAccountNftInfos = 74;
    /**
     **
     * Get metadata (information) for a specific NFT identified by token and
     * serial number.
     *
     * Generated from protobuf enum <code>TokenGetNftInfo = 75 [deprecated = true];</code>
     */
    const TokenGetNftInfo = 75;
    /**
     **
     * Get NFT metadata (information) for a range of NFTs associated to a
     * specific non-fungible/unique HTS token.
     *
     * Generated from protobuf enum <code>TokenGetNftInfos = 76;</code>
     */
    const TokenGetNftInfos = 76;
    /**
     **
     * Update a token's custom fee schedule.
     * <p>
     * If a transaction of this type is not signed by the token
     * `fee_schedule_key` it SHALL fail with INVALID_SIGNATURE, or
     * TOKEN_HAS_NO_FEE_SCHEDULE_KEY if there is no `fee_schedule_key` set.
     *
     * Generated from protobuf enum <code>TokenFeeScheduleUpdate = 77;</code>
     */
    const TokenFeeScheduleUpdate = 77;
    /**
     **
     * Get execution time(s) for one or more "recent" TransactionIDs.
     *
     * Generated from protobuf enum <code>NetworkGetExecutionTime = 78 [deprecated = true];</code>
     */
    const NetworkGetExecutionTime = 78;
    /**
     **
     * Pause a specific HTS token
     *
     * Generated from protobuf enum <code>TokenPause = 79;</code>
     */
    const TokenPause = 79;
    /**
     **
     * Unpause a paused HTS token.
     *
     * Generated from protobuf enum <code>TokenUnpause = 80;</code>
     */
    const TokenUnpause = 80;
    /**
     **
     * Approve an allowance for a spender relative to the owner account, which
     * MUST sign the transaction.
     *
     * Generated from protobuf enum <code>CryptoApproveAllowance = 81;</code>
     */
    const CryptoApproveAllowance = 81;
    /**
     **
     * Delete (unapprove) an allowance previously approved
     * for the owner account.
     *
     * Generated from protobuf enum <code>CryptoDeleteAllowance = 82;</code>
     */
    const CryptoDeleteAllowance = 82;
    /**
     **
     * Get all the information about an account, including balance
     * and allowances.<br/>
     * This does not get a list of account records.
     *
     * Generated from protobuf enum <code>GetAccountDetails = 83;</code>
     */
    const GetAccountDetails = 83;
    /**
     **
     * Perform an Ethereum (EVM) transaction.<br/>
     * CallData may be inline if small, or in a "file" if large.
     *
     * Generated from protobuf enum <code>EthereumTransaction = 84;</code>
     */
    const EthereumTransaction = 84;
    /**
     **
     * Used to indicate when the network has updated the staking information
     * at the end of a staking period and to indicate a new staking period
     * has started.
     *
     * Generated from protobuf enum <code>NodeStakeUpdate = 85;</code>
     */
    const NodeStakeUpdate = 85;
    /**
     **
     * Generate and return a pseudorandom number based on network state.
     *
     * Generated from protobuf enum <code>UtilPrng = 86;</code>
     */
    const UtilPrng = 86;
    /**
     **
     * Get a record for a "recent" transaction.
     *
     * Generated from protobuf enum <code>TransactionGetFastRecord = 87 [deprecated = true];</code>
     */
    const TransactionGetFastRecord = 87;
    /**
     **
     * Update the metadata of one or more NFT's of a specific token type.
     *
     * Generated from protobuf enum <code>TokenUpdateNfts = 88;</code>
     */
    const TokenUpdateNfts = 88;
    /**
     **
     * Create a node
     *
     * Generated from protobuf enum <code>NodeCreate = 89;</code>
     */
    const NodeCreate = 89;
    /**
     **
     * Update a node
     *
     * Generated from protobuf enum <code>NodeUpdate = 90;</code>
     */
    const NodeUpdate = 90;
    /**
     **
     * Delete a node
     *
     * Generated from protobuf enum <code>NodeDelete = 91;</code>
     */
    const NodeDelete = 91;
    /**
     **
     * Transfer one or more token balances held by the requesting account
     * to the treasury for each token type.
     *
     * Generated from protobuf enum <code>TokenReject = 92;</code>
     */
    const TokenReject = 92;
    /**
     **
     * Airdrop one or more tokens to one or more accounts.
     *
     * Generated from protobuf enum <code>TokenAirdrop = 93;</code>
     */
    const TokenAirdrop = 93;
    /**
     **
     * Remove one or more pending airdrops from state on behalf of
     * the sender(s) for each airdrop.
     *
     * Generated from protobuf enum <code>TokenCancelAirdrop = 94;</code>
     */
    const TokenCancelAirdrop = 94;
    /**
     **
     * Claim one or more pending airdrops
     *
     * Generated from protobuf enum <code>TokenClaimAirdrop = 95;</code>
     */
    const TokenClaimAirdrop = 95;
    /**
     **
     * Submit a signature of a state root hash gossiped to other nodes
     *
     * Generated from protobuf enum <code>StateSignatureTransaction = 100;</code>
     */
    const StateSignatureTransaction = 100;
    /**
     **
     * Publish a hinTS key to the network.
     *
     * Generated from protobuf enum <code>HintsKeyPublication = 101;</code>
     */
    const HintsKeyPublication = 101;
    /**
     **
     * Vote for a particular preprocessing output of a hinTS construction.
     *
     * Generated from protobuf enum <code>HintsPreprocessingVote = 102;</code>
     */
    const HintsPreprocessingVote = 102;
    /**
     **
     * Sign a partial signature for the active hinTS construction.
     *
     * Generated from protobuf enum <code>HintsPartialSignature = 103;</code>
     */
    const HintsPartialSignature = 103;
    /**
     **
     * Sign a particular history assembly.
     *
     * Generated from protobuf enum <code>HistoryAssemblySignature = 104;</code>
     */
    const HistoryAssemblySignature = 104;
    /**
     **
     * Publish a roster history proof key to the network.
     *
     * Generated from protobuf enum <code>HistoryProofKeyPublication = 105;</code>
     */
    const HistoryProofKeyPublication = 105;
    /**
     **
     * Vote for a particular history proof.
     *
     * Generated from protobuf enum <code>HistoryProofVote = 106;</code>
     */
    const HistoryProofVote = 106;
    /**
     **
     * Publish a random CRS to the network.
     *
     * Generated from protobuf enum <code>CrsPublication = 107;</code>
     */
    const CrsPublication = 107;
    /**
     **
     * Submit a batch of transactions to run atomically
     *
     * Generated from protobuf enum <code>AtomicBatch = 108;</code>
     */
    const AtomicBatch = 108;

    private static $valueToName = [
        self::NONE => 'NONE',
        self::CryptoTransfer => 'CryptoTransfer',
        self::CryptoUpdate => 'CryptoUpdate',
        self::CryptoDelete => 'CryptoDelete',
        self::CryptoAddLiveHash => 'CryptoAddLiveHash',
        self::CryptoDeleteLiveHash => 'CryptoDeleteLiveHash',
        self::ContractCall => 'ContractCall',
        self::ContractCreate => 'ContractCreate',
        self::ContractUpdate => 'ContractUpdate',
        self::FileCreate => 'FileCreate',
        self::FileAppend => 'FileAppend',
        self::FileUpdate => 'FileUpdate',
        self::FileDelete => 'FileDelete',
        self::CryptoGetAccountBalance => 'CryptoGetAccountBalance',
        self::CryptoGetAccountRecords => 'CryptoGetAccountRecords',
        self::CryptoGetInfo => 'CryptoGetInfo',
        self::ContractCallLocal => 'ContractCallLocal',
        self::ContractGetInfo => 'ContractGetInfo',
        self::ContractGetBytecode => 'ContractGetBytecode',
        self::GetBySolidityID => 'GetBySolidityID',
        self::GetByKey => 'GetByKey',
        self::CryptoGetLiveHash => 'CryptoGetLiveHash',
        self::CryptoGetStakers => 'CryptoGetStakers',
        self::FileGetContents => 'FileGetContents',
        self::FileGetInfo => 'FileGetInfo',
        self::TransactionGetRecord => 'TransactionGetRecord',
        self::ContractGetRecords => 'ContractGetRecords',
        self::CryptoCreate => 'CryptoCreate',
        self::SystemDelete => 'SystemDelete',
        self::SystemUndelete => 'SystemUndelete',
        self::ContractDelete => 'ContractDelete',
        self::Freeze => 'Freeze',
        self::CreateTransactionRecord => 'CreateTransactionRecord',
        self::CryptoAccountAutoRenew => 'CryptoAccountAutoRenew',
        self::ContractAutoRenew => 'ContractAutoRenew',
        self::GetVersionInfo => 'GetVersionInfo',
        self::TransactionGetReceipt => 'TransactionGetReceipt',
        self::ConsensusCreateTopic => 'ConsensusCreateTopic',
        self::ConsensusUpdateTopic => 'ConsensusUpdateTopic',
        self::ConsensusDeleteTopic => 'ConsensusDeleteTopic',
        self::ConsensusGetTopicInfo => 'ConsensusGetTopicInfo',
        self::ConsensusSubmitMessage => 'ConsensusSubmitMessage',
        self::UncheckedSubmit => 'UncheckedSubmit',
        self::TokenCreate => 'TokenCreate',
        self::TokenGetInfo => 'TokenGetInfo',
        self::TokenFreezeAccount => 'TokenFreezeAccount',
        self::TokenUnfreezeAccount => 'TokenUnfreezeAccount',
        self::TokenGrantKycToAccount => 'TokenGrantKycToAccount',
        self::TokenRevokeKycFromAccount => 'TokenRevokeKycFromAccount',
        self::TokenDelete => 'TokenDelete',
        self::TokenUpdate => 'TokenUpdate',
        self::TokenMint => 'TokenMint',
        self::TokenBurn => 'TokenBurn',
        self::TokenAccountWipe => 'TokenAccountWipe',
        self::TokenAssociateToAccount => 'TokenAssociateToAccount',
        self::TokenDissociateFromAccount => 'TokenDissociateFromAccount',
        self::ScheduleCreate => 'ScheduleCreate',
        self::ScheduleDelete => 'ScheduleDelete',
        self::ScheduleSign => 'ScheduleSign',
        self::ScheduleGetInfo => 'ScheduleGetInfo',
        self::TokenGetAccountNftInfos => 'TokenGetAccountNftInfos',
        self::TokenGetNftInfo => 'TokenGetNftInfo',
        self::TokenGetNftInfos => 'TokenGetNftInfos',
        self::TokenFeeScheduleUpdate => 'TokenFeeScheduleUpdate',
        self::NetworkGetExecutionTime => 'NetworkGetExecutionTime',
        self::TokenPause => 'TokenPause',
        self::TokenUnpause => 'TokenUnpause',
        self::CryptoApproveAllowance => 'CryptoApproveAllowance',
        self::CryptoDeleteAllowance => 'CryptoDeleteAllowance',
        self::GetAccountDetails => 'GetAccountDetails',
        self::EthereumTransaction => 'EthereumTransaction',
        self::NodeStakeUpdate => 'NodeStakeUpdate',
        self::UtilPrng => 'UtilPrng',
        self::TransactionGetFastRecord => 'TransactionGetFastRecord',
        self::TokenUpdateNfts => 'TokenUpdateNfts',
        self::NodeCreate => 'NodeCreate',
        self::NodeUpdate => 'NodeUpdate',
        self::NodeDelete => 'NodeDelete',
        self::TokenReject => 'TokenReject',
        self::TokenAirdrop => 'TokenAirdrop',
        self::TokenCancelAirdrop => 'TokenCancelAirdrop',
        self::TokenClaimAirdrop => 'TokenClaimAirdrop',
        self::StateSignatureTransaction => 'StateSignatureTransaction',
        self::HintsKeyPublication => 'HintsKeyPublication',
        self::HintsPreprocessingVote => 'HintsPreprocessingVote',
        self::HintsPartialSignature => 'HintsPartialSignature',
        self::HistoryAssemblySignature => 'HistoryAssemblySignature',
        self::HistoryProofKeyPublication => 'HistoryProofKeyPublication',
        self::HistoryProofVote => 'HistoryProofVote',
        self::CrsPublication => 'CrsPublication',
        self::AtomicBatch => 'AtomicBatch',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

