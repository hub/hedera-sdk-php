<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: crypto_delete_live_hash.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Delete a specific live hash associated to a given account.
 * This transaction MUST be signed by either the key of the associated account,
 * or at least one of the keys listed in the live hash.
 * ### Block Stream Effects
 * None
 *
 * Generated from protobuf message <code>proto.CryptoDeleteLiveHashTransactionBody</code>
 */
class CryptoDeleteLiveHashTransactionBody extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * An account associated to a live hash.
     *
     * Generated from protobuf field <code>.proto.AccountID accountOfLiveHash = 1;</code>
     */
    protected $accountOfLiveHash = null;
    /**
     **
     * The SHA-384 value of a specific live hash to delete.
     *
     * Generated from protobuf field <code>bytes liveHashToDelete = 2;</code>
     */
    protected $liveHashToDelete = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\AccountID $accountOfLiveHash
     *          *
     *           An account associated to a live hash.
     *     @type string $liveHashToDelete
     *          *
     *           The SHA-384 value of a specific live hash to delete.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\CryptoDeleteLiveHash::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * An account associated to a live hash.
     *
     * Generated from protobuf field <code>.proto.AccountID accountOfLiveHash = 1;</code>
     * @return \Proto\AccountID|null
     */
    public function getAccountOfLiveHash()
    {
        return $this->accountOfLiveHash;
    }

    public function hasAccountOfLiveHash()
    {
        return isset($this->accountOfLiveHash);
    }

    public function clearAccountOfLiveHash()
    {
        unset($this->accountOfLiveHash);
    }

    /**
     **
     * An account associated to a live hash.
     *
     * Generated from protobuf field <code>.proto.AccountID accountOfLiveHash = 1;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setAccountOfLiveHash($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->accountOfLiveHash = $var;

        return $this;
    }

    /**
     **
     * The SHA-384 value of a specific live hash to delete.
     *
     * Generated from protobuf field <code>bytes liveHashToDelete = 2;</code>
     * @return string
     */
    public function getLiveHashToDelete()
    {
        return $this->liveHashToDelete;
    }

    /**
     **
     * The SHA-384 value of a specific live hash to delete.
     *
     * Generated from protobuf field <code>bytes liveHashToDelete = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setLiveHashToDelete($var)
    {
        GPBUtil::checkString($var, False);
        $this->liveHashToDelete = $var;

        return $this;
    }

}

