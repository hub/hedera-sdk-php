<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: basic_types.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * A transaction identifier.<br/>
 * This is used for retrieving receipts and records for a transaction
 * and internally by the network for detecting when duplicate transactions are
 * submitted.
 * A transaction may be processed more reliably by submitting it to
 * several nodes, each with a different node account, but all with the same
 * TransactionID. Then, the transaction will take effect when the first of all
 * those nodes submits the transaction and it reaches consensus. The other
 * transactions SHALL NOT be executed (and SHALL result in a
 * `DUPLICATE_TRANSACTION` response).<br/>
 * Multiple submission increase reliability on the assumption that an error in,
 * for example, network connectivity will not affect all nodes equally. Latency
 * might be slightly lower, if one node is handling intake significantly slower
 * than others, for example. The base transaction fee is required for each
 * submission, however, so the total fees charged are significantly higher when
 * using this approach.
 * ### Requirements
 * Each transaction identifier MUST be unique.<br/>
 * Multiple transactions MAY be submitted with the same transaction
 * identifier, but all except the first SHALL be rejected as duplicate
 * transactions.<br/>
 * An identifier MUST specify a `payer` account to be charged all fees
 * associated with the transaction.<br/>
 * The `payer` account MUST exist and MUST have sufficient HBAR to pay all
 * transaction fees.<br/>
 * An identifier MUST specify a "valid start time".<br/>
 * The "valid start time" MUST be strictly _earlier_ than the current
 * network consensus time when submitted.<br/>
 * The "valid start time" MUST NOT be more than `transaction.maxValidDuration`
 * seconds before the current network consensus time when submitted.<br/>
 * A client-submitted transaction MUST NOT set the `scheduled` flag.
 * ### Additional Notes
 * Additional items applicable to Scheduled Transactions:
 *  - The ID of a Scheduled Transaction, once executed, SHALL inherit both
 *    `transactionValidStart` and `accountID` from the `ScheduleCreate`
 *    transaction that created the schedule.
 *  - The `scheduled` property SHALL be set for Scheduled Transactions.
 *
 * Generated from protobuf message <code>proto.TransactionID</code>
 */
class TransactionID extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A timestamp for the transaction start time.<br/>
     * This is the earliest expected start time for this transaction.
     * <p>
     * This value MUST be strictly less than `consensusTimestamp` when the
     * transaction is submitted.
     *
     * Generated from protobuf field <code>.proto.Timestamp transactionValidStart = 1;</code>
     */
    protected $transactionValidStart = null;
    /**
     **
     * An Account identifier.
     * <p>
     * The identified account SHALL pay transaction fees for this transaction.
     *
     * Generated from protobuf field <code>.proto.AccountID accountID = 2;</code>
     */
    protected $accountID = null;
    /**
     **
     * A scheduled transaction flag.<br/>
     * If set, this transaction represents the execution of a Schedule after
     * all necessary signatures are gathered.
     * <p>
     * This flag MUST NOT be set in a user-submitted transaction.
     *
     * Generated from protobuf field <code>bool scheduled = 3;</code>
     */
    protected $scheduled = false;
    /**
     **
     * An identifier for an internal transaction.<br/>
     * An internal transaction is one that was spawned as part of handling a
     * user transaction. These internal transactions share the
     * transactionValidStart and accountID of the user transaction, so a nonce
     * is necessary to give them a unique TransactionID.
     * <p>
     * An example is when a "parent" ContractCreate or ContractCall transaction
     * calls one or more HTS precompiled contracts; each of the "child"
     * transactions spawned for a precompile has a transaction id with a
     * different nonce.
     * <p>
     * This value MUST be unset for user-submitted transactions.
     *
     * Generated from protobuf field <code>int32 nonce = 4;</code>
     */
    protected $nonce = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\Timestamp $transactionValidStart
     *          *
     *           A timestamp for the transaction start time.<br/>
     *           This is the earliest expected start time for this transaction.
     *           <p>
     *           This value MUST be strictly less than `consensusTimestamp` when the
     *           transaction is submitted.
     *     @type \Proto\AccountID $accountID
     *          *
     *           An Account identifier.
     *           <p>
     *           The identified account SHALL pay transaction fees for this transaction.
     *     @type bool $scheduled
     *          *
     *           A scheduled transaction flag.<br/>
     *           If set, this transaction represents the execution of a Schedule after
     *           all necessary signatures are gathered.
     *           <p>
     *           This flag MUST NOT be set in a user-submitted transaction.
     *     @type int $nonce
     *          *
     *           An identifier for an internal transaction.<br/>
     *           An internal transaction is one that was spawned as part of handling a
     *           user transaction. These internal transactions share the
     *           transactionValidStart and accountID of the user transaction, so a nonce
     *           is necessary to give them a unique TransactionID.
     *           <p>
     *           An example is when a "parent" ContractCreate or ContractCall transaction
     *           calls one or more HTS precompiled contracts; each of the "child"
     *           transactions spawned for a precompile has a transaction id with a
     *           different nonce.
     *           <p>
     *           This value MUST be unset for user-submitted transactions.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\BasicTypes::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A timestamp for the transaction start time.<br/>
     * This is the earliest expected start time for this transaction.
     * <p>
     * This value MUST be strictly less than `consensusTimestamp` when the
     * transaction is submitted.
     *
     * Generated from protobuf field <code>.proto.Timestamp transactionValidStart = 1;</code>
     * @return \Proto\Timestamp|null
     */
    public function getTransactionValidStart()
    {
        return $this->transactionValidStart;
    }

    public function hasTransactionValidStart()
    {
        return isset($this->transactionValidStart);
    }

    public function clearTransactionValidStart()
    {
        unset($this->transactionValidStart);
    }

    /**
     **
     * A timestamp for the transaction start time.<br/>
     * This is the earliest expected start time for this transaction.
     * <p>
     * This value MUST be strictly less than `consensusTimestamp` when the
     * transaction is submitted.
     *
     * Generated from protobuf field <code>.proto.Timestamp transactionValidStart = 1;</code>
     * @param \Proto\Timestamp $var
     * @return $this
     */
    public function setTransactionValidStart($var)
    {
        GPBUtil::checkMessage($var, \Proto\Timestamp::class);
        $this->transactionValidStart = $var;

        return $this;
    }

    /**
     **
     * An Account identifier.
     * <p>
     * The identified account SHALL pay transaction fees for this transaction.
     *
     * Generated from protobuf field <code>.proto.AccountID accountID = 2;</code>
     * @return \Proto\AccountID|null
     */
    public function getAccountID()
    {
        return $this->accountID;
    }

    public function hasAccountID()
    {
        return isset($this->accountID);
    }

    public function clearAccountID()
    {
        unset($this->accountID);
    }

    /**
     **
     * An Account identifier.
     * <p>
     * The identified account SHALL pay transaction fees for this transaction.
     *
     * Generated from protobuf field <code>.proto.AccountID accountID = 2;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setAccountID($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->accountID = $var;

        return $this;
    }

    /**
     **
     * A scheduled transaction flag.<br/>
     * If set, this transaction represents the execution of a Schedule after
     * all necessary signatures are gathered.
     * <p>
     * This flag MUST NOT be set in a user-submitted transaction.
     *
     * Generated from protobuf field <code>bool scheduled = 3;</code>
     * @return bool
     */
    public function getScheduled()
    {
        return $this->scheduled;
    }

    /**
     **
     * A scheduled transaction flag.<br/>
     * If set, this transaction represents the execution of a Schedule after
     * all necessary signatures are gathered.
     * <p>
     * This flag MUST NOT be set in a user-submitted transaction.
     *
     * Generated from protobuf field <code>bool scheduled = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setScheduled($var)
    {
        GPBUtil::checkBool($var);
        $this->scheduled = $var;

        return $this;
    }

    /**
     **
     * An identifier for an internal transaction.<br/>
     * An internal transaction is one that was spawned as part of handling a
     * user transaction. These internal transactions share the
     * transactionValidStart and accountID of the user transaction, so a nonce
     * is necessary to give them a unique TransactionID.
     * <p>
     * An example is when a "parent" ContractCreate or ContractCall transaction
     * calls one or more HTS precompiled contracts; each of the "child"
     * transactions spawned for a precompile has a transaction id with a
     * different nonce.
     * <p>
     * This value MUST be unset for user-submitted transactions.
     *
     * Generated from protobuf field <code>int32 nonce = 4;</code>
     * @return int
     */
    public function getNonce()
    {
        return $this->nonce;
    }

    /**
     **
     * An identifier for an internal transaction.<br/>
     * An internal transaction is one that was spawned as part of handling a
     * user transaction. These internal transactions share the
     * transactionValidStart and accountID of the user transaction, so a nonce
     * is necessary to give them a unique TransactionID.
     * <p>
     * An example is when a "parent" ContractCreate or ContractCall transaction
     * calls one or more HTS precompiled contracts; each of the "child"
     * transactions spawned for a precompile has a transaction id with a
     * different nonce.
     * <p>
     * This value MUST be unset for user-submitted transactions.
     *
     * Generated from protobuf field <code>int32 nonce = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setNonce($var)
    {
        GPBUtil::checkInt32($var);
        $this->nonce = $var;

        return $this;
    }

}

