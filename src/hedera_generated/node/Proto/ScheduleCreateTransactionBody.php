<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: schedule_create.proto

namespace Proto;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * Create a new Schedule.
 * #### Requirements
 * This transaction SHALL create a new _schedule_ entity in network state.<br/>
 * The schedule created SHALL contain the `scheduledTransactionBody` to be
 * executed.<br/>
 * If successful the receipt SHALL contain a `scheduleID` with the full
 * identifier of the schedule created.<br/>
 * When a schedule _executes_ successfully, the receipt SHALL include a
 * `scheduledTransactionID` with the `TransactionID` of the transaction that
 * executed.<br/>
 * When a scheduled transaction is executed the network SHALL charge the
 * regular _service_ fee for the transaction to the `payerAccountID` for
 * that schedule, but SHALL NOT charge node or network fees.<br/>
 * If the `payerAccountID` field is not set, the effective `payerAccountID`
 * SHALL be the `payer` for this create transaction.<br/>
 * If an `adminKey` is not specified, or is an empty `KeyList`, the schedule
 * created SHALL be immutable.<br/>
 * An immutable schedule MAY be signed, and MAY execute, but SHALL NOT be
 * deleted.<br/>
 * If two schedules have the same values for all fields except `payerAccountID`
 * then those two schedules SHALL be deemed "identical".<br/>
 * If a `scheduleCreate` requests a new schedule that is identical to an
 * existing schedule, the transaction SHALL fail and SHALL return a status
 * code of `IDENTICAL_SCHEDULE_ALREADY_CREATED` in the receipt.<br/>
 * The receipt for a duplicate schedule SHALL include the `ScheduleID` of the
 * existing schedule and the `TransactionID` of the earlier `scheduleCreate`
 * so that the earlier schedule may be queried and/or referred to in a
 * subsequent `scheduleSign`.
 * #### Signature Requirements
 * A `scheduleSign` transaction SHALL be used to add additional signatures
 * to an existing schedule.<br/>
 * Each signature SHALL "activate" the corresponding cryptographic("primitive")
 * key for that schedule.<br/>
 * Signature requirements SHALL be met when the set of active keys includes
 * all keys required by the scheduled transaction.<br/>
 * A scheduled transaction for a "long term" schedule SHALL NOT execute if
 * the signature requirements for that transaction are not met when the
 * network consensus time reaches the schedule `expiration_time`.<br/>
 * A "short term" schedule SHALL execute immediately once signature
 * requirements are met. This MAY be immediately when created.
 * #### Long Term Schedules
 * A "short term" schedule SHALL have the flag `wait_for_expiry` _unset_.<br/>
 * A "long term" schedule SHALL have the flag  `wait_for_expiry` _set_.<br/>
 * A "long term" schedule SHALL NOT be accepted if the network configuration
 * `scheduling.longTermEnabled` is not enabled.<br/>
 * A "long term" schedule SHALL execute when the current consensus time
 * matches or exceeds the `expiration_time` for that schedule, if the
 * signature requirements for the scheduled transaction
 * are met at that instant.<br/>
 * A "long term" schedule SHALL NOT execute before the current consensus time
 * matches or exceeds the `expiration_time` for that schedule.<br/>
 * A "long term" schedule SHALL expire, and be removed from state, after the
 * network consensus time exceeds the schedule `expiration_time`.<br/>
 * A short term schedule SHALL expire, and be removed from state,
 * after the network consensus time exceeds the current network
 * configuration for `ledger.scheduleTxExpiryTimeSecs`.
 * > Note
 * >> Long term schedules are not (as of release 0.56.0) enabled. Any schedule
 * >> created currently MUST NOT set the `wait_for_expiry` flag.<br/>
 * >> When long term schedules are not enabled, schedules SHALL NOT be
 * >> executed at expiration, and MUST meet signature requirements strictly
 * >> before expiration to be executed.
 * ### Block Stream Effects
 * If the scheduled transaction is executed immediately, the transaction
 * record SHALL include a `scheduleRef` with the schedule identifier of the
 * schedule created.
 *
 * Generated from protobuf message <code>proto.ScheduleCreateTransactionBody</code>
 */
class ScheduleCreateTransactionBody extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A scheduled transaction.
     * <p>
     * This value is REQUIRED.<br/>
     * This transaction body MUST be one of the types enabled in the
     * network configuration value `scheduling.whitelist`.
     *
     * Generated from protobuf field <code>.proto.SchedulableTransactionBody scheduledTransactionBody = 1;</code>
     */
    protected $scheduledTransactionBody = null;
    /**
     **
     * A short description of the schedule.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>string memo = 2;</code>
     */
    protected $memo = '';
    /**
     **
     * A `Key` required to delete this schedule.
     * <p>
     * If this is not set, or is an empty `KeyList`, this schedule SHALL be
     * immutable and SHALL NOT be deleted.
     *
     * Generated from protobuf field <code>.proto.Key adminKey = 3;</code>
     */
    protected $adminKey = null;
    /**
     **
     * An account identifier of a `payer` for the scheduled transaction.
     * <p>
     * This value MAY be unset. If unset, the `payer` for this `scheduleCreate`
     * transaction SHALL be the `payer` for the scheduled transaction.<br/>
     * If this is set, the identified account SHALL be charged the fees
     * required for the scheduled transaction when it is executed.<br/>
     * If the actual `payer` for the _scheduled_ transaction lacks
     * sufficient HBAR balance to pay service fees for the scheduled
     * transaction _when it executes_, the scheduled transaction
     * SHALL fail with `INSUFFICIENT_PAYER_BALANCE`.<br/>
     *
     * Generated from protobuf field <code>.proto.AccountID payerAccountID = 4;</code>
     */
    protected $payerAccountID = null;
    /**
     **
     * An expiration time.
     * <p>
     * If not set, the expiration SHALL default to the current consensus time
     * advanced by either the network configuration value
     * `scheduling.maxExpirationFutureSeconds`, if `wait_for_expiry` is set and
     * "long term" schedules are enabled, or the network configuration value
     * `ledger.scheduleTxExpiryTimeSecs` otherwise.
     *
     * Generated from protobuf field <code>.proto.Timestamp expiration_time = 5;</code>
     */
    protected $expiration_time = null;
    /**
     **
     * A flag to delay execution until expiration.
     * <p>
     * If this flag is set the scheduled transaction SHALL NOT be evaluated for
     * execution before the network consensus time matches or exceeds the
     * `expiration_time`.<br/>
     * If this flag is not set, the scheduled transaction SHALL be executed
     * immediately when all required signatures are received, whether in this
     * `scheduleCreate` transaction or a later `scheduleSign` transaction.<br/>
     * This value SHALL NOT be used and MUST NOT be set when the network
     * configuration value `scheduling.longTermEnabled` is not enabled.
     *
     * Generated from protobuf field <code>bool wait_for_expiry = 13;</code>
     */
    protected $wait_for_expiry = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\SchedulableTransactionBody $scheduledTransactionBody
     *          *
     *           A scheduled transaction.
     *           <p>
     *           This value is REQUIRED.<br/>
     *           This transaction body MUST be one of the types enabled in the
     *           network configuration value `scheduling.whitelist`.
     *     @type string $memo
     *          *
     *           A short description of the schedule.
     *           <p>
     *           This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     *           (default 100) bytes when encoded as UTF-8.
     *     @type \Proto\Key $adminKey
     *          *
     *           A `Key` required to delete this schedule.
     *           <p>
     *           If this is not set, or is an empty `KeyList`, this schedule SHALL be
     *           immutable and SHALL NOT be deleted.
     *     @type \Proto\AccountID $payerAccountID
     *          *
     *           An account identifier of a `payer` for the scheduled transaction.
     *           <p>
     *           This value MAY be unset. If unset, the `payer` for this `scheduleCreate`
     *           transaction SHALL be the `payer` for the scheduled transaction.<br/>
     *           If this is set, the identified account SHALL be charged the fees
     *           required for the scheduled transaction when it is executed.<br/>
     *           If the actual `payer` for the _scheduled_ transaction lacks
     *           sufficient HBAR balance to pay service fees for the scheduled
     *           transaction _when it executes_, the scheduled transaction
     *           SHALL fail with `INSUFFICIENT_PAYER_BALANCE`.<br/>
     *     @type \Proto\Timestamp $expiration_time
     *          *
     *           An expiration time.
     *           <p>
     *           If not set, the expiration SHALL default to the current consensus time
     *           advanced by either the network configuration value
     *           `scheduling.maxExpirationFutureSeconds`, if `wait_for_expiry` is set and
     *           "long term" schedules are enabled, or the network configuration value
     *           `ledger.scheduleTxExpiryTimeSecs` otherwise.
     *     @type bool $wait_for_expiry
     *          *
     *           A flag to delay execution until expiration.
     *           <p>
     *           If this flag is set the scheduled transaction SHALL NOT be evaluated for
     *           execution before the network consensus time matches or exceeds the
     *           `expiration_time`.<br/>
     *           If this flag is not set, the scheduled transaction SHALL be executed
     *           immediately when all required signatures are received, whether in this
     *           `scheduleCreate` transaction or a later `scheduleSign` transaction.<br/>
     *           This value SHALL NOT be used and MUST NOT be set when the network
     *           configuration value `scheduling.longTermEnabled` is not enabled.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ScheduleCreate::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A scheduled transaction.
     * <p>
     * This value is REQUIRED.<br/>
     * This transaction body MUST be one of the types enabled in the
     * network configuration value `scheduling.whitelist`.
     *
     * Generated from protobuf field <code>.proto.SchedulableTransactionBody scheduledTransactionBody = 1;</code>
     * @return \Proto\SchedulableTransactionBody|null
     */
    public function getScheduledTransactionBody()
    {
        return $this->scheduledTransactionBody;
    }

    public function hasScheduledTransactionBody()
    {
        return isset($this->scheduledTransactionBody);
    }

    public function clearScheduledTransactionBody()
    {
        unset($this->scheduledTransactionBody);
    }

    /**
     **
     * A scheduled transaction.
     * <p>
     * This value is REQUIRED.<br/>
     * This transaction body MUST be one of the types enabled in the
     * network configuration value `scheduling.whitelist`.
     *
     * Generated from protobuf field <code>.proto.SchedulableTransactionBody scheduledTransactionBody = 1;</code>
     * @param \Proto\SchedulableTransactionBody $var
     * @return $this
     */
    public function setScheduledTransactionBody($var)
    {
        GPBUtil::checkMessage($var, \Proto\SchedulableTransactionBody::class);
        $this->scheduledTransactionBody = $var;

        return $this;
    }

    /**
     **
     * A short description of the schedule.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>string memo = 2;</code>
     * @return string
     */
    public function getMemo()
    {
        return $this->memo;
    }

    /**
     **
     * A short description of the schedule.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.
     *
     * Generated from protobuf field <code>string memo = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setMemo($var)
    {
        GPBUtil::checkString($var, True);
        $this->memo = $var;

        return $this;
    }

    /**
     **
     * A `Key` required to delete this schedule.
     * <p>
     * If this is not set, or is an empty `KeyList`, this schedule SHALL be
     * immutable and SHALL NOT be deleted.
     *
     * Generated from protobuf field <code>.proto.Key adminKey = 3;</code>
     * @return \Proto\Key|null
     */
    public function getAdminKey()
    {
        return $this->adminKey;
    }

    public function hasAdminKey()
    {
        return isset($this->adminKey);
    }

    public function clearAdminKey()
    {
        unset($this->adminKey);
    }

    /**
     **
     * A `Key` required to delete this schedule.
     * <p>
     * If this is not set, or is an empty `KeyList`, this schedule SHALL be
     * immutable and SHALL NOT be deleted.
     *
     * Generated from protobuf field <code>.proto.Key adminKey = 3;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setAdminKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->adminKey = $var;

        return $this;
    }

    /**
     **
     * An account identifier of a `payer` for the scheduled transaction.
     * <p>
     * This value MAY be unset. If unset, the `payer` for this `scheduleCreate`
     * transaction SHALL be the `payer` for the scheduled transaction.<br/>
     * If this is set, the identified account SHALL be charged the fees
     * required for the scheduled transaction when it is executed.<br/>
     * If the actual `payer` for the _scheduled_ transaction lacks
     * sufficient HBAR balance to pay service fees for the scheduled
     * transaction _when it executes_, the scheduled transaction
     * SHALL fail with `INSUFFICIENT_PAYER_BALANCE`.<br/>
     *
     * Generated from protobuf field <code>.proto.AccountID payerAccountID = 4;</code>
     * @return \Proto\AccountID|null
     */
    public function getPayerAccountID()
    {
        return $this->payerAccountID;
    }

    public function hasPayerAccountID()
    {
        return isset($this->payerAccountID);
    }

    public function clearPayerAccountID()
    {
        unset($this->payerAccountID);
    }

    /**
     **
     * An account identifier of a `payer` for the scheduled transaction.
     * <p>
     * This value MAY be unset. If unset, the `payer` for this `scheduleCreate`
     * transaction SHALL be the `payer` for the scheduled transaction.<br/>
     * If this is set, the identified account SHALL be charged the fees
     * required for the scheduled transaction when it is executed.<br/>
     * If the actual `payer` for the _scheduled_ transaction lacks
     * sufficient HBAR balance to pay service fees for the scheduled
     * transaction _when it executes_, the scheduled transaction
     * SHALL fail with `INSUFFICIENT_PAYER_BALANCE`.<br/>
     *
     * Generated from protobuf field <code>.proto.AccountID payerAccountID = 4;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setPayerAccountID($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->payerAccountID = $var;

        return $this;
    }

    /**
     **
     * An expiration time.
     * <p>
     * If not set, the expiration SHALL default to the current consensus time
     * advanced by either the network configuration value
     * `scheduling.maxExpirationFutureSeconds`, if `wait_for_expiry` is set and
     * "long term" schedules are enabled, or the network configuration value
     * `ledger.scheduleTxExpiryTimeSecs` otherwise.
     *
     * Generated from protobuf field <code>.proto.Timestamp expiration_time = 5;</code>
     * @return \Proto\Timestamp|null
     */
    public function getExpirationTime()
    {
        return $this->expiration_time;
    }

    public function hasExpirationTime()
    {
        return isset($this->expiration_time);
    }

    public function clearExpirationTime()
    {
        unset($this->expiration_time);
    }

    /**
     **
     * An expiration time.
     * <p>
     * If not set, the expiration SHALL default to the current consensus time
     * advanced by either the network configuration value
     * `scheduling.maxExpirationFutureSeconds`, if `wait_for_expiry` is set and
     * "long term" schedules are enabled, or the network configuration value
     * `ledger.scheduleTxExpiryTimeSecs` otherwise.
     *
     * Generated from protobuf field <code>.proto.Timestamp expiration_time = 5;</code>
     * @param \Proto\Timestamp $var
     * @return $this
     */
    public function setExpirationTime($var)
    {
        GPBUtil::checkMessage($var, \Proto\Timestamp::class);
        $this->expiration_time = $var;

        return $this;
    }

    /**
     **
     * A flag to delay execution until expiration.
     * <p>
     * If this flag is set the scheduled transaction SHALL NOT be evaluated for
     * execution before the network consensus time matches or exceeds the
     * `expiration_time`.<br/>
     * If this flag is not set, the scheduled transaction SHALL be executed
     * immediately when all required signatures are received, whether in this
     * `scheduleCreate` transaction or a later `scheduleSign` transaction.<br/>
     * This value SHALL NOT be used and MUST NOT be set when the network
     * configuration value `scheduling.longTermEnabled` is not enabled.
     *
     * Generated from protobuf field <code>bool wait_for_expiry = 13;</code>
     * @return bool
     */
    public function getWaitForExpiry()
    {
        return $this->wait_for_expiry;
    }

    /**
     **
     * A flag to delay execution until expiration.
     * <p>
     * If this flag is set the scheduled transaction SHALL NOT be evaluated for
     * execution before the network consensus time matches or exceeds the
     * `expiration_time`.<br/>
     * If this flag is not set, the scheduled transaction SHALL be executed
     * immediately when all required signatures are received, whether in this
     * `scheduleCreate` transaction or a later `scheduleSign` transaction.<br/>
     * This value SHALL NOT be used and MUST NOT be set when the network
     * configuration value `scheduling.longTermEnabled` is not enabled.
     *
     * Generated from protobuf field <code>bool wait_for_expiry = 13;</code>
     * @param bool $var
     * @return $this
     */
    public function setWaitForExpiry($var)
    {
        GPBUtil::checkBool($var);
        $this->wait_for_expiry = $var;

        return $this;
    }

}

