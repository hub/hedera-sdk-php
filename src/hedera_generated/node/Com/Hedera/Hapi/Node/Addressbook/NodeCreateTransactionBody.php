<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: node_create.proto

namespace Com\Hedera\Hapi\Node\Addressbook;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\RepeatedField;

/**
 **
 * A transaction body to add a new consensus node to the network address book.
 * This transaction body SHALL be considered a "privileged transaction".
 * This message supports a transaction to create a new node in the network
 * address book. The transaction, once complete, enables a new consensus node
 * to join the network, and requires governing council authorization.
 * - A `NodeCreateTransactionBody` MUST be signed by the `Key` assigned to the
 *   `admin_key` field and one of those keys: treasure account (2) key,
 *   systemAdmin(50) key, or addressBookAdmin(55) key.
 * - The newly created node information SHALL be added to the network address
 *   book information in the network state.
 * - The new entry SHALL be created in "state" but SHALL NOT participate in
 *   network consensus and SHALL NOT be present in network "configuration"
 *   until the next "upgrade" transaction (as noted below).
 * - All new address book entries SHALL be added to the active network
 *   configuration during the next `freeze` transaction with the field
 *   `freeze_type` set to `PREPARE_UPGRADE`.
 * ### Block Stream Effects
 * Upon completion the newly assigned `node_id` SHALL be recorded in
 * the transaction receipt.<br/>
 * This value SHALL be the next available node identifier.<br/>
 * Node identifiers SHALL NOT be reused.
 *
 * Generated from protobuf message <code>com.hedera.hapi.node.addressbook.NodeCreateTransactionBody</code>
 */
class NodeCreateTransactionBody extends \Google\Protobuf\Internal\Message
{
    /**
     **
     * A Node account identifier.
     * <p>
     * This account identifier MUST be in the "account number" form.<br/>
     * This account identifier MUST NOT use the alias field.<br/>
     * If the identified account does not exist, this transaction SHALL fail.<br/>
     * Multiple nodes MAY share the same node account.<br/>
     * This field is REQUIRED.
     *
     * Generated from protobuf field <code>.proto.AccountID account_id = 1;</code>
     */
    protected $account_id = null;
    /**
     **
     * A short description of the node.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.<br/>
     * This field is OPTIONAL.
     *
     * Generated from protobuf field <code>string description = 2;</code>
     */
    protected $description = '';
    /**
     **
     * A list of service endpoints for gossip.
     * <p>
     * These endpoints SHALL represent the published endpoints to which other
     * consensus nodes may _gossip_ transactions.<br/>
     * These endpoints MUST specify a port.<br/>
     * This list MUST NOT be empty.<br/>
     * This list MUST NOT contain more than `10` entries.<br/>
     * The first two entries in this list SHALL be the endpoints published to
     * all consensus nodes.<br/>
     * All other entries SHALL be reserved for future use.
     * <p>
     * Each network may have additional requirements for these endpoints.
     * A client MUST check network-specific documentation for those
     * details.<br/>
     * If the network configuration value `gossipFqdnRestricted` is set, then
     * all endpoints in this list MUST supply only IP address.<br/>
     * If the network configuration value `gossipFqdnRestricted` is _not_ set,
     * then endpoints in this list MAY supply either IP address or FQDN, but
     * MUST NOT supply both values for the same endpoint.
     *
     * Generated from protobuf field <code>repeated .proto.ServiceEndpoint gossip_endpoint = 3;</code>
     */
    private $gossip_endpoint;
    /**
     **
     * A list of service endpoints for gRPC calls.
     * <p>
     * These endpoints SHALL represent the published gRPC endpoints to which
     * clients may submit transactions.<br/>
     * These endpoints MUST specify a port.<br/>
     * Endpoints in this list MAY supply either IP address or FQDN, but MUST
     * NOT supply both values for the same endpoint.<br/>
     * This list MUST NOT be empty.<br/>
     * This list MUST NOT contain more than `8` entries.
     *
     * Generated from protobuf field <code>repeated .proto.ServiceEndpoint service_endpoint = 4;</code>
     */
    private $service_endpoint;
    /**
     **
     * A certificate used to sign gossip events.
     * <p>
     * This value MUST be a certificate of a type permitted for gossip
     * signatures.<br/>
     * This value MUST be the DER encoding of the certificate presented.<br/>
     * This field is REQUIRED and MUST NOT be empty.
     *
     * Generated from protobuf field <code>bytes gossip_ca_certificate = 5;</code>
     */
    protected $gossip_ca_certificate = '';
    /**
     **
     * A hash of the node gRPC TLS certificate.
     * <p>
     * This value MAY be used to verify the certificate presented by the node
     * during TLS negotiation for gRPC.<br/>
     * This value MUST be a SHA-384 hash.<br/>
     * The TLS certificate to be hashed MUST first be in PEM format and MUST be
     * encoded with UTF-8 NFKD encoding to a stream of bytes provided to
     * the hash algorithm.<br/>
     * This field is OPTIONAL.
     *
     * Generated from protobuf field <code>bytes grpc_certificate_hash = 6;</code>
     */
    protected $grpc_certificate_hash = '';
    /**
     **
     * An administrative key controlled by the node operator.
     * <p>
     * This key MUST sign this transaction.<br/>
     * This key MUST sign each transaction to update this node.<br/>
     * This field MUST contain a valid `Key` value.<br/>
     * This field is REQUIRED and MUST NOT be set to an empty `KeyList`.
     *
     * Generated from protobuf field <code>.proto.Key admin_key = 7;</code>
     */
    protected $admin_key = null;
    /**
     **
     * A boolean flag indicating whether the node operator declines to receive
     * node rewards.
     * <p>
     * If this flag is set to `true`, the node operator declines to receive
     * node rewards.<br/>
     *
     * Generated from protobuf field <code>bool decline_reward = 8;</code>
     */
    protected $decline_reward = false;
    /**
     **
     * A web proxy for gRPC from non-gRPC clients.
     * <p>
     * This endpoint SHALL be a Fully Qualified Domain Name (FQDN) using the HTTPS
     * protocol, and SHALL support gRPC-Web for use by browser-based clients.<br/>
     * This endpoint MUST be signed by a trusted certificate authority.<br/>
     * This endpoint MUST use a valid port and SHALL be reachable over TLS.<br/>
     * This field MAY be omitted if the node does not support gRPC-Web access.<br/>
     * This field MUST be updated if the gRPC-Web endpoint changes.<br/>
     * This field SHALL enable frontend clients to avoid hard-coded proxy endpoints.
     *
     * Generated from protobuf field <code>.proto.ServiceEndpoint grpc_proxy_endpoint = 9;</code>
     */
    protected $grpc_proxy_endpoint = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Proto\AccountID $account_id
     *          *
     *           A Node account identifier.
     *           <p>
     *           This account identifier MUST be in the "account number" form.<br/>
     *           This account identifier MUST NOT use the alias field.<br/>
     *           If the identified account does not exist, this transaction SHALL fail.<br/>
     *           Multiple nodes MAY share the same node account.<br/>
     *           This field is REQUIRED.
     *     @type string $description
     *          *
     *           A short description of the node.
     *           <p>
     *           This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     *           (default 100) bytes when encoded as UTF-8.<br/>
     *           This field is OPTIONAL.
     *     @type \Proto\ServiceEndpoint[] $gossip_endpoint
     *          *
     *           A list of service endpoints for gossip.
     *           <p>
     *           These endpoints SHALL represent the published endpoints to which other
     *           consensus nodes may _gossip_ transactions.<br/>
     *           These endpoints MUST specify a port.<br/>
     *           This list MUST NOT be empty.<br/>
     *           This list MUST NOT contain more than `10` entries.<br/>
     *           The first two entries in this list SHALL be the endpoints published to
     *           all consensus nodes.<br/>
     *           All other entries SHALL be reserved for future use.
     *           <p>
     *           Each network may have additional requirements for these endpoints.
     *           A client MUST check network-specific documentation for those
     *           details.<br/>
     *           If the network configuration value `gossipFqdnRestricted` is set, then
     *           all endpoints in this list MUST supply only IP address.<br/>
     *           If the network configuration value `gossipFqdnRestricted` is _not_ set,
     *           then endpoints in this list MAY supply either IP address or FQDN, but
     *           MUST NOT supply both values for the same endpoint.
     *     @type \Proto\ServiceEndpoint[] $service_endpoint
     *          *
     *           A list of service endpoints for gRPC calls.
     *           <p>
     *           These endpoints SHALL represent the published gRPC endpoints to which
     *           clients may submit transactions.<br/>
     *           These endpoints MUST specify a port.<br/>
     *           Endpoints in this list MAY supply either IP address or FQDN, but MUST
     *           NOT supply both values for the same endpoint.<br/>
     *           This list MUST NOT be empty.<br/>
     *           This list MUST NOT contain more than `8` entries.
     *     @type string $gossip_ca_certificate
     *          *
     *           A certificate used to sign gossip events.
     *           <p>
     *           This value MUST be a certificate of a type permitted for gossip
     *           signatures.<br/>
     *           This value MUST be the DER encoding of the certificate presented.<br/>
     *           This field is REQUIRED and MUST NOT be empty.
     *     @type string $grpc_certificate_hash
     *          *
     *           A hash of the node gRPC TLS certificate.
     *           <p>
     *           This value MAY be used to verify the certificate presented by the node
     *           during TLS negotiation for gRPC.<br/>
     *           This value MUST be a SHA-384 hash.<br/>
     *           The TLS certificate to be hashed MUST first be in PEM format and MUST be
     *           encoded with UTF-8 NFKD encoding to a stream of bytes provided to
     *           the hash algorithm.<br/>
     *           This field is OPTIONAL.
     *     @type \Proto\Key $admin_key
     *          *
     *           An administrative key controlled by the node operator.
     *           <p>
     *           This key MUST sign this transaction.<br/>
     *           This key MUST sign each transaction to update this node.<br/>
     *           This field MUST contain a valid `Key` value.<br/>
     *           This field is REQUIRED and MUST NOT be set to an empty `KeyList`.
     *     @type bool $decline_reward
     *          *
     *           A boolean flag indicating whether the node operator declines to receive
     *           node rewards.
     *           <p>
     *           If this flag is set to `true`, the node operator declines to receive
     *           node rewards.<br/>
     *     @type \Proto\ServiceEndpoint $grpc_proxy_endpoint
     *          *
     *           A web proxy for gRPC from non-gRPC clients.
     *           <p>
     *           This endpoint SHALL be a Fully Qualified Domain Name (FQDN) using the HTTPS
     *           protocol, and SHALL support gRPC-Web for use by browser-based clients.<br/>
     *           This endpoint MUST be signed by a trusted certificate authority.<br/>
     *           This endpoint MUST use a valid port and SHALL be reachable over TLS.<br/>
     *           This field MAY be omitted if the node does not support gRPC-Web access.<br/>
     *           This field MUST be updated if the gRPC-Web endpoint changes.<br/>
     *           This field SHALL enable frontend clients to avoid hard-coded proxy endpoints.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\NodeCreate::initOnce();
        parent::__construct($data);
    }

    /**
     **
     * A Node account identifier.
     * <p>
     * This account identifier MUST be in the "account number" form.<br/>
     * This account identifier MUST NOT use the alias field.<br/>
     * If the identified account does not exist, this transaction SHALL fail.<br/>
     * Multiple nodes MAY share the same node account.<br/>
     * This field is REQUIRED.
     *
     * Generated from protobuf field <code>.proto.AccountID account_id = 1;</code>
     * @return \Proto\AccountID|null
     */
    public function getAccountId()
    {
        return $this->account_id;
    }

    public function hasAccountId()
    {
        return isset($this->account_id);
    }

    public function clearAccountId()
    {
        unset($this->account_id);
    }

    /**
     **
     * A Node account identifier.
     * <p>
     * This account identifier MUST be in the "account number" form.<br/>
     * This account identifier MUST NOT use the alias field.<br/>
     * If the identified account does not exist, this transaction SHALL fail.<br/>
     * Multiple nodes MAY share the same node account.<br/>
     * This field is REQUIRED.
     *
     * Generated from protobuf field <code>.proto.AccountID account_id = 1;</code>
     * @param \Proto\AccountID $var
     * @return $this
     */
    public function setAccountId($var)
    {
        GPBUtil::checkMessage($var, \Proto\AccountID::class);
        $this->account_id = $var;

        return $this;
    }

    /**
     **
     * A short description of the node.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.<br/>
     * This field is OPTIONAL.
     *
     * Generated from protobuf field <code>string description = 2;</code>
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     **
     * A short description of the node.
     * <p>
     * This value, if set, MUST NOT exceed `transaction.maxMemoUtf8Bytes`
     * (default 100) bytes when encoded as UTF-8.<br/>
     * This field is OPTIONAL.
     *
     * Generated from protobuf field <code>string description = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setDescription($var)
    {
        GPBUtil::checkString($var, True);
        $this->description = $var;

        return $this;
    }

    /**
     **
     * A list of service endpoints for gossip.
     * <p>
     * These endpoints SHALL represent the published endpoints to which other
     * consensus nodes may _gossip_ transactions.<br/>
     * These endpoints MUST specify a port.<br/>
     * This list MUST NOT be empty.<br/>
     * This list MUST NOT contain more than `10` entries.<br/>
     * The first two entries in this list SHALL be the endpoints published to
     * all consensus nodes.<br/>
     * All other entries SHALL be reserved for future use.
     * <p>
     * Each network may have additional requirements for these endpoints.
     * A client MUST check network-specific documentation for those
     * details.<br/>
     * If the network configuration value `gossipFqdnRestricted` is set, then
     * all endpoints in this list MUST supply only IP address.<br/>
     * If the network configuration value `gossipFqdnRestricted` is _not_ set,
     * then endpoints in this list MAY supply either IP address or FQDN, but
     * MUST NOT supply both values for the same endpoint.
     *
     * Generated from protobuf field <code>repeated .proto.ServiceEndpoint gossip_endpoint = 3;</code>
     * @return RepeatedField<\Proto\ServiceEndpoint>
     */
    public function getGossipEndpoint()
    {
        return $this->gossip_endpoint;
    }

    /**
     **
     * A list of service endpoints for gossip.
     * <p>
     * These endpoints SHALL represent the published endpoints to which other
     * consensus nodes may _gossip_ transactions.<br/>
     * These endpoints MUST specify a port.<br/>
     * This list MUST NOT be empty.<br/>
     * This list MUST NOT contain more than `10` entries.<br/>
     * The first two entries in this list SHALL be the endpoints published to
     * all consensus nodes.<br/>
     * All other entries SHALL be reserved for future use.
     * <p>
     * Each network may have additional requirements for these endpoints.
     * A client MUST check network-specific documentation for those
     * details.<br/>
     * If the network configuration value `gossipFqdnRestricted` is set, then
     * all endpoints in this list MUST supply only IP address.<br/>
     * If the network configuration value `gossipFqdnRestricted` is _not_ set,
     * then endpoints in this list MAY supply either IP address or FQDN, but
     * MUST NOT supply both values for the same endpoint.
     *
     * Generated from protobuf field <code>repeated .proto.ServiceEndpoint gossip_endpoint = 3;</code>
     * @param \Proto\ServiceEndpoint[] $var
     * @return $this
     */
    public function setGossipEndpoint($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Proto\ServiceEndpoint::class);
        $this->gossip_endpoint = $arr;

        return $this;
    }

    /**
     **
     * A list of service endpoints for gRPC calls.
     * <p>
     * These endpoints SHALL represent the published gRPC endpoints to which
     * clients may submit transactions.<br/>
     * These endpoints MUST specify a port.<br/>
     * Endpoints in this list MAY supply either IP address or FQDN, but MUST
     * NOT supply both values for the same endpoint.<br/>
     * This list MUST NOT be empty.<br/>
     * This list MUST NOT contain more than `8` entries.
     *
     * Generated from protobuf field <code>repeated .proto.ServiceEndpoint service_endpoint = 4;</code>
     * @return RepeatedField<\Proto\ServiceEndpoint>
     */
    public function getServiceEndpoint()
    {
        return $this->service_endpoint;
    }

    /**
     **
     * A list of service endpoints for gRPC calls.
     * <p>
     * These endpoints SHALL represent the published gRPC endpoints to which
     * clients may submit transactions.<br/>
     * These endpoints MUST specify a port.<br/>
     * Endpoints in this list MAY supply either IP address or FQDN, but MUST
     * NOT supply both values for the same endpoint.<br/>
     * This list MUST NOT be empty.<br/>
     * This list MUST NOT contain more than `8` entries.
     *
     * Generated from protobuf field <code>repeated .proto.ServiceEndpoint service_endpoint = 4;</code>
     * @param \Proto\ServiceEndpoint[] $var
     * @return $this
     */
    public function setServiceEndpoint($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Proto\ServiceEndpoint::class);
        $this->service_endpoint = $arr;

        return $this;
    }

    /**
     **
     * A certificate used to sign gossip events.
     * <p>
     * This value MUST be a certificate of a type permitted for gossip
     * signatures.<br/>
     * This value MUST be the DER encoding of the certificate presented.<br/>
     * This field is REQUIRED and MUST NOT be empty.
     *
     * Generated from protobuf field <code>bytes gossip_ca_certificate = 5;</code>
     * @return string
     */
    public function getGossipCaCertificate()
    {
        return $this->gossip_ca_certificate;
    }

    /**
     **
     * A certificate used to sign gossip events.
     * <p>
     * This value MUST be a certificate of a type permitted for gossip
     * signatures.<br/>
     * This value MUST be the DER encoding of the certificate presented.<br/>
     * This field is REQUIRED and MUST NOT be empty.
     *
     * Generated from protobuf field <code>bytes gossip_ca_certificate = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setGossipCaCertificate($var)
    {
        GPBUtil::checkString($var, False);
        $this->gossip_ca_certificate = $var;

        return $this;
    }

    /**
     **
     * A hash of the node gRPC TLS certificate.
     * <p>
     * This value MAY be used to verify the certificate presented by the node
     * during TLS negotiation for gRPC.<br/>
     * This value MUST be a SHA-384 hash.<br/>
     * The TLS certificate to be hashed MUST first be in PEM format and MUST be
     * encoded with UTF-8 NFKD encoding to a stream of bytes provided to
     * the hash algorithm.<br/>
     * This field is OPTIONAL.
     *
     * Generated from protobuf field <code>bytes grpc_certificate_hash = 6;</code>
     * @return string
     */
    public function getGrpcCertificateHash()
    {
        return $this->grpc_certificate_hash;
    }

    /**
     **
     * A hash of the node gRPC TLS certificate.
     * <p>
     * This value MAY be used to verify the certificate presented by the node
     * during TLS negotiation for gRPC.<br/>
     * This value MUST be a SHA-384 hash.<br/>
     * The TLS certificate to be hashed MUST first be in PEM format and MUST be
     * encoded with UTF-8 NFKD encoding to a stream of bytes provided to
     * the hash algorithm.<br/>
     * This field is OPTIONAL.
     *
     * Generated from protobuf field <code>bytes grpc_certificate_hash = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setGrpcCertificateHash($var)
    {
        GPBUtil::checkString($var, False);
        $this->grpc_certificate_hash = $var;

        return $this;
    }

    /**
     **
     * An administrative key controlled by the node operator.
     * <p>
     * This key MUST sign this transaction.<br/>
     * This key MUST sign each transaction to update this node.<br/>
     * This field MUST contain a valid `Key` value.<br/>
     * This field is REQUIRED and MUST NOT be set to an empty `KeyList`.
     *
     * Generated from protobuf field <code>.proto.Key admin_key = 7;</code>
     * @return \Proto\Key|null
     */
    public function getAdminKey()
    {
        return $this->admin_key;
    }

    public function hasAdminKey()
    {
        return isset($this->admin_key);
    }

    public function clearAdminKey()
    {
        unset($this->admin_key);
    }

    /**
     **
     * An administrative key controlled by the node operator.
     * <p>
     * This key MUST sign this transaction.<br/>
     * This key MUST sign each transaction to update this node.<br/>
     * This field MUST contain a valid `Key` value.<br/>
     * This field is REQUIRED and MUST NOT be set to an empty `KeyList`.
     *
     * Generated from protobuf field <code>.proto.Key admin_key = 7;</code>
     * @param \Proto\Key $var
     * @return $this
     */
    public function setAdminKey($var)
    {
        GPBUtil::checkMessage($var, \Proto\Key::class);
        $this->admin_key = $var;

        return $this;
    }

    /**
     **
     * A boolean flag indicating whether the node operator declines to receive
     * node rewards.
     * <p>
     * If this flag is set to `true`, the node operator declines to receive
     * node rewards.<br/>
     *
     * Generated from protobuf field <code>bool decline_reward = 8;</code>
     * @return bool
     */
    public function getDeclineReward()
    {
        return $this->decline_reward;
    }

    /**
     **
     * A boolean flag indicating whether the node operator declines to receive
     * node rewards.
     * <p>
     * If this flag is set to `true`, the node operator declines to receive
     * node rewards.<br/>
     *
     * Generated from protobuf field <code>bool decline_reward = 8;</code>
     * @param bool $var
     * @return $this
     */
    public function setDeclineReward($var)
    {
        GPBUtil::checkBool($var);
        $this->decline_reward = $var;

        return $this;
    }

    /**
     **
     * A web proxy for gRPC from non-gRPC clients.
     * <p>
     * This endpoint SHALL be a Fully Qualified Domain Name (FQDN) using the HTTPS
     * protocol, and SHALL support gRPC-Web for use by browser-based clients.<br/>
     * This endpoint MUST be signed by a trusted certificate authority.<br/>
     * This endpoint MUST use a valid port and SHALL be reachable over TLS.<br/>
     * This field MAY be omitted if the node does not support gRPC-Web access.<br/>
     * This field MUST be updated if the gRPC-Web endpoint changes.<br/>
     * This field SHALL enable frontend clients to avoid hard-coded proxy endpoints.
     *
     * Generated from protobuf field <code>.proto.ServiceEndpoint grpc_proxy_endpoint = 9;</code>
     * @return \Proto\ServiceEndpoint|null
     */
    public function getGrpcProxyEndpoint()
    {
        return $this->grpc_proxy_endpoint;
    }

    public function hasGrpcProxyEndpoint()
    {
        return isset($this->grpc_proxy_endpoint);
    }

    public function clearGrpcProxyEndpoint()
    {
        unset($this->grpc_proxy_endpoint);
    }

    /**
     **
     * A web proxy for gRPC from non-gRPC clients.
     * <p>
     * This endpoint SHALL be a Fully Qualified Domain Name (FQDN) using the HTTPS
     * protocol, and SHALL support gRPC-Web for use by browser-based clients.<br/>
     * This endpoint MUST be signed by a trusted certificate authority.<br/>
     * This endpoint MUST use a valid port and SHALL be reachable over TLS.<br/>
     * This field MAY be omitted if the node does not support gRPC-Web access.<br/>
     * This field MUST be updated if the gRPC-Web endpoint changes.<br/>
     * This field SHALL enable frontend clients to avoid hard-coded proxy endpoints.
     *
     * Generated from protobuf field <code>.proto.ServiceEndpoint grpc_proxy_endpoint = 9;</code>
     * @param \Proto\ServiceEndpoint $var
     * @return $this
     */
    public function setGrpcProxyEndpoint($var)
    {
        GPBUtil::checkMessage($var, \Proto\ServiceEndpoint::class);
        $this->grpc_proxy_endpoint = $var;

        return $this;
    }

}

